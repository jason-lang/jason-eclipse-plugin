/*
 * generated by Xtext 2.23.0
 */
package jasonide.xtext.mas2j.serializer;

import com.google.inject.Inject;
import jasonide.xtext.mas2j.mas2j.Agent;
import jasonide.xtext.mas2j.mas2j.AgentArchClass;
import jasonide.xtext.mas2j.mas2j.AgentClass;
import jasonide.xtext.mas2j.mas2j.Agents;
import jasonide.xtext.mas2j.mas2j.BeliefBaseClass;
import jasonide.xtext.mas2j.mas2j.Beliefs;
import jasonide.xtext.mas2j.mas2j.Classpath;
import jasonide.xtext.mas2j.mas2j.Classpaths;
import jasonide.xtext.mas2j.mas2j.ClsDef;
import jasonide.xtext.mas2j.mas2j.Control;
import jasonide.xtext.mas2j.mas2j.Directive;
import jasonide.xtext.mas2j.mas2j.Directives;
import jasonide.xtext.mas2j.mas2j.DiscardEvents;
import jasonide.xtext.mas2j.mas2j.Environment;
import jasonide.xtext.mas2j.mas2j.EnvironmentLocus;
import jasonide.xtext.mas2j.mas2j.FileName;
import jasonide.xtext.mas2j.mas2j.Goals;
import jasonide.xtext.mas2j.mas2j.Infrastructure;
import jasonide.xtext.mas2j.mas2j.Instances;
import jasonide.xtext.mas2j.mas2j.LstParametersClsDef;
import jasonide.xtext.mas2j.mas2j.Mas2jModel;
import jasonide.xtext.mas2j.mas2j.Mas2jPackage;
import jasonide.xtext.mas2j.mas2j.Mindinspector;
import jasonide.xtext.mas2j.mas2j.NewFocus;
import jasonide.xtext.mas2j.mas2j.Nrcbp;
import jasonide.xtext.mas2j.mas2j.Options;
import jasonide.xtext.mas2j.mas2j.OtherOption;
import jasonide.xtext.mas2j.mas2j.ParameterClsDef;
import jasonide.xtext.mas2j.mas2j.RequeueEvents;
import jasonide.xtext.mas2j.mas2j.RetrieveEvents;
import jasonide.xtext.mas2j.mas2j.SameFocus;
import jasonide.xtext.mas2j.mas2j.Sourcepath;
import jasonide.xtext.mas2j.mas2j.Sourcepaths;
import jasonide.xtext.mas2j.mas2j.Verbose;
import jasonide.xtext.mas2j.services.Mas2jGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class Mas2jSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Mas2jGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Mas2jPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Mas2jPackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case Mas2jPackage.AGENT_ARCH_CLASS:
				sequence_AgentArchClass(context, (AgentArchClass) semanticObject); 
				return; 
			case Mas2jPackage.AGENT_CLASS:
				sequence_AgentClass(context, (AgentClass) semanticObject); 
				return; 
			case Mas2jPackage.AGENTS:
				sequence_Agents(context, (Agents) semanticObject); 
				return; 
			case Mas2jPackage.BELIEF_BASE_CLASS:
				sequence_BeliefBaseClass(context, (BeliefBaseClass) semanticObject); 
				return; 
			case Mas2jPackage.BELIEFS:
				sequence_Beliefs(context, (Beliefs) semanticObject); 
				return; 
			case Mas2jPackage.CLASSPATH:
				sequence_Classpath(context, (Classpath) semanticObject); 
				return; 
			case Mas2jPackage.CLASSPATHS:
				sequence_Classpaths(context, (Classpaths) semanticObject); 
				return; 
			case Mas2jPackage.CLS_DEF:
				sequence_ClsDef(context, (ClsDef) semanticObject); 
				return; 
			case Mas2jPackage.CONTROL:
				sequence_Control(context, (Control) semanticObject); 
				return; 
			case Mas2jPackage.DIRECTIVE:
				sequence_Directive(context, (Directive) semanticObject); 
				return; 
			case Mas2jPackage.DIRECTIVES:
				sequence_Directives(context, (Directives) semanticObject); 
				return; 
			case Mas2jPackage.DISCARD_EVENTS:
				sequence_Events(context, (DiscardEvents) semanticObject); 
				return; 
			case Mas2jPackage.ENVIRONMENT:
				sequence_Environment(context, (Environment) semanticObject); 
				return; 
			case Mas2jPackage.ENVIRONMENT_LOCUS:
				sequence_EnvironmentLocus(context, (EnvironmentLocus) semanticObject); 
				return; 
			case Mas2jPackage.FILE_NAME:
				sequence_FileName(context, (FileName) semanticObject); 
				return; 
			case Mas2jPackage.GOALS:
				sequence_Goals(context, (Goals) semanticObject); 
				return; 
			case Mas2jPackage.INFRASTRUCTURE:
				sequence_Infrastructure(context, (Infrastructure) semanticObject); 
				return; 
			case Mas2jPackage.INSTANCES:
				sequence_Instances(context, (Instances) semanticObject); 
				return; 
			case Mas2jPackage.LST_PARAMETERS_CLS_DEF:
				sequence_LstParametersClsDef(context, (LstParametersClsDef) semanticObject); 
				return; 
			case Mas2jPackage.MAS2J_MODEL:
				sequence_Mas2jModel(context, (Mas2jModel) semanticObject); 
				return; 
			case Mas2jPackage.MINDINSPECTOR:
				sequence_Mindinspector(context, (Mindinspector) semanticObject); 
				return; 
			case Mas2jPackage.NEW_FOCUS:
				sequence_IntBels(context, (NewFocus) semanticObject); 
				return; 
			case Mas2jPackage.NRCBP:
				sequence_Nrcbp(context, (Nrcbp) semanticObject); 
				return; 
			case Mas2jPackage.OPTIONS:
				sequence_Options(context, (Options) semanticObject); 
				return; 
			case Mas2jPackage.OTHER_OPTION:
				sequence_OtherOption(context, (OtherOption) semanticObject); 
				return; 
			case Mas2jPackage.PARAMETER_CLS_DEF:
				sequence_ParameterClsDef(context, (ParameterClsDef) semanticObject); 
				return; 
			case Mas2jPackage.REQUEUE_EVENTS:
				sequence_Events(context, (RequeueEvents) semanticObject); 
				return; 
			case Mas2jPackage.RETRIEVE_EVENTS:
				sequence_Events(context, (RetrieveEvents) semanticObject); 
				return; 
			case Mas2jPackage.SAME_FOCUS:
				sequence_IntBels(context, (SameFocus) semanticObject); 
				return; 
			case Mas2jPackage.SOURCEPATH:
				sequence_Sourcepath(context, (Sourcepath) semanticObject); 
				return; 
			case Mas2jPackage.SOURCEPATHS:
				sequence_Sourcepaths(context, (Sourcepaths) semanticObject); 
				return; 
			case Mas2jPackage.VERBOSE:
				sequence_Verbose(context, (Verbose) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AgentArchClass returns AgentArchClass
	 *
	 * Constraint:
	 *     agentArchClass=ClsDef
	 */
	protected void sequence_AgentArchClass(ISerializationContext context, AgentArchClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.AGENT_ARCH_CLASS__AGENT_ARCH_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.AGENT_ARCH_CLASS__AGENT_ARCH_CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgentArchClassAccess().getAgentArchClassClsDefParserRuleCall_1_0(), semanticObject.getAgentArchClass());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AgentClass returns AgentClass
	 *
	 * Constraint:
	 *     agentClass=ClsDef
	 */
	protected void sequence_AgentClass(ISerializationContext context, AgentClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.AGENT_CLASS__AGENT_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.AGENT_CLASS__AGENT_CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgentClassAccess().getAgentClassClsDefParserRuleCall_1_0(), semanticObject.getAgentClass());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     (
	 *         name=ID_WITH_STARTING_LCLETTER 
	 *         sourceFile=FileName? 
	 *         options=Options? 
	 *         (agentArchClass+=AgentArchClass | beliefBaseClass+=BeliefBaseClass | agentClass+=AgentClass | instances+=Instances | environment+=EnvironmentLocus)*
	 *     )
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Agents returns Agents
	 *
	 * Constraint:
	 *     agents+=Agent+
	 */
	protected void sequence_Agents(ISerializationContext context, Agents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BeliefBaseClass returns BeliefBaseClass
	 *
	 * Constraint:
	 *     beliefBaseClass=ClsDef
	 */
	protected void sequence_BeliefBaseClass(ISerializationContext context, BeliefBaseClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.BELIEF_BASE_CLASS__BELIEF_BASE_CLASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.BELIEF_BASE_CLASS__BELIEF_BASE_CLASS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBeliefBaseClassAccess().getBeliefBaseClassClsDefParserRuleCall_1_0(), semanticObject.getBeliefBaseClass());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Beliefs
	 *     Beliefs returns Beliefs
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_Beliefs(ISerializationContext context, Beliefs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.BELIEFS__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.BELIEFS__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBeliefsAccess().getValSTRINGTerminalRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Classpath returns Classpath
	 *
	 * Constraint:
	 *     nomeclasspath=STRING
	 */
	protected void sequence_Classpath(ISerializationContext context, Classpath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.CLASSPATH__NOMECLASSPATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.CLASSPATH__NOMECLASSPATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClasspathAccess().getNomeclasspathSTRINGTerminalRuleCall_0_0(), semanticObject.getNomeclasspath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Classpaths returns Classpaths
	 *
	 * Constraint:
	 *     classpath+=Classpath+
	 */
	protected void sequence_Classpaths(ISerializationContext context, Classpaths semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterClsDef returns ClsDef
	 *     ClsDef returns ClsDef
	 *
	 * Constraint:
	 *     (infrastructure=FQN (parameter+=ParameterClsDef parameter+=ParameterClsDef*)?)
	 */
	protected void sequence_ClsDef(ISerializationContext context, ClsDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Control returns Control
	 *
	 * Constraint:
	 *     (control=ClsDef controlLocus=STRING?)
	 */
	protected void sequence_Control(ISerializationContext context, Control semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Directive returns Directive
	 *
	 * Constraint:
	 *     (directive=ID_WITH_STARTING_LCLETTER clsDirective=ClsDef)
	 */
	protected void sequence_Directive(ISerializationContext context, Directive semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.DIRECTIVE__DIRECTIVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.DIRECTIVE__DIRECTIVE));
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.DIRECTIVE__CLS_DIRECTIVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.DIRECTIVE__CLS_DIRECTIVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDirectiveAccess().getDirectiveID_WITH_STARTING_LCLETTERTerminalRuleCall_0_0(), semanticObject.getDirective());
		feeder.accept(grammarAccess.getDirectiveAccess().getClsDirectiveClsDefParserRuleCall_2_0(), semanticObject.getClsDirective());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Directives returns Directives
	 *
	 * Constraint:
	 *     directives+=Directive+
	 */
	protected void sequence_Directives(ISerializationContext context, Directives semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvironmentLocus returns EnvironmentLocus
	 *
	 * Constraint:
	 *     environmentLocus=STRING
	 */
	protected void sequence_EnvironmentLocus(ISerializationContext context, EnvironmentLocus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.ENVIRONMENT_LOCUS__ENVIRONMENT_LOCUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.ENVIRONMENT_LOCUS__ENVIRONMENT_LOCUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvironmentLocusAccess().getEnvironmentLocusSTRINGTerminalRuleCall_1_0(), semanticObject.getEnvironmentLocus());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Environment returns Environment
	 *
	 * Constraint:
	 *     (environment=ClsDef environmentLocus=STRING?)
	 */
	protected void sequence_Environment(ISerializationContext context, Environment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns DiscardEvents
	 *     Events returns DiscardEvents
	 *
	 * Constraint:
	 *     {DiscardEvents}
	 */
	protected void sequence_Events(ISerializationContext context, DiscardEvents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns RequeueEvents
	 *     Events returns RequeueEvents
	 *
	 * Constraint:
	 *     {RequeueEvents}
	 */
	protected void sequence_Events(ISerializationContext context, RequeueEvents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns RetrieveEvents
	 *     Events returns RetrieveEvents
	 *
	 * Constraint:
	 *     {RetrieveEvents}
	 */
	protected void sequence_Events(ISerializationContext context, RetrieveEvents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FileName returns FileName
	 *
	 * Constraint:
	 *     (path=PATH? asid+=ID_WITH_STARTING_LCLETTER asid+=ID_WITH_STARTING_LCLETTER?)
	 */
	protected void sequence_FileName(ISerializationContext context, FileName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Goals
	 *     Goals returns Goals
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_Goals(ISerializationContext context, Goals semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.GOALS__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.GOALS__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoalsAccess().getValSTRINGTerminalRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Infrastructure returns Infrastructure
	 *
	 * Constraint:
	 *     infrastructure=ClsDef
	 */
	protected void sequence_Infrastructure(ISerializationContext context, Infrastructure semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.INFRASTRUCTURE__INFRASTRUCTURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.INFRASTRUCTURE__INFRASTRUCTURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInfrastructureAccess().getInfrastructureClsDefParserRuleCall_2_0(), semanticObject.getInfrastructure());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instances returns Instances
	 *
	 * Constraint:
	 *     instances=INT_LITERAL
	 */
	protected void sequence_Instances(ISerializationContext context, Instances semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.INSTANCES__INSTANCES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.INSTANCES__INSTANCES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstancesAccess().getInstancesINT_LITERALTerminalRuleCall_1_0(), semanticObject.getInstances());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Option returns NewFocus
	 *     IntBels returns NewFocus
	 *
	 * Constraint:
	 *     {NewFocus}
	 */
	protected void sequence_IntBels(ISerializationContext context, NewFocus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns SameFocus
	 *     IntBels returns SameFocus
	 *
	 * Constraint:
	 *     {SameFocus}
	 */
	protected void sequence_IntBels(ISerializationContext context, SameFocus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterClsDef returns LstParametersClsDef
	 *     LstParametersClsDef returns LstParametersClsDef
	 *
	 * Constraint:
	 *     (parameter+=ParameterClsDef parameter+=ParameterClsDef*)
	 */
	protected void sequence_LstParametersClsDef(ISerializationContext context, LstParametersClsDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mas2jModel returns Mas2jModel
	 *
	 * Constraint:
	 *     (
	 *         name=ID_WITH_STARTING_LCLETTER 
	 *         infrastructure=Infrastructure? 
	 *         environment=Environment? 
	 *         control=Control? 
	 *         agents=Agents 
	 *         directives=Directives? 
	 *         classpath=Classpaths? 
	 *         sourcepath=Sourcepaths?
	 *     )
	 */
	protected void sequence_Mas2jModel(ISerializationContext context, Mas2jModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Mindinspector
	 *     Mindinspector returns Mindinspector
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_Mindinspector(ISerializationContext context, Mindinspector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.MINDINSPECTOR__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.MINDINSPECTOR__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMindinspectorAccess().getValSTRINGTerminalRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Nrcbp
	 *     Nrcbp returns Nrcbp
	 *
	 * Constraint:
	 *     val=INT_LITERAL
	 */
	protected void sequence_Nrcbp(ISerializationContext context, Nrcbp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.NRCBP__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.NRCBP__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNrcbpAccess().getValINT_LITERALTerminalRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Options returns Options
	 *
	 * Constraint:
	 *     (options+=Option options+=Option*)
	 */
	protected void sequence_Options(ISerializationContext context, Options semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns OtherOption
	 *     OtherOption returns OtherOption
	 *
	 * Constraint:
	 *     (optionName=ID (val=ID | val=STRING | int_val=INT_LITERAL))
	 */
	protected void sequence_OtherOption(ISerializationContext context, OtherOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterClsDef returns ParameterClsDef
	 *
	 * Constraint:
	 *     (parameterclsint=INT_LITERAL | parameterclsstr=STRING)
	 */
	protected void sequence_ParameterClsDef(ISerializationContext context, ParameterClsDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sourcepath returns Sourcepath
	 *
	 * Constraint:
	 *     nomesourcepath=STRING
	 */
	protected void sequence_Sourcepath(ISerializationContext context, Sourcepath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.SOURCEPATH__NOMESOURCEPATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.SOURCEPATH__NOMESOURCEPATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSourcepathAccess().getNomesourcepathSTRINGTerminalRuleCall_0_0(), semanticObject.getNomesourcepath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sourcepaths returns Sourcepaths
	 *
	 * Constraint:
	 *     sourcepath+=Sourcepath+
	 */
	protected void sequence_Sourcepaths(ISerializationContext context, Sourcepaths semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Verbose
	 *     Verbose returns Verbose
	 *
	 * Constraint:
	 *     val=INT_LITERAL
	 */
	protected void sequence_Verbose(ISerializationContext context, Verbose semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mas2jPackage.Literals.VERBOSE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mas2jPackage.Literals.VERBOSE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerboseAccess().getValINT_LITERALTerminalRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
}
