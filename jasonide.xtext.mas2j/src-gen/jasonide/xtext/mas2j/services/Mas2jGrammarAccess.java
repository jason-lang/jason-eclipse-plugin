/*
 * generated by Xtext 2.23.0
 */
package jasonide.xtext.mas2j.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Mas2jGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class Mas2jModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Mas2jModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMASKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_WITH_STARTING_LCLETTERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInfrastructureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInfrastructureInfrastructureParserRuleCall_3_0 = (RuleCall)cInfrastructureAssignment_3.eContents().get(0);
		private final Assignment cEnvironmentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_4_0 = (RuleCall)cEnvironmentAssignment_4.eContents().get(0);
		private final Assignment cControlAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cControlControlParserRuleCall_5_0 = (RuleCall)cControlAssignment_5.eContents().get(0);
		private final Assignment cAgentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAgentsAgentsParserRuleCall_6_0 = (RuleCall)cAgentsAssignment_6.eContents().get(0);
		private final Assignment cDirectivesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDirectivesDirectivesParserRuleCall_7_0 = (RuleCall)cDirectivesAssignment_7.eContents().get(0);
		private final Assignment cClasspathAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cClasspathClasspathsParserRuleCall_8_0 = (RuleCall)cClasspathAssignment_8.eContents().get(0);
		private final Assignment cSourcepathAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSourcepathSourcepathsParserRuleCall_9_0 = (RuleCall)cSourcepathAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
		//Mas2jModel:
		//	'MAS' name=ID_WITH_STARTING_LCLETTER '{'
		//	infrastructure=Infrastructure?
		//	environment=Environment?
		//	control=Control?
		//	agents=Agents
		//	directives=Directives?
		//	classpath=Classpaths?
		//	sourcepath=Sourcepaths?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MAS' name=ID_WITH_STARTING_LCLETTER '{' infrastructure=Infrastructure? environment=Environment? control=Control?
		//agents=Agents directives=Directives? classpath=Classpaths? sourcepath=Sourcepaths? '}'
		public Group getGroup() { return cGroup; }
		
		//'MAS'
		public Keyword getMASKeyword_0() { return cMASKeyword_0; }
		
		//name=ID_WITH_STARTING_LCLETTER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID_WITH_STARTING_LCLETTER
		public RuleCall getNameID_WITH_STARTING_LCLETTERTerminalRuleCall_1_0() { return cNameID_WITH_STARTING_LCLETTERTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//infrastructure=Infrastructure?
		public Assignment getInfrastructureAssignment_3() { return cInfrastructureAssignment_3; }
		
		//Infrastructure
		public RuleCall getInfrastructureInfrastructureParserRuleCall_3_0() { return cInfrastructureInfrastructureParserRuleCall_3_0; }
		
		//environment=Environment?
		public Assignment getEnvironmentAssignment_4() { return cEnvironmentAssignment_4; }
		
		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_4_0() { return cEnvironmentEnvironmentParserRuleCall_4_0; }
		
		//control=Control?
		public Assignment getControlAssignment_5() { return cControlAssignment_5; }
		
		//Control
		public RuleCall getControlControlParserRuleCall_5_0() { return cControlControlParserRuleCall_5_0; }
		
		//agents=Agents
		public Assignment getAgentsAssignment_6() { return cAgentsAssignment_6; }
		
		//Agents
		public RuleCall getAgentsAgentsParserRuleCall_6_0() { return cAgentsAgentsParserRuleCall_6_0; }
		
		//directives=Directives?
		public Assignment getDirectivesAssignment_7() { return cDirectivesAssignment_7; }
		
		//Directives
		public RuleCall getDirectivesDirectivesParserRuleCall_7_0() { return cDirectivesDirectivesParserRuleCall_7_0; }
		
		//classpath=Classpaths?
		public Assignment getClasspathAssignment_8() { return cClasspathAssignment_8; }
		
		//Classpaths
		public RuleCall getClasspathClasspathsParserRuleCall_8_0() { return cClasspathClasspathsParserRuleCall_8_0; }
		
		//sourcepath=Sourcepaths?
		public Assignment getSourcepathAssignment_9() { return cSourcepathAssignment_9; }
		
		//Sourcepaths
		public RuleCall getSourcepathSourcepathsParserRuleCall_9_0() { return cSourcepathSourcepathsParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDParserRuleCall_0() { return cIDParserRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDParserRuleCall_1_1() { return cIDParserRuleCall_1_1; }
	}
	public class InfrastructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Infrastructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInfrastructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInfrastructureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInfrastructureClsDefParserRuleCall_2_0 = (RuleCall)cInfrastructureAssignment_2.eContents().get(0);
		
		///* Infrastructure rules */ Infrastructure:
		//	'infrastructure' ':' infrastructure=ClsDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'infrastructure' ':' infrastructure=ClsDef
		public Group getGroup() { return cGroup; }
		
		//'infrastructure'
		public Keyword getInfrastructureKeyword_0() { return cInfrastructureKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//infrastructure=ClsDef
		public Assignment getInfrastructureAssignment_2() { return cInfrastructureAssignment_2; }
		
		//ClsDef
		public RuleCall getInfrastructureClsDefParserRuleCall_2_0() { return cInfrastructureClsDefParserRuleCall_2_0; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnvironmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnvironmentClsDefParserRuleCall_2_0 = (RuleCall)cEnvironmentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEnvironmentLocusAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEnvironmentLocusSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cEnvironmentLocusAssignment_3_1.eContents().get(0);
		
		///* Environment rules */ Environment:
		//	'environment' ':' environment=ClsDef ('at' environmentLocus=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'environment' ':' environment=ClsDef ('at' environmentLocus=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//environment=ClsDef
		public Assignment getEnvironmentAssignment_2() { return cEnvironmentAssignment_2; }
		
		//ClsDef
		public RuleCall getEnvironmentClsDefParserRuleCall_2_0() { return cEnvironmentClsDefParserRuleCall_2_0; }
		
		//('at' environmentLocus=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'at'
		public Keyword getAtKeyword_3_0() { return cAtKeyword_3_0; }
		
		//environmentLocus=STRING
		public Assignment getEnvironmentLocusAssignment_3_1() { return cEnvironmentLocusAssignment_3_1; }
		
		//STRING
		public RuleCall getEnvironmentLocusSTRINGTerminalRuleCall_3_1_0() { return cEnvironmentLocusSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Control");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutionControlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlClsDefParserRuleCall_2_0 = (RuleCall)cControlAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAtKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cControlLocusAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cControlLocusSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cControlLocusAssignment_3_1.eContents().get(0);
		
		///* Control rules */ Control:
		//	'executionControl' ':' control=ClsDef ('at' controlLocus=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'executionControl' ':' control=ClsDef ('at' controlLocus=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'executionControl'
		public Keyword getExecutionControlKeyword_0() { return cExecutionControlKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//control=ClsDef
		public Assignment getControlAssignment_2() { return cControlAssignment_2; }
		
		//ClsDef
		public RuleCall getControlClsDefParserRuleCall_2_0() { return cControlClsDefParserRuleCall_2_0; }
		
		//('at' controlLocus=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'at'
		public Keyword getAtKeyword_3_0() { return cAtKeyword_3_0; }
		
		//controlLocus=STRING
		public Assignment getControlLocusAssignment_3_1() { return cControlLocusAssignment_3_1; }
		
		//STRING
		public RuleCall getControlLocusSTRINGTerminalRuleCall_3_1_0() { return cControlLocusSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ClasspathsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Classpaths");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClasspathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClasspathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClasspathClasspathParserRuleCall_2_0 = (RuleCall)cClasspathAssignment_2.eContents().get(0);
		
		///* Classpath rules */ Classpaths:
		//	'classpath' ':' classpath+=Classpath+;
		@Override public ParserRule getRule() { return rule; }
		
		//'classpath' ':' classpath+=Classpath+
		public Group getGroup() { return cGroup; }
		
		//'classpath'
		public Keyword getClasspathKeyword_0() { return cClasspathKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//classpath+=Classpath+
		public Assignment getClasspathAssignment_2() { return cClasspathAssignment_2; }
		
		//Classpath
		public RuleCall getClasspathClasspathParserRuleCall_2_0() { return cClasspathClasspathParserRuleCall_2_0; }
	}
	public class ClasspathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Classpath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNomeclasspathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNomeclasspathSTRINGTerminalRuleCall_0_0 = (RuleCall)cNomeclasspathAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Classpath:
		//	nomeclasspath=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//nomeclasspath=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//nomeclasspath=STRING
		public Assignment getNomeclasspathAssignment_0() { return cNomeclasspathAssignment_0; }
		
		//STRING
		public RuleCall getNomeclasspathSTRINGTerminalRuleCall_0_0() { return cNomeclasspathSTRINGTerminalRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SourcepathsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Sourcepaths");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAslSourcePathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourcepathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourcepathSourcepathParserRuleCall_2_0 = (RuleCall)cSourcepathAssignment_2.eContents().get(0);
		
		///* Sourcepath rules */ Sourcepaths:
		//	'aslSourcePath' ':' sourcepath+=Sourcepath+;
		@Override public ParserRule getRule() { return rule; }
		
		//'aslSourcePath' ':' sourcepath+=Sourcepath+
		public Group getGroup() { return cGroup; }
		
		//'aslSourcePath'
		public Keyword getAslSourcePathKeyword_0() { return cAslSourcePathKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//sourcepath+=Sourcepath+
		public Assignment getSourcepathAssignment_2() { return cSourcepathAssignment_2; }
		
		//Sourcepath
		public RuleCall getSourcepathSourcepathParserRuleCall_2_0() { return cSourcepathSourcepathParserRuleCall_2_0; }
	}
	public class SourcepathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Sourcepath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNomesourcepathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNomesourcepathSTRINGTerminalRuleCall_0_0 = (RuleCall)cNomesourcepathAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sourcepath:
		//	nomesourcepath=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//nomesourcepath=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//nomesourcepath=STRING
		public Assignment getNomesourcepathAssignment_0() { return cNomesourcepathAssignment_0; }
		
		//STRING
		public RuleCall getNomesourcepathSTRINGTerminalRuleCall_0_0() { return cNomesourcepathSTRINGTerminalRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ParameterClsDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.ParameterClsDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClsDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLstParametersClsDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cParameterclsintAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cParameterclsintINT_LITERALTerminalRuleCall_2_0 = (RuleCall)cParameterclsintAssignment_2.eContents().get(0);
		private final Assignment cParameterclsstrAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cParameterclsstrSTRINGTerminalRuleCall_3_0 = (RuleCall)cParameterclsstrAssignment_3.eContents().get(0);
		
		///* ClassDef rules */ ParameterClsDef:
		//	ClsDef | LstParametersClsDef | parameterclsint=INT_LITERAL | parameterclsstr=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ClsDef | LstParametersClsDef | parameterclsint=INT_LITERAL | parameterclsstr=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClsDef
		public RuleCall getClsDefParserRuleCall_0() { return cClsDefParserRuleCall_0; }
		
		//LstParametersClsDef
		public RuleCall getLstParametersClsDefParserRuleCall_1() { return cLstParametersClsDefParserRuleCall_1; }
		
		//parameterclsint=INT_LITERAL
		public Assignment getParameterclsintAssignment_2() { return cParameterclsintAssignment_2; }
		
		//INT_LITERAL
		public RuleCall getParameterclsintINT_LITERALTerminalRuleCall_2_0() { return cParameterclsintINT_LITERALTerminalRuleCall_2_0; }
		
		//parameterclsstr=STRING
		public Assignment getParameterclsstrAssignment_3() { return cParameterclsstrAssignment_3; }
		
		//STRING
		public RuleCall getParameterclsstrSTRINGTerminalRuleCall_3_0() { return cParameterclsstrSTRINGTerminalRuleCall_3_0; }
	}
	public class LstParametersClsDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.LstParametersClsDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParameterClsDefParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterParameterClsDefParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LstParametersClsDef:
		//	'[' parameter+=ParameterClsDef (',' parameter+=ParameterClsDef)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' parameter+=ParameterClsDef (',' parameter+=ParameterClsDef)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//parameter+=ParameterClsDef
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//ParameterClsDef
		public RuleCall getParameterParameterClsDefParserRuleCall_1_0() { return cParameterParameterClsDefParserRuleCall_1_0; }
		
		//(',' parameter+=ParameterClsDef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//parameter+=ParameterClsDef
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }
		
		//ParameterClsDef
		public RuleCall getParameterParameterClsDefParserRuleCall_2_1_0() { return cParameterParameterClsDefParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ClsDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.ClsDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInfrastructureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInfrastructureFQNParserRuleCall_0_0 = (RuleCall)cInfrastructureAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterParameterClsDefParserRuleCall_1_1_0 = (RuleCall)cParameterAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParameterAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParameterParameterClsDefParserRuleCall_1_2_1_0 = (RuleCall)cParameterAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ClsDef:
		//	infrastructure=FQN ('(' parameter+=ParameterClsDef (',' parameter+=ParameterClsDef)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//infrastructure=FQN ('(' parameter+=ParameterClsDef (',' parameter+=ParameterClsDef)* ')')?
		public Group getGroup() { return cGroup; }
		
		//infrastructure=FQN
		public Assignment getInfrastructureAssignment_0() { return cInfrastructureAssignment_0; }
		
		//FQN
		public RuleCall getInfrastructureFQNParserRuleCall_0_0() { return cInfrastructureFQNParserRuleCall_0_0; }
		
		//('(' parameter+=ParameterClsDef (',' parameter+=ParameterClsDef)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameter+=ParameterClsDef
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }
		
		//ParameterClsDef
		public RuleCall getParameterParameterClsDefParserRuleCall_1_1_0() { return cParameterParameterClsDefParserRuleCall_1_1_0; }
		
		//(',' parameter+=ParameterClsDef)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//parameter+=ParameterClsDef
		public Assignment getParameterAssignment_1_2_1() { return cParameterAssignment_1_2_1; }
		
		//ParameterClsDef
		public RuleCall getParameterParameterClsDefParserRuleCall_1_2_1_0() { return cParameterParameterClsDefParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class DirectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Directives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDirectivesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectivesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectivesDirectiveParserRuleCall_2_0 = (RuleCall)cDirectivesAssignment_2.eContents().get(0);
		
		///* Directive rules */ Directives:
		//	'directives' ':' directives+=Directive+;
		@Override public ParserRule getRule() { return rule; }
		
		//'directives' ':' directives+=Directive+
		public Group getGroup() { return cGroup; }
		
		//'directives'
		public Keyword getDirectivesKeyword_0() { return cDirectivesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//directives+=Directive+
		public Assignment getDirectivesAssignment_2() { return cDirectivesAssignment_2; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_2_0() { return cDirectivesDirectiveParserRuleCall_2_0; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Directive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectiveID_WITH_STARTING_LCLETTERTerminalRuleCall_0_0 = (RuleCall)cDirectiveAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClsDirectiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClsDirectiveClsDefParserRuleCall_2_0 = (RuleCall)cClsDirectiveAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Directive:
		//	directive=ID_WITH_STARTING_LCLETTER '=' clsDirective=ClsDef ';';
		@Override public ParserRule getRule() { return rule; }
		
		//directive=ID_WITH_STARTING_LCLETTER '=' clsDirective=ClsDef ';'
		public Group getGroup() { return cGroup; }
		
		//directive=ID_WITH_STARTING_LCLETTER
		public Assignment getDirectiveAssignment_0() { return cDirectiveAssignment_0; }
		
		//ID_WITH_STARTING_LCLETTER
		public RuleCall getDirectiveID_WITH_STARTING_LCLETTERTerminalRuleCall_0_0() { return cDirectiveID_WITH_STARTING_LCLETTERTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//clsDirective=ClsDef
		public Assignment getClsDirectiveAssignment_2() { return cClsDirectiveAssignment_2; }
		
		//ClsDef
		public RuleCall getClsDirectiveClsDefParserRuleCall_2_0() { return cClsDirectiveClsDefParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AgentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Agents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAgentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAgentsAgentParserRuleCall_2_0 = (RuleCall)cAgentsAssignment_2.eContents().get(0);
		
		///* Agents rules*/ Agents:
		//	'agents' ':' agents+=Agent+;
		@Override public ParserRule getRule() { return rule; }
		
		//'agents' ':' agents+=Agent+
		public Group getGroup() { return cGroup; }
		
		//'agents'
		public Keyword getAgentsKeyword_0() { return cAgentsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//agents+=Agent+
		public Assignment getAgentsAssignment_2() { return cAgentsAssignment_2; }
		
		//Agent
		public RuleCall getAgentsAgentParserRuleCall_2_0() { return cAgentsAgentParserRuleCall_2_0; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameID_WITH_STARTING_LCLETTERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cSourceFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceFileFileNameParserRuleCall_1_0 = (RuleCall)cSourceFileAssignment_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionsOptionsParserRuleCall_2_0 = (RuleCall)cOptionsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cAgentArchClassAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cAgentArchClassAgentArchClassParserRuleCall_3_0_0 = (RuleCall)cAgentArchClassAssignment_3_0.eContents().get(0);
		private final Assignment cBeliefBaseClassAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cBeliefBaseClassBeliefBaseClassParserRuleCall_3_1_0 = (RuleCall)cBeliefBaseClassAssignment_3_1.eContents().get(0);
		private final Assignment cAgentClassAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cAgentClassAgentClassParserRuleCall_3_2_0 = (RuleCall)cAgentClassAssignment_3_2.eContents().get(0);
		private final Assignment cInstancesAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cInstancesInstancesParserRuleCall_3_3_0 = (RuleCall)cInstancesAssignment_3_3.eContents().get(0);
		private final Assignment cEnvironmentAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cEnvironmentEnvironmentLocusParserRuleCall_3_4_0 = (RuleCall)cEnvironmentAssignment_3_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Agent:
		//	name=ID_WITH_STARTING_LCLETTER sourceFile=FileName? options=Options? (agentArchClass+=AgentArchClass |
		//	beliefBaseClass+=BeliefBaseClass | agentClass+=AgentClass | instances+=Instances | environment+=EnvironmentLocus)*
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID_WITH_STARTING_LCLETTER sourceFile=FileName? options=Options? (agentArchClass+=AgentArchClass |
		//beliefBaseClass+=BeliefBaseClass | agentClass+=AgentClass | instances+=Instances | environment+=EnvironmentLocus)* ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID_WITH_STARTING_LCLETTER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID_WITH_STARTING_LCLETTER
		public RuleCall getNameID_WITH_STARTING_LCLETTERTerminalRuleCall_0_0() { return cNameID_WITH_STARTING_LCLETTERTerminalRuleCall_0_0; }
		
		//sourceFile=FileName?
		public Assignment getSourceFileAssignment_1() { return cSourceFileAssignment_1; }
		
		//FileName
		public RuleCall getSourceFileFileNameParserRuleCall_1_0() { return cSourceFileFileNameParserRuleCall_1_0; }
		
		//options=Options?
		public Assignment getOptionsAssignment_2() { return cOptionsAssignment_2; }
		
		//Options
		public RuleCall getOptionsOptionsParserRuleCall_2_0() { return cOptionsOptionsParserRuleCall_2_0; }
		
		//(agentArchClass+=AgentArchClass | beliefBaseClass+=BeliefBaseClass | agentClass+=AgentClass | instances+=Instances |
		//environment+=EnvironmentLocus)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//agentArchClass+=AgentArchClass
		public Assignment getAgentArchClassAssignment_3_0() { return cAgentArchClassAssignment_3_0; }
		
		//AgentArchClass
		public RuleCall getAgentArchClassAgentArchClassParserRuleCall_3_0_0() { return cAgentArchClassAgentArchClassParserRuleCall_3_0_0; }
		
		//beliefBaseClass+=BeliefBaseClass
		public Assignment getBeliefBaseClassAssignment_3_1() { return cBeliefBaseClassAssignment_3_1; }
		
		//BeliefBaseClass
		public RuleCall getBeliefBaseClassBeliefBaseClassParserRuleCall_3_1_0() { return cBeliefBaseClassBeliefBaseClassParserRuleCall_3_1_0; }
		
		//agentClass+=AgentClass
		public Assignment getAgentClassAssignment_3_2() { return cAgentClassAssignment_3_2; }
		
		//AgentClass
		public RuleCall getAgentClassAgentClassParserRuleCall_3_2_0() { return cAgentClassAgentClassParserRuleCall_3_2_0; }
		
		//instances+=Instances
		public Assignment getInstancesAssignment_3_3() { return cInstancesAssignment_3_3; }
		
		//Instances
		public RuleCall getInstancesInstancesParserRuleCall_3_3_0() { return cInstancesInstancesParserRuleCall_3_3_0; }
		
		//environment+=EnvironmentLocus
		public Assignment getEnvironmentAssignment_3_4() { return cEnvironmentAssignment_3_4; }
		
		//EnvironmentLocus
		public RuleCall getEnvironmentEnvironmentLocusParserRuleCall_3_4_0() { return cEnvironmentEnvironmentLocusParserRuleCall_3_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathPATHParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Assignment cAsidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAsidID_WITH_STARTING_LCLETTERTerminalRuleCall_1_0 = (RuleCall)cAsidAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAsidAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAsidID_WITH_STARTING_LCLETTERTerminalRuleCall_2_1_0 = (RuleCall)cAsidAssignment_2_1.eContents().get(0);
		
		//FileName:
		//	path=PATH? asid+=ID_WITH_STARTING_LCLETTER ('.' asid+=ID_WITH_STARTING_LCLETTER)?;
		@Override public ParserRule getRule() { return rule; }
		
		//path=PATH? asid+=ID_WITH_STARTING_LCLETTER ('.' asid+=ID_WITH_STARTING_LCLETTER)?
		public Group getGroup() { return cGroup; }
		
		//path=PATH?
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }
		
		//PATH
		public RuleCall getPathPATHParserRuleCall_0_0() { return cPathPATHParserRuleCall_0_0; }
		
		//asid+=ID_WITH_STARTING_LCLETTER
		public Assignment getAsidAssignment_1() { return cAsidAssignment_1; }
		
		//ID_WITH_STARTING_LCLETTER
		public RuleCall getAsidID_WITH_STARTING_LCLETTERTerminalRuleCall_1_0() { return cAsidID_WITH_STARTING_LCLETTERTerminalRuleCall_1_0; }
		
		//('.' asid+=ID_WITH_STARTING_LCLETTER)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//asid+=ID_WITH_STARTING_LCLETTER
		public Assignment getAsidAssignment_2_1() { return cAsidAssignment_2_1; }
		
		//ID_WITH_STARTING_LCLETTER
		public RuleCall getAsidID_WITH_STARTING_LCLETTERTerminalRuleCall_2_1_0() { return cAsidID_WITH_STARTING_LCLETTERTerminalRuleCall_2_1_0; }
	}
	public class PATHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.PATH");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PATH:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class EnvironmentLocusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.EnvironmentLocus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnvironmentLocusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvironmentLocusSTRINGTerminalRuleCall_1_0 = (RuleCall)cEnvironmentLocusAssignment_1.eContents().get(0);
		
		//EnvironmentLocus:
		//	'at' environmentLocus=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'at' environmentLocus=STRING
		public Group getGroup() { return cGroup; }
		
		//'at'
		public Keyword getAtKeyword_0() { return cAtKeyword_0; }
		
		//environmentLocus=STRING
		public Assignment getEnvironmentLocusAssignment_1() { return cEnvironmentLocusAssignment_1; }
		
		//STRING
		public RuleCall getEnvironmentLocusSTRINGTerminalRuleCall_1_0() { return cEnvironmentLocusSTRINGTerminalRuleCall_1_0; }
	}
	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_2_1_0 = (RuleCall)cOptionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Options:
		//	'[' options+=Option (',' options+=Option)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' options+=Option (',' options+=Option)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_1_0() { return cOptionsOptionParserRuleCall_1_0; }
		
		//(',' options+=Option)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//options+=Option
		public Assignment getOptionsAssignment_2_1() { return cOptionsAssignment_2_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_2_1_0() { return cOptionsOptionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntBelsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNrcbpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVerboseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOtherOptionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBeliefsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGoalsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMindinspectorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Option:
		//	Events | IntBels | Nrcbp | Verbose | OtherOption | Beliefs | Goals | Mindinspector;
		@Override public ParserRule getRule() { return rule; }
		
		//Events | IntBels | Nrcbp | Verbose | OtherOption | Beliefs | Goals | Mindinspector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Events
		public RuleCall getEventsParserRuleCall_0() { return cEventsParserRuleCall_0; }
		
		//IntBels
		public RuleCall getIntBelsParserRuleCall_1() { return cIntBelsParserRuleCall_1; }
		
		//Nrcbp
		public RuleCall getNrcbpParserRuleCall_2() { return cNrcbpParserRuleCall_2; }
		
		//Verbose
		public RuleCall getVerboseParserRuleCall_3() { return cVerboseParserRuleCall_3; }
		
		//OtherOption
		public RuleCall getOtherOptionParserRuleCall_4() { return cOtherOptionParserRuleCall_4; }
		
		//Beliefs
		public RuleCall getBeliefsParserRuleCall_5() { return cBeliefsParserRuleCall_5; }
		
		//Goals
		public RuleCall getGoalsParserRuleCall_6() { return cGoalsParserRuleCall_6; }
		
		//Mindinspector
		public RuleCall getMindinspectorParserRuleCall_7() { return cMindinspectorParserRuleCall_7; }
	}
	public class EventsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Events");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Action cDiscardEventsAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Keyword cDiscardKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cRequeueEventsAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cRequeueKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Action cRetrieveEventsAction_2_2_0 = (Action)cGroup_2_2.eContents().get(0);
		private final Keyword cRetrieveKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		
		//Events:
		//	'events' '=' ({DiscardEvents} 'discard'
		//	| {RequeueEvents} 'requeue'
		//	| {RetrieveEvents} 'retrieve');
		@Override public ParserRule getRule() { return rule; }
		
		//'events' '=' ({DiscardEvents} 'discard' | {RequeueEvents} 'requeue' | {RetrieveEvents} 'retrieve')
		public Group getGroup() { return cGroup; }
		
		//'events'
		public Keyword getEventsKeyword_0() { return cEventsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//({DiscardEvents} 'discard' | {RequeueEvents} 'requeue' | {RetrieveEvents} 'retrieve')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//{DiscardEvents} 'discard'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//{DiscardEvents}
		public Action getDiscardEventsAction_2_0_0() { return cDiscardEventsAction_2_0_0; }
		
		//'discard'
		public Keyword getDiscardKeyword_2_0_1() { return cDiscardKeyword_2_0_1; }
		
		//{RequeueEvents} 'requeue'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//{RequeueEvents}
		public Action getRequeueEventsAction_2_1_0() { return cRequeueEventsAction_2_1_0; }
		
		//'requeue'
		public Keyword getRequeueKeyword_2_1_1() { return cRequeueKeyword_2_1_1; }
		
		//{RetrieveEvents} 'retrieve'
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//{RetrieveEvents}
		public Action getRetrieveEventsAction_2_2_0() { return cRetrieveEventsAction_2_2_0; }
		
		//'retrieve'
		public Keyword getRetrieveKeyword_2_2_1() { return cRetrieveKeyword_2_2_1; }
	}
	public class IntBelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.IntBels");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntBelsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Action cSameFocusAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Keyword cSameFocusKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cNewFocusAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cNewFocusKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//IntBels:
		//	'intBels' '=' ({SameFocus} 'sameFocus'
		//	| {NewFocus} 'newFocus');
		@Override public ParserRule getRule() { return rule; }
		
		//'intBels' '=' ({SameFocus} 'sameFocus' | {NewFocus} 'newFocus')
		public Group getGroup() { return cGroup; }
		
		//'intBels'
		public Keyword getIntBelsKeyword_0() { return cIntBelsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//({SameFocus} 'sameFocus' | {NewFocus} 'newFocus')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//{SameFocus} 'sameFocus'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//{SameFocus}
		public Action getSameFocusAction_2_0_0() { return cSameFocusAction_2_0_0; }
		
		//'sameFocus'
		public Keyword getSameFocusKeyword_2_0_1() { return cSameFocusKeyword_2_0_1; }
		
		//{NewFocus} 'newFocus'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//{NewFocus}
		public Action getNewFocusAction_2_1_0() { return cNewFocusAction_2_1_0; }
		
		//'newFocus'
		public Keyword getNewFocusKeyword_2_1_1() { return cNewFocusKeyword_2_1_1; }
	}
	public class NrcbpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Nrcbp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNrcbpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValINT_LITERALTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Nrcbp:
		//	'nrcbp' '=' val=INT_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'nrcbp' '=' val=INT_LITERAL
		public Group getGroup() { return cGroup; }
		
		//'nrcbp'
		public Keyword getNrcbpKeyword_0() { return cNrcbpKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=INT_LITERAL
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//INT_LITERAL
		public RuleCall getValINT_LITERALTerminalRuleCall_2_0() { return cValINT_LITERALTerminalRuleCall_2_0; }
	}
	public class VerboseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Verbose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerboseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValINT_LITERALTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Verbose:
		//	'verbose' '=' val=INT_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'verbose' '=' val=INT_LITERAL
		public Group getGroup() { return cGroup; }
		
		//'verbose'
		public Keyword getVerboseKeyword_0() { return cVerboseKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=INT_LITERAL
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//INT_LITERAL
		public RuleCall getValINT_LITERALTerminalRuleCall_2_0() { return cValINT_LITERALTerminalRuleCall_2_0; }
	}
	public class BeliefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Beliefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValSTRINGTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Beliefs:
		//	'beliefs' '=' val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'beliefs' '=' val=STRING
		public Group getGroup() { return cGroup; }
		
		//'beliefs'
		public Keyword getBeliefsKeyword_0() { return cBeliefsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=STRING
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_2_0() { return cValSTRINGTerminalRuleCall_2_0; }
	}
	public class GoalsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Goals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValSTRINGTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Goals:
		//	'goals' '=' val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'goals' '=' val=STRING
		public Group getGroup() { return cGroup; }
		
		//'goals'
		public Keyword getGoalsKeyword_0() { return cGoalsKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=STRING
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_2_0() { return cValSTRINGTerminalRuleCall_2_0; }
	}
	public class MindinspectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Mindinspector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMindinspectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValSTRINGTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Mindinspector:
		//	'mindinspector' '=' val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'mindinspector' '=' val=STRING
		public Group getGroup() { return cGroup; }
		
		//'mindinspector'
		public Keyword getMindinspectorKeyword_0() { return cMindinspectorKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=STRING
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_2_0() { return cValSTRINGTerminalRuleCall_2_0; }
	}
	public class OtherOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.OtherOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOptionNameIDParserRuleCall_0_0 = (RuleCall)cOptionNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValIDParserRuleCall_2_0_0 = (RuleCall)cValAssignment_2_0.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		private final Assignment cInt_valAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cInt_valINT_LITERALTerminalRuleCall_2_2_0 = (RuleCall)cInt_valAssignment_2_2.eContents().get(0);
		
		//OtherOption:
		//	optionName=ID '=' (val=ID | val=STRING | int_val=INT_LITERAL);
		@Override public ParserRule getRule() { return rule; }
		
		//optionName=ID '=' (val=ID | val=STRING | int_val=INT_LITERAL)
		public Group getGroup() { return cGroup; }
		
		//optionName=ID
		public Assignment getOptionNameAssignment_0() { return cOptionNameAssignment_0; }
		
		//ID
		public RuleCall getOptionNameIDParserRuleCall_0_0() { return cOptionNameIDParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(val=ID | val=STRING | int_val=INT_LITERAL)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//val=ID
		public Assignment getValAssignment_2_0() { return cValAssignment_2_0; }
		
		//ID
		public RuleCall getValIDParserRuleCall_2_0_0() { return cValIDParserRuleCall_2_0_0; }
		
		//val=STRING
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_2_1_0() { return cValSTRINGTerminalRuleCall_2_1_0; }
		
		//int_val=INT_LITERAL
		public Assignment getInt_valAssignment_2_2() { return cInt_valAssignment_2_2; }
		
		//INT_LITERAL
		public RuleCall getInt_valINT_LITERALTerminalRuleCall_2_2_0() { return cInt_valINT_LITERALTerminalRuleCall_2_2_0; }
	}
	public class AgentArchClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.AgentArchClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentArchClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentArchClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAgentArchClassClsDefParserRuleCall_1_0 = (RuleCall)cAgentArchClassAssignment_1.eContents().get(0);
		
		//AgentArchClass:
		//	'agentArchClass' agentArchClass=ClsDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'agentArchClass' agentArchClass=ClsDef
		public Group getGroup() { return cGroup; }
		
		//'agentArchClass'
		public Keyword getAgentArchClassKeyword_0() { return cAgentArchClassKeyword_0; }
		
		//agentArchClass=ClsDef
		public Assignment getAgentArchClassAssignment_1() { return cAgentArchClassAssignment_1; }
		
		//ClsDef
		public RuleCall getAgentArchClassClsDefParserRuleCall_1_0() { return cAgentArchClassClsDefParserRuleCall_1_0; }
	}
	public class BeliefBaseClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.BeliefBaseClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefBaseClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBeliefBaseClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBeliefBaseClassClsDefParserRuleCall_1_0 = (RuleCall)cBeliefBaseClassAssignment_1.eContents().get(0);
		
		//BeliefBaseClass:
		//	'beliefBaseClass' beliefBaseClass=ClsDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'beliefBaseClass' beliefBaseClass=ClsDef
		public Group getGroup() { return cGroup; }
		
		//'beliefBaseClass'
		public Keyword getBeliefBaseClassKeyword_0() { return cBeliefBaseClassKeyword_0; }
		
		//beliefBaseClass=ClsDef
		public Assignment getBeliefBaseClassAssignment_1() { return cBeliefBaseClassAssignment_1; }
		
		//ClsDef
		public RuleCall getBeliefBaseClassClsDefParserRuleCall_1_0() { return cBeliefBaseClassClsDefParserRuleCall_1_0; }
	}
	public class AgentClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.AgentClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAgentClassClsDefParserRuleCall_1_0 = (RuleCall)cAgentClassAssignment_1.eContents().get(0);
		
		//AgentClass:
		//	'agentClass' agentClass=ClsDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'agentClass' agentClass=ClsDef
		public Group getGroup() { return cGroup; }
		
		//'agentClass'
		public Keyword getAgentClassKeyword_0() { return cAgentClassKeyword_0; }
		
		//agentClass=ClsDef
		public Assignment getAgentClassAssignment_1() { return cAgentClassAssignment_1; }
		
		//ClsDef
		public RuleCall getAgentClassClsDefParserRuleCall_1_0() { return cAgentClassClsDefParserRuleCall_1_0; }
	}
	public class InstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.Instances");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstancesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstancesINT_LITERALTerminalRuleCall_1_0 = (RuleCall)cInstancesAssignment_1.eContents().get(0);
		
		//Instances:
		//	'#' instances=INT_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' instances=INT_LITERAL
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//instances=INT_LITERAL
		public Assignment getInstancesAssignment_1() { return cInstancesAssignment_1; }
		
		//INT_LITERAL
		public RuleCall getInstancesINT_LITERALTerminalRuleCall_1_0() { return cInstancesINT_LITERALTerminalRuleCall_1_0; }
	}
	public class IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cID_WITH_STARTING_LCLETTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cID_WITH_STARTING_UCLETTERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* General identifier */ ID:
		//	ID_WITH_STARTING_LCLETTER | ID_WITH_STARTING_UCLETTER;
		@Override public ParserRule getRule() { return rule; }
		
		//ID_WITH_STARTING_LCLETTER | ID_WITH_STARTING_UCLETTER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID_WITH_STARTING_LCLETTER
		public RuleCall getID_WITH_STARTING_LCLETTERTerminalRuleCall_0() { return cID_WITH_STARTING_LCLETTERTerminalRuleCall_0; }
		
		//ID_WITH_STARTING_UCLETTER
		public RuleCall getID_WITH_STARTING_UCLETTERTerminalRuleCall_1() { return cID_WITH_STARTING_UCLETTERTerminalRuleCall_1; }
	}
	
	
	private final Mas2jModelElements pMas2jModel;
	private final FQNElements pFQN;
	private final InfrastructureElements pInfrastructure;
	private final EnvironmentElements pEnvironment;
	private final ControlElements pControl;
	private final ClasspathsElements pClasspaths;
	private final ClasspathElements pClasspath;
	private final SourcepathsElements pSourcepaths;
	private final SourcepathElements pSourcepath;
	private final ParameterClsDefElements pParameterClsDef;
	private final LstParametersClsDefElements pLstParametersClsDef;
	private final ClsDefElements pClsDef;
	private final DirectivesElements pDirectives;
	private final DirectiveElements pDirective;
	private final AgentsElements pAgents;
	private final AgentElements pAgent;
	private final FileNameElements pFileName;
	private final PATHElements pPATH;
	private final EnvironmentLocusElements pEnvironmentLocus;
	private final OptionsElements pOptions;
	private final OptionElements pOption;
	private final EventsElements pEvents;
	private final IntBelsElements pIntBels;
	private final NrcbpElements pNrcbp;
	private final VerboseElements pVerbose;
	private final BeliefsElements pBeliefs;
	private final GoalsElements pGoals;
	private final MindinspectorElements pMindinspector;
	private final OtherOptionElements pOtherOption;
	private final AgentArchClassElements pAgentArchClass;
	private final BeliefBaseClassElements pBeliefBaseClass;
	private final AgentClassElements pAgentClass;
	private final InstancesElements pInstances;
	private final IDElements pID;
	private final TerminalRule tID_WITH_STARTING_LCLETTER;
	private final TerminalRule tID_WITH_STARTING_UCLETTER;
	private final TerminalRule tLCLETTER;
	private final TerminalRule tUCLETTER;
	private final TerminalRule tSTRING;
	private final TerminalRule tINT_LITERAL;
	private final TerminalRule tIntegerNumber;
	private final TerminalRule tHexPrefix;
	private final TerminalRule tHexDigit;
	private final TerminalRule tWS;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public Mas2jGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pMas2jModel = new Mas2jModelElements();
		this.pFQN = new FQNElements();
		this.pInfrastructure = new InfrastructureElements();
		this.pEnvironment = new EnvironmentElements();
		this.pControl = new ControlElements();
		this.pClasspaths = new ClasspathsElements();
		this.pClasspath = new ClasspathElements();
		this.pSourcepaths = new SourcepathsElements();
		this.pSourcepath = new SourcepathElements();
		this.pParameterClsDef = new ParameterClsDefElements();
		this.pLstParametersClsDef = new LstParametersClsDefElements();
		this.pClsDef = new ClsDefElements();
		this.pDirectives = new DirectivesElements();
		this.pDirective = new DirectiveElements();
		this.pAgents = new AgentsElements();
		this.pAgent = new AgentElements();
		this.pFileName = new FileNameElements();
		this.pPATH = new PATHElements();
		this.pEnvironmentLocus = new EnvironmentLocusElements();
		this.pOptions = new OptionsElements();
		this.pOption = new OptionElements();
		this.pEvents = new EventsElements();
		this.pIntBels = new IntBelsElements();
		this.pNrcbp = new NrcbpElements();
		this.pVerbose = new VerboseElements();
		this.pBeliefs = new BeliefsElements();
		this.pGoals = new GoalsElements();
		this.pMindinspector = new MindinspectorElements();
		this.pOtherOption = new OtherOptionElements();
		this.pAgentArchClass = new AgentArchClassElements();
		this.pBeliefBaseClass = new BeliefBaseClassElements();
		this.pAgentClass = new AgentClassElements();
		this.pInstances = new InstancesElements();
		this.pID = new IDElements();
		this.tID_WITH_STARTING_LCLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.ID_WITH_STARTING_LCLETTER");
		this.tID_WITH_STARTING_UCLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.ID_WITH_STARTING_UCLETTER");
		this.tLCLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.LCLETTER");
		this.tUCLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.UCLETTER");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.STRING");
		this.tINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.INT_LITERAL");
		this.tIntegerNumber = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.IntegerNumber");
		this.tHexPrefix = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.HexPrefix");
		this.tHexDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.HexDigit");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.WS");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jasonide.xtext.mas2j.Mas2j.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jasonide.xtext.mas2j.Mas2j".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
	//Mas2jModel:
	//	'MAS' name=ID_WITH_STARTING_LCLETTER '{'
	//	infrastructure=Infrastructure?
	//	environment=Environment?
	//	control=Control?
	//	agents=Agents
	//	directives=Directives?
	//	classpath=Classpaths?
	//	sourcepath=Sourcepaths?
	//	'}';
	public Mas2jModelElements getMas2jModelAccess() {
		return pMas2jModel;
	}
	
	public ParserRule getMas2jModelRule() {
		return getMas2jModelAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	///* Infrastructure rules */ Infrastructure:
	//	'infrastructure' ':' infrastructure=ClsDef;
	public InfrastructureElements getInfrastructureAccess() {
		return pInfrastructure;
	}
	
	public ParserRule getInfrastructureRule() {
		return getInfrastructureAccess().getRule();
	}
	
	///* Environment rules */ Environment:
	//	'environment' ':' environment=ClsDef ('at' environmentLocus=STRING)?;
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	///* Control rules */ Control:
	//	'executionControl' ':' control=ClsDef ('at' controlLocus=STRING)?;
	public ControlElements getControlAccess() {
		return pControl;
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}
	
	///* Classpath rules */ Classpaths:
	//	'classpath' ':' classpath+=Classpath+;
	public ClasspathsElements getClasspathsAccess() {
		return pClasspaths;
	}
	
	public ParserRule getClasspathsRule() {
		return getClasspathsAccess().getRule();
	}
	
	//Classpath:
	//	nomeclasspath=STRING ';';
	public ClasspathElements getClasspathAccess() {
		return pClasspath;
	}
	
	public ParserRule getClasspathRule() {
		return getClasspathAccess().getRule();
	}
	
	///* Sourcepath rules */ Sourcepaths:
	//	'aslSourcePath' ':' sourcepath+=Sourcepath+;
	public SourcepathsElements getSourcepathsAccess() {
		return pSourcepaths;
	}
	
	public ParserRule getSourcepathsRule() {
		return getSourcepathsAccess().getRule();
	}
	
	//Sourcepath:
	//	nomesourcepath=STRING ';';
	public SourcepathElements getSourcepathAccess() {
		return pSourcepath;
	}
	
	public ParserRule getSourcepathRule() {
		return getSourcepathAccess().getRule();
	}
	
	///* ClassDef rules */ ParameterClsDef:
	//	ClsDef | LstParametersClsDef | parameterclsint=INT_LITERAL | parameterclsstr=STRING;
	public ParameterClsDefElements getParameterClsDefAccess() {
		return pParameterClsDef;
	}
	
	public ParserRule getParameterClsDefRule() {
		return getParameterClsDefAccess().getRule();
	}
	
	//LstParametersClsDef:
	//	'[' parameter+=ParameterClsDef (',' parameter+=ParameterClsDef)* ']';
	public LstParametersClsDefElements getLstParametersClsDefAccess() {
		return pLstParametersClsDef;
	}
	
	public ParserRule getLstParametersClsDefRule() {
		return getLstParametersClsDefAccess().getRule();
	}
	
	//ClsDef:
	//	infrastructure=FQN ('(' parameter+=ParameterClsDef (',' parameter+=ParameterClsDef)* ')')?;
	public ClsDefElements getClsDefAccess() {
		return pClsDef;
	}
	
	public ParserRule getClsDefRule() {
		return getClsDefAccess().getRule();
	}
	
	///* Directive rules */ Directives:
	//	'directives' ':' directives+=Directive+;
	public DirectivesElements getDirectivesAccess() {
		return pDirectives;
	}
	
	public ParserRule getDirectivesRule() {
		return getDirectivesAccess().getRule();
	}
	
	//Directive:
	//	directive=ID_WITH_STARTING_LCLETTER '=' clsDirective=ClsDef ';';
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	///* Agents rules*/ Agents:
	//	'agents' ':' agents+=Agent+;
	public AgentsElements getAgentsAccess() {
		return pAgents;
	}
	
	public ParserRule getAgentsRule() {
		return getAgentsAccess().getRule();
	}
	
	//Agent:
	//	name=ID_WITH_STARTING_LCLETTER sourceFile=FileName? options=Options? (agentArchClass+=AgentArchClass |
	//	beliefBaseClass+=BeliefBaseClass | agentClass+=AgentClass | instances+=Instances | environment+=EnvironmentLocus)*
	//	';';
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//FileName:
	//	path=PATH? asid+=ID_WITH_STARTING_LCLETTER ('.' asid+=ID_WITH_STARTING_LCLETTER)?;
	public FileNameElements getFileNameAccess() {
		return pFileName;
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}
	
	//PATH:
	//	STRING;
	public PATHElements getPATHAccess() {
		return pPATH;
	}
	
	public ParserRule getPATHRule() {
		return getPATHAccess().getRule();
	}
	
	//EnvironmentLocus:
	//	'at' environmentLocus=STRING;
	public EnvironmentLocusElements getEnvironmentLocusAccess() {
		return pEnvironmentLocus;
	}
	
	public ParserRule getEnvironmentLocusRule() {
		return getEnvironmentLocusAccess().getRule();
	}
	
	//Options:
	//	'[' options+=Option (',' options+=Option)* ']';
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}
	
	//Option:
	//	Events | IntBels | Nrcbp | Verbose | OtherOption | Beliefs | Goals | Mindinspector;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//Events:
	//	'events' '=' ({DiscardEvents} 'discard'
	//	| {RequeueEvents} 'requeue'
	//	| {RetrieveEvents} 'retrieve');
	public EventsElements getEventsAccess() {
		return pEvents;
	}
	
	public ParserRule getEventsRule() {
		return getEventsAccess().getRule();
	}
	
	//IntBels:
	//	'intBels' '=' ({SameFocus} 'sameFocus'
	//	| {NewFocus} 'newFocus');
	public IntBelsElements getIntBelsAccess() {
		return pIntBels;
	}
	
	public ParserRule getIntBelsRule() {
		return getIntBelsAccess().getRule();
	}
	
	//Nrcbp:
	//	'nrcbp' '=' val=INT_LITERAL;
	public NrcbpElements getNrcbpAccess() {
		return pNrcbp;
	}
	
	public ParserRule getNrcbpRule() {
		return getNrcbpAccess().getRule();
	}
	
	//Verbose:
	//	'verbose' '=' val=INT_LITERAL;
	public VerboseElements getVerboseAccess() {
		return pVerbose;
	}
	
	public ParserRule getVerboseRule() {
		return getVerboseAccess().getRule();
	}
	
	//Beliefs:
	//	'beliefs' '=' val=STRING;
	public BeliefsElements getBeliefsAccess() {
		return pBeliefs;
	}
	
	public ParserRule getBeliefsRule() {
		return getBeliefsAccess().getRule();
	}
	
	//Goals:
	//	'goals' '=' val=STRING;
	public GoalsElements getGoalsAccess() {
		return pGoals;
	}
	
	public ParserRule getGoalsRule() {
		return getGoalsAccess().getRule();
	}
	
	//Mindinspector:
	//	'mindinspector' '=' val=STRING;
	public MindinspectorElements getMindinspectorAccess() {
		return pMindinspector;
	}
	
	public ParserRule getMindinspectorRule() {
		return getMindinspectorAccess().getRule();
	}
	
	//OtherOption:
	//	optionName=ID '=' (val=ID | val=STRING | int_val=INT_LITERAL);
	public OtherOptionElements getOtherOptionAccess() {
		return pOtherOption;
	}
	
	public ParserRule getOtherOptionRule() {
		return getOtherOptionAccess().getRule();
	}
	
	//AgentArchClass:
	//	'agentArchClass' agentArchClass=ClsDef;
	public AgentArchClassElements getAgentArchClassAccess() {
		return pAgentArchClass;
	}
	
	public ParserRule getAgentArchClassRule() {
		return getAgentArchClassAccess().getRule();
	}
	
	//BeliefBaseClass:
	//	'beliefBaseClass' beliefBaseClass=ClsDef;
	public BeliefBaseClassElements getBeliefBaseClassAccess() {
		return pBeliefBaseClass;
	}
	
	public ParserRule getBeliefBaseClassRule() {
		return getBeliefBaseClassAccess().getRule();
	}
	
	//AgentClass:
	//	'agentClass' agentClass=ClsDef;
	public AgentClassElements getAgentClassAccess() {
		return pAgentClass;
	}
	
	public ParserRule getAgentClassRule() {
		return getAgentClassAccess().getRule();
	}
	
	//Instances:
	//	'#' instances=INT_LITERAL;
	public InstancesElements getInstancesAccess() {
		return pInstances;
	}
	
	public ParserRule getInstancesRule() {
		return getInstancesAccess().getRule();
	}
	
	///* General identifier */ ID:
	//	ID_WITH_STARTING_LCLETTER | ID_WITH_STARTING_UCLETTER;
	public IDElements getIDAccess() {
		return pID;
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}
	
	//terminal ID_WITH_STARTING_LCLETTER:
	//	'^'? (LCLETTER | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getID_WITH_STARTING_LCLETTERRule() {
		return tID_WITH_STARTING_LCLETTER;
	}
	
	//terminal ID_WITH_STARTING_UCLETTER:
	//	'^'? (UCLETTER | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getID_WITH_STARTING_UCLETTERRule() {
		return tID_WITH_STARTING_UCLETTER;
	}
	
	//terminal fragment LCLETTER:
	//	'a'..'z';
	public TerminalRule getLCLETTERRule() {
		return tLCLETTER;
	}
	
	//terminal fragment UCLETTER:
	//	'A'..'Z';
	public TerminalRule getUCLETTERRule() {
		return tUCLETTER;
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT_LITERAL returns ecore::EInt:
	//	IntegerNumber;
	public TerminalRule getINT_LITERALRule() {
		return tINT_LITERAL;
	}
	
	//terminal fragment IntegerNumber:
	//	'0'
	//	| '1'..'9' '0'..'9'*
	//	| '0' '0'..'7'+
	//	| HexPrefix HexDigit+;
	public TerminalRule getIntegerNumberRule() {
		return tIntegerNumber;
	}
	
	//terminal fragment HexPrefix:
	//	'0x' | '0X';
	public TerminalRule getHexPrefixRule() {
		return tHexPrefix;
	}
	
	//terminal fragment HexDigit:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHexDigitRule() {
		return tHexDigit;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
}
