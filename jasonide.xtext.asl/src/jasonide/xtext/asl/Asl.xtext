grammar jasonide.xtext.asl.Asl hidden(WS, ML_COMMENT, SL_COMMENT)

generate asl "http://www.xtext.jasonide/asl/Asl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Agent:
	(directive+=Directive)*
	(belief+=Belief (directive+=Directive)*)*
	(initial_goal+=Initial_goal (directive+=Directive)*)*
	(plan+=Plan (belief+=Belief)* (directive+=Directive)*)*
;

Directive:
	'{' (tk_begin=TK_BEGIN pred=Pred '}' agent=Agent | pred2=Pred '}')
;

Belief:
	//literal=Literal ( ':-' log_expr=Log_expr )? '.'
	literal=Literal ( ':-' log_expr=Log_expr )? '.'
;

Initial_goal:
	'!' literal=Literal '.'
;

Plan:
	//( tk_label_at=TK_LABEL_AT pred=Pred )? trigger=Trigger ( ':' log_expr=Log_expr )? ( '<-' plan_body=Plan_body )? '.'
	( tk_label_at=TK_LABEL_AT (literal=Literal | list=List) )? trigger=Trigger ( ':' log_expr=Log_expr )? ( '<-' plan_body=Plan_body )? '.'
;

Trigger:
	trigger=TriggerSymbol ( literal=Literal | var=Var )
;

TriggerSymbol:
	( '+' | '-' | '^' ) ( '!' | '?' )?
;

Plan_body: //plan_body	::=	plan_body_term ( ";" )? ( plan_body )?
	plan_body_term=Plan_body_term ( ';' )? ( plan_body=Plan_body )?
;

Plan_body_term: //plan_body_term	::=	plan_body_factor ( <TK_POR> plan_body_term )?
	plan_body_factor=Plan_body_factor ( '|||' plan_body_term=Plan_body_term )?
;


Plan_body_factor: //plan_body_factor	::=	( stmtIF | stmtFOR | stmtWHILE | body_formula ) ( <TK_PAND> plan_body_factor )?
	( stmtIF=StmtIF | stmtFOR=StmtFOR | stmtWHILE=StmtWHILE | body_formula=Body_formula ) ( '|&|' plan_body_factor=Plan_body_factor )?
;
/*
 * stmtIF	::=	<TK_IF> stmtIFCommon
   stmtIFCommon	::=	"(" log_expr ")" rule_plan_term ( ( <TK_ELIF> stmtIFCommon | <TK_ELSE> rule_plan_term ) )?
 */
StmtIF:
	tk_if=TK_IF stmtIFCommon=StmtIFCommon
;

StmtIFCommon:
	'(' log_expr=Log_expr ')' plan_term=Plan_term ( ( tk_elif=TK_ELIF stmtIFCommon=StmtIFCommon | tk_else=TK_ELSE plan_term2=Plan_term ) )? 
;

StmtFOR:
	tk_for=TK_FOR '(' log_expr=Log_expr ')' plan_term=Plan_term
;

StmtWHILE:
	tk_while=TK_WHILE '(' log_expr=Log_expr ')' plan_term=Plan_term
;

Body_formula:
	( '!' | '!!' | '?' | '+' ('+' | '>' | '<')? | ( '-' ( '+' )? ) )? (plan_term=Plan_term | log_expr=Log_expr)
;

Plan_term:{Plan_term}
	'{' ( ( tk_label_at=TK_LABEL_AT pred=Pred )? trigger=Trigger ( ':' log_expr=Log_expr )? ( ( '<-' | ';' ) )? )? ( literal=Literal ':-' log_expr2=Log_expr )? ( plan_body=Plan_body )? '}'
;

Literal: 
	
	//( ( ( ( ( <ATOM> | var ) )? "::" )? ( <TK_NEG> )? ( pred | var ) ) | <TK_TRUE> | <TK_FALSE> )
	
	
	( ( ( ( atom=JASON_ATOM | var=Var )? '::' )? ( tk_neg=TK_NEG )? ( pred=Pred | var2=Var ) ) | tk_true=TK_TRUE | tk_false=TK_FALSE )
	//( ( ( tk_neg=TK_NEG )? pred=Pred ) | tk_true=TK_TRUE | tk_false=TK_FALSE )
;

Pred:
	( atom=JASON_ATOM | tk_begin=TK_BEGIN | tk_end=TK_END ) ( '(' terms=Terms ')' )? ( plan_term+=Plan_term )* ( list=List )?
;

Terms:
	term+=Term (',' term+=Term)* 
;

Term:
	(list=List | plan_term=Plan_term | log_expr=Log_expr)
;

List: {List}
	'[' ( term_in_list+=Term_in_list ( ',' term_in_list+=Term_in_list )* ( '|' ( var=VART | unnamedvar=UNNAMEDVART | list=List ) )? )? ']'
;

Term_in_list:
	( list=List | arithm_expr=Arithm_expr | string=String | plan_term=Plan_term )
;

Log_expr:
	log_expr_trm=Log_expr_trm ( '|' log_expr=Log_expr )?
;

Log_expr_trm:
	log_expr_factor=Log_expr_factor ( '&' log_expr_trm=Log_expr_trm )?
;

Log_expr_factor:
	( tk_not=TK_NOT log_expr_factor=Log_expr_factor | rel_expr=Rel_expr )
;

Rel_expr:
	( arithm_exp=Arithm_expr | string=String ) ( ( relOp=TK_REL_OP ) ( arithm_expr=Arithm_expr | string2=String | list=List | plan_term=Plan_term ) )?
;

TK_REL_OP hidden():
	( '<' | '<=' | '>' | '>=' | '==' | '\\==' | '=' ('.' '.')? )
;

Arithm_expr:
	arithm_expr_trm=Arithm_expr_trm ( ( subadd=TK_SUB_ADD ) arithm_expr=Arithm_expr )?
;

TK_SUB_ADD:
	( '+' | '-' )
;

Arithm_expr_trm:
	arithm_expr_factor=Arithm_expr_factor ( ( muldiv=TK_MUL_DIV | tk_intdiv=TK_INTDIV | tk_intmod=TK_INTMOD ) arithm_expr_trm=Arithm_expr_trm )?
;

TK_MUL_DIV:
	'*' | '/'
;

Arithm_expr_factor:
	arithm_expr_simple=Arithm_expr_simple ( ( exponential=TK_EXPONENTIAL ) arithm_expr_factor=Arithm_expr_factor )?
;

TK_EXPONENTIAL:
	'**'
;

Arithm_expr_simple:
	//( number=Number | unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | '(' log_expr=Log_expr ')' | var=Var | function=Function )
	( number=Number | unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | '(' log_expr=Log_expr ')' | function=Function )
;

TK_UNARY_OP:
	'-'
;

Function:
	literal=Literal
;

Var:
	( var=VART | unnamedvar=UNNAMEDVART ) ( list=List )?
;

String:
	string=STRINGT
;

Number hidden():
	//number+=(NUMBERT)+ '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | (number+=NUMBERT)+ exp+=EXPONENT | (number+=NUMBERT)+ 
	number+=(NUMBERT)+ '.' (decimalPart+=NUMBERT)+ | '.' (decimalPart+=NUMBERT)+ | (number+=NUMBERT)+
;

/* Atom rule */
JASON_ATOM hidden(): JASON_ATOM_HEAD JASON_ATOM_TAIL* | ATOMAPOST;
/* Specific rule for not allowing spaces between the first dot and the following characthers*/
//JASON_ATOM_HEAD hidden(SL_COMMENT, ML_COMMENT): '.'? ATOM;
JASON_ATOM_HEAD: '.'? ATOM;
JASON_ATOM_TAIL: '.' ATOM;

TK_BEGIN: 'begin';
TK_END: 'end';

TK_IF: 'if';
TK_ELSE: 'else';
TK_ELIF: 'elif';
TK_FOR: 'for';
TK_WHILE: 'while';
TK_NOT: 'not';
TK_INTDIV: 'div';
TK_INTMOD: 'mod';

TK_TRUE: 'true';
TK_FALSE: 'false';

terminal TK_LABEL_AT: '@';
terminal TK_NEG: '~';
terminal ATOM: LCLETTER CH*;
terminal ATOMAPOST: "'" ( !("'") )* "'";
//terminal ATOM_INTERNAL_ACTION: '.'? LCLETTER CH* ('.' LCLETTER CH*)*;
terminal VART: UCLETTER CH* ;
terminal UNNAMEDVART: '_' CH*;
terminal STRINGT: '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
//terminal STRINGT: '"' ( '\\' '"' | !('"') )* '"';
	
terminal NUMBERT: '0'..'9';
	
/*terminal NUMBERT
    :   
	    	('0' .. '9')+ '.' ('0' .. '9')+ Exponent?  
	    |   '.' ( '0' .. '9' )+ Exponent?  
	    |   ('0' .. '9')+ Exponent  
	    |   ('0' .. '9')+ 
	;*/

/*terminal EXPONENT
    :   ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ 
    ;*/

terminal fragment CH: (LCLETTER | UCLETTER | DIGIT | '_');
terminal fragment LCLETTER: 'a'..'z';
terminal fragment UCLETTER: 'A'..'Z';
terminal fragment DIGIT: '0'..'9';

terminal WS : (' '|'\t'|'\r'|'\n')+;	
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
