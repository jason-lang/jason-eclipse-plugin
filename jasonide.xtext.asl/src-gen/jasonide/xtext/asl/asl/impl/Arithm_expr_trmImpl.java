/**
 * generated by Xtext 2.23.0
 */
package jasonide.xtext.asl.asl.impl;

import jasonide.xtext.asl.asl.Arithm_expr_factor;
import jasonide.xtext.asl.asl.Arithm_expr_trm;
import jasonide.xtext.asl.asl.AslPackage;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Arithm expr trm</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jasonide.xtext.asl.asl.impl.Arithm_expr_trmImpl#getArithm_expr_factor <em>Arithm expr factor</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.Arithm_expr_trmImpl#getMuldiv <em>Muldiv</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.Arithm_expr_trmImpl#getTk_intdiv <em>Tk intdiv</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.Arithm_expr_trmImpl#getTk_intmod <em>Tk intmod</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.Arithm_expr_trmImpl#getArithm_expr_trm <em>Arithm expr trm</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Arithm_expr_trmImpl extends MinimalEObjectImpl.Container implements Arithm_expr_trm
{
  /**
   * The cached value of the '{@link #getArithm_expr_factor() <em>Arithm expr factor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithm_expr_factor()
   * @generated
   * @ordered
   */
  protected Arithm_expr_factor arithm_expr_factor;

  /**
   * The default value of the '{@link #getMuldiv() <em>Muldiv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMuldiv()
   * @generated
   * @ordered
   */
  protected static final String MULDIV_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMuldiv() <em>Muldiv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMuldiv()
   * @generated
   * @ordered
   */
  protected String muldiv = MULDIV_EDEFAULT;

  /**
   * The default value of the '{@link #getTk_intdiv() <em>Tk intdiv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_intdiv()
   * @generated
   * @ordered
   */
  protected static final String TK_INTDIV_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTk_intdiv() <em>Tk intdiv</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_intdiv()
   * @generated
   * @ordered
   */
  protected String tk_intdiv = TK_INTDIV_EDEFAULT;

  /**
   * The default value of the '{@link #getTk_intmod() <em>Tk intmod</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_intmod()
   * @generated
   * @ordered
   */
  protected static final String TK_INTMOD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTk_intmod() <em>Tk intmod</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_intmod()
   * @generated
   * @ordered
   */
  protected String tk_intmod = TK_INTMOD_EDEFAULT;

  /**
   * The cached value of the '{@link #getArithm_expr_trm() <em>Arithm expr trm</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithm_expr_trm()
   * @generated
   * @ordered
   */
  protected Arithm_expr_trm arithm_expr_trm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Arithm_expr_trmImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AslPackage.Literals.ARITHM_EXPR_TRM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arithm_expr_factor getArithm_expr_factor()
  {
    return arithm_expr_factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArithm_expr_factor(Arithm_expr_factor newArithm_expr_factor, NotificationChain msgs)
  {
    Arithm_expr_factor oldArithm_expr_factor = arithm_expr_factor;
    arithm_expr_factor = newArithm_expr_factor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR, oldArithm_expr_factor, newArithm_expr_factor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArithm_expr_factor(Arithm_expr_factor newArithm_expr_factor)
  {
    if (newArithm_expr_factor != arithm_expr_factor)
    {
      NotificationChain msgs = null;
      if (arithm_expr_factor != null)
        msgs = ((InternalEObject)arithm_expr_factor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR, null, msgs);
      if (newArithm_expr_factor != null)
        msgs = ((InternalEObject)newArithm_expr_factor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR, null, msgs);
      msgs = basicSetArithm_expr_factor(newArithm_expr_factor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR, newArithm_expr_factor, newArithm_expr_factor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMuldiv()
  {
    return muldiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMuldiv(String newMuldiv)
  {
    String oldMuldiv = muldiv;
    muldiv = newMuldiv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.ARITHM_EXPR_TRM__MULDIV, oldMuldiv, muldiv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTk_intdiv()
  {
    return tk_intdiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTk_intdiv(String newTk_intdiv)
  {
    String oldTk_intdiv = tk_intdiv;
    tk_intdiv = newTk_intdiv;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.ARITHM_EXPR_TRM__TK_INTDIV, oldTk_intdiv, tk_intdiv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTk_intmod()
  {
    return tk_intmod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTk_intmod(String newTk_intmod)
  {
    String oldTk_intmod = tk_intmod;
    tk_intmod = newTk_intmod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.ARITHM_EXPR_TRM__TK_INTMOD, oldTk_intmod, tk_intmod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arithm_expr_trm getArithm_expr_trm()
  {
    return arithm_expr_trm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArithm_expr_trm(Arithm_expr_trm newArithm_expr_trm, NotificationChain msgs)
  {
    Arithm_expr_trm oldArithm_expr_trm = arithm_expr_trm;
    arithm_expr_trm = newArithm_expr_trm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM, oldArithm_expr_trm, newArithm_expr_trm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArithm_expr_trm(Arithm_expr_trm newArithm_expr_trm)
  {
    if (newArithm_expr_trm != arithm_expr_trm)
    {
      NotificationChain msgs = null;
      if (arithm_expr_trm != null)
        msgs = ((InternalEObject)arithm_expr_trm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM, null, msgs);
      if (newArithm_expr_trm != null)
        msgs = ((InternalEObject)newArithm_expr_trm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM, null, msgs);
      msgs = basicSetArithm_expr_trm(newArithm_expr_trm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM, newArithm_expr_trm, newArithm_expr_trm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR:
        return basicSetArithm_expr_factor(null, msgs);
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM:
        return basicSetArithm_expr_trm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR:
        return getArithm_expr_factor();
      case AslPackage.ARITHM_EXPR_TRM__MULDIV:
        return getMuldiv();
      case AslPackage.ARITHM_EXPR_TRM__TK_INTDIV:
        return getTk_intdiv();
      case AslPackage.ARITHM_EXPR_TRM__TK_INTMOD:
        return getTk_intmod();
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM:
        return getArithm_expr_trm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR:
        setArithm_expr_factor((Arithm_expr_factor)newValue);
        return;
      case AslPackage.ARITHM_EXPR_TRM__MULDIV:
        setMuldiv((String)newValue);
        return;
      case AslPackage.ARITHM_EXPR_TRM__TK_INTDIV:
        setTk_intdiv((String)newValue);
        return;
      case AslPackage.ARITHM_EXPR_TRM__TK_INTMOD:
        setTk_intmod((String)newValue);
        return;
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM:
        setArithm_expr_trm((Arithm_expr_trm)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR:
        setArithm_expr_factor((Arithm_expr_factor)null);
        return;
      case AslPackage.ARITHM_EXPR_TRM__MULDIV:
        setMuldiv(MULDIV_EDEFAULT);
        return;
      case AslPackage.ARITHM_EXPR_TRM__TK_INTDIV:
        setTk_intdiv(TK_INTDIV_EDEFAULT);
        return;
      case AslPackage.ARITHM_EXPR_TRM__TK_INTMOD:
        setTk_intmod(TK_INTMOD_EDEFAULT);
        return;
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM:
        setArithm_expr_trm((Arithm_expr_trm)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_FACTOR:
        return arithm_expr_factor != null;
      case AslPackage.ARITHM_EXPR_TRM__MULDIV:
        return MULDIV_EDEFAULT == null ? muldiv != null : !MULDIV_EDEFAULT.equals(muldiv);
      case AslPackage.ARITHM_EXPR_TRM__TK_INTDIV:
        return TK_INTDIV_EDEFAULT == null ? tk_intdiv != null : !TK_INTDIV_EDEFAULT.equals(tk_intdiv);
      case AslPackage.ARITHM_EXPR_TRM__TK_INTMOD:
        return TK_INTMOD_EDEFAULT == null ? tk_intmod != null : !TK_INTMOD_EDEFAULT.equals(tk_intmod);
      case AslPackage.ARITHM_EXPR_TRM__ARITHM_EXPR_TRM:
        return arithm_expr_trm != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (muldiv: ");
    result.append(muldiv);
    result.append(", tk_intdiv: ");
    result.append(tk_intdiv);
    result.append(", tk_intmod: ");
    result.append(tk_intmod);
    result.append(')');
    return result.toString();
  }

} //Arithm_expr_trmImpl
