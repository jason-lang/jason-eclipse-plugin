/**
 * generated by Xtext 2.23.0
 */
package jasonide.xtext.asl.asl.impl;

import jasonide.xtext.asl.asl.AslPackage;
import jasonide.xtext.asl.asl.Log_expr;
import jasonide.xtext.asl.asl.Plan_term;
import jasonide.xtext.asl.asl.StmtIFCommon;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Stmt IF Common</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFCommonImpl#getLog_expr <em>Log expr</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFCommonImpl#getPlan_term <em>Plan term</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFCommonImpl#getTk_elif <em>Tk elif</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFCommonImpl#getStmtIFCommon <em>Stmt IF Common</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFCommonImpl#getTk_else <em>Tk else</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFCommonImpl#getPlan_term2 <em>Plan term2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StmtIFCommonImpl extends MinimalEObjectImpl.Container implements StmtIFCommon
{
  /**
   * The cached value of the '{@link #getLog_expr() <em>Log expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLog_expr()
   * @generated
   * @ordered
   */
  protected Log_expr log_expr;

  /**
   * The cached value of the '{@link #getPlan_term() <em>Plan term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlan_term()
   * @generated
   * @ordered
   */
  protected Plan_term plan_term;

  /**
   * The default value of the '{@link #getTk_elif() <em>Tk elif</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_elif()
   * @generated
   * @ordered
   */
  protected static final String TK_ELIF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTk_elif() <em>Tk elif</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_elif()
   * @generated
   * @ordered
   */
  protected String tk_elif = TK_ELIF_EDEFAULT;

  /**
   * The cached value of the '{@link #getStmtIFCommon() <em>Stmt IF Common</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmtIFCommon()
   * @generated
   * @ordered
   */
  protected StmtIFCommon stmtIFCommon;

  /**
   * The default value of the '{@link #getTk_else() <em>Tk else</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_else()
   * @generated
   * @ordered
   */
  protected static final String TK_ELSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTk_else() <em>Tk else</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_else()
   * @generated
   * @ordered
   */
  protected String tk_else = TK_ELSE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPlan_term2() <em>Plan term2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlan_term2()
   * @generated
   * @ordered
   */
  protected Plan_term plan_term2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StmtIFCommonImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AslPackage.Literals.STMT_IF_COMMON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Log_expr getLog_expr()
  {
    return log_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLog_expr(Log_expr newLog_expr, NotificationChain msgs)
  {
    Log_expr oldLog_expr = log_expr;
    log_expr = newLog_expr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__LOG_EXPR, oldLog_expr, newLog_expr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLog_expr(Log_expr newLog_expr)
  {
    if (newLog_expr != log_expr)
    {
      NotificationChain msgs = null;
      if (log_expr != null)
        msgs = ((InternalEObject)log_expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__LOG_EXPR, null, msgs);
      if (newLog_expr != null)
        msgs = ((InternalEObject)newLog_expr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__LOG_EXPR, null, msgs);
      msgs = basicSetLog_expr(newLog_expr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__LOG_EXPR, newLog_expr, newLog_expr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plan_term getPlan_term()
  {
    return plan_term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPlan_term(Plan_term newPlan_term, NotificationChain msgs)
  {
    Plan_term oldPlan_term = plan_term;
    plan_term = newPlan_term;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__PLAN_TERM, oldPlan_term, newPlan_term);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlan_term(Plan_term newPlan_term)
  {
    if (newPlan_term != plan_term)
    {
      NotificationChain msgs = null;
      if (plan_term != null)
        msgs = ((InternalEObject)plan_term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__PLAN_TERM, null, msgs);
      if (newPlan_term != null)
        msgs = ((InternalEObject)newPlan_term).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__PLAN_TERM, null, msgs);
      msgs = basicSetPlan_term(newPlan_term, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__PLAN_TERM, newPlan_term, newPlan_term));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTk_elif()
  {
    return tk_elif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTk_elif(String newTk_elif)
  {
    String oldTk_elif = tk_elif;
    tk_elif = newTk_elif;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__TK_ELIF, oldTk_elif, tk_elif));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StmtIFCommon getStmtIFCommon()
  {
    return stmtIFCommon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmtIFCommon(StmtIFCommon newStmtIFCommon, NotificationChain msgs)
  {
    StmtIFCommon oldStmtIFCommon = stmtIFCommon;
    stmtIFCommon = newStmtIFCommon;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__STMT_IF_COMMON, oldStmtIFCommon, newStmtIFCommon);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStmtIFCommon(StmtIFCommon newStmtIFCommon)
  {
    if (newStmtIFCommon != stmtIFCommon)
    {
      NotificationChain msgs = null;
      if (stmtIFCommon != null)
        msgs = ((InternalEObject)stmtIFCommon).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__STMT_IF_COMMON, null, msgs);
      if (newStmtIFCommon != null)
        msgs = ((InternalEObject)newStmtIFCommon).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__STMT_IF_COMMON, null, msgs);
      msgs = basicSetStmtIFCommon(newStmtIFCommon, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__STMT_IF_COMMON, newStmtIFCommon, newStmtIFCommon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTk_else()
  {
    return tk_else;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTk_else(String newTk_else)
  {
    String oldTk_else = tk_else;
    tk_else = newTk_else;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__TK_ELSE, oldTk_else, tk_else));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plan_term getPlan_term2()
  {
    return plan_term2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPlan_term2(Plan_term newPlan_term2, NotificationChain msgs)
  {
    Plan_term oldPlan_term2 = plan_term2;
    plan_term2 = newPlan_term2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__PLAN_TERM2, oldPlan_term2, newPlan_term2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlan_term2(Plan_term newPlan_term2)
  {
    if (newPlan_term2 != plan_term2)
    {
      NotificationChain msgs = null;
      if (plan_term2 != null)
        msgs = ((InternalEObject)plan_term2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__PLAN_TERM2, null, msgs);
      if (newPlan_term2 != null)
        msgs = ((InternalEObject)newPlan_term2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF_COMMON__PLAN_TERM2, null, msgs);
      msgs = basicSetPlan_term2(newPlan_term2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF_COMMON__PLAN_TERM2, newPlan_term2, newPlan_term2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF_COMMON__LOG_EXPR:
        return basicSetLog_expr(null, msgs);
      case AslPackage.STMT_IF_COMMON__PLAN_TERM:
        return basicSetPlan_term(null, msgs);
      case AslPackage.STMT_IF_COMMON__STMT_IF_COMMON:
        return basicSetStmtIFCommon(null, msgs);
      case AslPackage.STMT_IF_COMMON__PLAN_TERM2:
        return basicSetPlan_term2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF_COMMON__LOG_EXPR:
        return getLog_expr();
      case AslPackage.STMT_IF_COMMON__PLAN_TERM:
        return getPlan_term();
      case AslPackage.STMT_IF_COMMON__TK_ELIF:
        return getTk_elif();
      case AslPackage.STMT_IF_COMMON__STMT_IF_COMMON:
        return getStmtIFCommon();
      case AslPackage.STMT_IF_COMMON__TK_ELSE:
        return getTk_else();
      case AslPackage.STMT_IF_COMMON__PLAN_TERM2:
        return getPlan_term2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF_COMMON__LOG_EXPR:
        setLog_expr((Log_expr)newValue);
        return;
      case AslPackage.STMT_IF_COMMON__PLAN_TERM:
        setPlan_term((Plan_term)newValue);
        return;
      case AslPackage.STMT_IF_COMMON__TK_ELIF:
        setTk_elif((String)newValue);
        return;
      case AslPackage.STMT_IF_COMMON__STMT_IF_COMMON:
        setStmtIFCommon((StmtIFCommon)newValue);
        return;
      case AslPackage.STMT_IF_COMMON__TK_ELSE:
        setTk_else((String)newValue);
        return;
      case AslPackage.STMT_IF_COMMON__PLAN_TERM2:
        setPlan_term2((Plan_term)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF_COMMON__LOG_EXPR:
        setLog_expr((Log_expr)null);
        return;
      case AslPackage.STMT_IF_COMMON__PLAN_TERM:
        setPlan_term((Plan_term)null);
        return;
      case AslPackage.STMT_IF_COMMON__TK_ELIF:
        setTk_elif(TK_ELIF_EDEFAULT);
        return;
      case AslPackage.STMT_IF_COMMON__STMT_IF_COMMON:
        setStmtIFCommon((StmtIFCommon)null);
        return;
      case AslPackage.STMT_IF_COMMON__TK_ELSE:
        setTk_else(TK_ELSE_EDEFAULT);
        return;
      case AslPackage.STMT_IF_COMMON__PLAN_TERM2:
        setPlan_term2((Plan_term)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF_COMMON__LOG_EXPR:
        return log_expr != null;
      case AslPackage.STMT_IF_COMMON__PLAN_TERM:
        return plan_term != null;
      case AslPackage.STMT_IF_COMMON__TK_ELIF:
        return TK_ELIF_EDEFAULT == null ? tk_elif != null : !TK_ELIF_EDEFAULT.equals(tk_elif);
      case AslPackage.STMT_IF_COMMON__STMT_IF_COMMON:
        return stmtIFCommon != null;
      case AslPackage.STMT_IF_COMMON__TK_ELSE:
        return TK_ELSE_EDEFAULT == null ? tk_else != null : !TK_ELSE_EDEFAULT.equals(tk_else);
      case AslPackage.STMT_IF_COMMON__PLAN_TERM2:
        return plan_term2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (tk_elif: ");
    result.append(tk_elif);
    result.append(", tk_else: ");
    result.append(tk_else);
    result.append(')');
    return result.toString();
  }

} //StmtIFCommonImpl
