/**
 * generated by Xtext 2.23.0
 */
package jasonide.xtext.asl.asl.impl;

import jasonide.xtext.asl.asl.AslPackage;
import jasonide.xtext.asl.asl.StmtIF;
import jasonide.xtext.asl.asl.StmtIFCommon;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Stmt IF</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFImpl#getTk_if <em>Tk if</em>}</li>
 *   <li>{@link jasonide.xtext.asl.asl.impl.StmtIFImpl#getStmtIFCommon <em>Stmt IF Common</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StmtIFImpl extends MinimalEObjectImpl.Container implements StmtIF
{
  /**
   * The default value of the '{@link #getTk_if() <em>Tk if</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_if()
   * @generated
   * @ordered
   */
  protected static final String TK_IF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTk_if() <em>Tk if</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTk_if()
   * @generated
   * @ordered
   */
  protected String tk_if = TK_IF_EDEFAULT;

  /**
   * The cached value of the '{@link #getStmtIFCommon() <em>Stmt IF Common</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmtIFCommon()
   * @generated
   * @ordered
   */
  protected StmtIFCommon stmtIFCommon;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StmtIFImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AslPackage.Literals.STMT_IF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTk_if()
  {
    return tk_if;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTk_if(String newTk_if)
  {
    String oldTk_if = tk_if;
    tk_if = newTk_if;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF__TK_IF, oldTk_if, tk_if));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StmtIFCommon getStmtIFCommon()
  {
    return stmtIFCommon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmtIFCommon(StmtIFCommon newStmtIFCommon, NotificationChain msgs)
  {
    StmtIFCommon oldStmtIFCommon = stmtIFCommon;
    stmtIFCommon = newStmtIFCommon;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF__STMT_IF_COMMON, oldStmtIFCommon, newStmtIFCommon);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStmtIFCommon(StmtIFCommon newStmtIFCommon)
  {
    if (newStmtIFCommon != stmtIFCommon)
    {
      NotificationChain msgs = null;
      if (stmtIFCommon != null)
        msgs = ((InternalEObject)stmtIFCommon).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF__STMT_IF_COMMON, null, msgs);
      if (newStmtIFCommon != null)
        msgs = ((InternalEObject)newStmtIFCommon).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AslPackage.STMT_IF__STMT_IF_COMMON, null, msgs);
      msgs = basicSetStmtIFCommon(newStmtIFCommon, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AslPackage.STMT_IF__STMT_IF_COMMON, newStmtIFCommon, newStmtIFCommon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF__STMT_IF_COMMON:
        return basicSetStmtIFCommon(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF__TK_IF:
        return getTk_if();
      case AslPackage.STMT_IF__STMT_IF_COMMON:
        return getStmtIFCommon();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF__TK_IF:
        setTk_if((String)newValue);
        return;
      case AslPackage.STMT_IF__STMT_IF_COMMON:
        setStmtIFCommon((StmtIFCommon)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF__TK_IF:
        setTk_if(TK_IF_EDEFAULT);
        return;
      case AslPackage.STMT_IF__STMT_IF_COMMON:
        setStmtIFCommon((StmtIFCommon)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AslPackage.STMT_IF__TK_IF:
        return TK_IF_EDEFAULT == null ? tk_if != null : !TK_IF_EDEFAULT.equals(tk_if);
      case AslPackage.STMT_IF__STMT_IF_COMMON:
        return stmtIFCommon != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (tk_if: ");
    result.append(tk_if);
    result.append(')');
    return result.toString();
  }

} //StmtIFImpl
