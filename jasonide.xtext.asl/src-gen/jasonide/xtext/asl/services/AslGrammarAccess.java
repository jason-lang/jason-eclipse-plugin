/*
* generated by Xtext
*/
package jasonide.xtext.asl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class AslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectiveDirectiveParserRuleCall_0_0 = (RuleCall)cDirectiveAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cBeliefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBeliefBeliefParserRuleCall_1_0_0 = (RuleCall)cBeliefAssignment_1_0.eContents().get(0);
		private final Assignment cDirectiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirectiveDirectiveParserRuleCall_1_1_0 = (RuleCall)cDirectiveAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInitial_goalAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInitial_goalInitial_goalParserRuleCall_2_0_0 = (RuleCall)cInitial_goalAssignment_2_0.eContents().get(0);
		private final Assignment cDirectiveAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDirectiveDirectiveParserRuleCall_2_1_0 = (RuleCall)cDirectiveAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cPlanAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPlanPlanParserRuleCall_3_0_0 = (RuleCall)cPlanAssignment_3_0.eContents().get(0);
		private final Assignment cBeliefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBeliefBeliefParserRuleCall_3_1_0 = (RuleCall)cBeliefAssignment_3_1.eContents().get(0);
		private final Assignment cDirectiveAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDirectiveDirectiveParserRuleCall_3_2_0 = (RuleCall)cDirectiveAssignment_3_2.eContents().get(0);
		
		//Agent:
		//	directive+=Directive* (belief+=Belief directive+=Directive*)* (initial_goal+=Initial_goal directive+=Directive*)*
		//	(plan+=Plan belief+=Belief* directive+=Directive*)*;
		public ParserRule getRule() { return rule; }

		//directive+=Directive* (belief+=Belief directive+=Directive*)* (initial_goal+=Initial_goal directive+=Directive*)*
		//(plan+=Plan belief+=Belief* directive+=Directive*)*
		public Group getGroup() { return cGroup; }

		//directive+=Directive*
		public Assignment getDirectiveAssignment_0() { return cDirectiveAssignment_0; }

		//Directive
		public RuleCall getDirectiveDirectiveParserRuleCall_0_0() { return cDirectiveDirectiveParserRuleCall_0_0; }

		//(belief+=Belief directive+=Directive*)*
		public Group getGroup_1() { return cGroup_1; }

		//belief+=Belief
		public Assignment getBeliefAssignment_1_0() { return cBeliefAssignment_1_0; }

		//Belief
		public RuleCall getBeliefBeliefParserRuleCall_1_0_0() { return cBeliefBeliefParserRuleCall_1_0_0; }

		//directive+=Directive*
		public Assignment getDirectiveAssignment_1_1() { return cDirectiveAssignment_1_1; }

		//Directive
		public RuleCall getDirectiveDirectiveParserRuleCall_1_1_0() { return cDirectiveDirectiveParserRuleCall_1_1_0; }

		//(initial_goal+=Initial_goal directive+=Directive*)*
		public Group getGroup_2() { return cGroup_2; }

		//initial_goal+=Initial_goal
		public Assignment getInitial_goalAssignment_2_0() { return cInitial_goalAssignment_2_0; }

		//Initial_goal
		public RuleCall getInitial_goalInitial_goalParserRuleCall_2_0_0() { return cInitial_goalInitial_goalParserRuleCall_2_0_0; }

		//directive+=Directive*
		public Assignment getDirectiveAssignment_2_1() { return cDirectiveAssignment_2_1; }

		//Directive
		public RuleCall getDirectiveDirectiveParserRuleCall_2_1_0() { return cDirectiveDirectiveParserRuleCall_2_1_0; }

		//(plan+=Plan belief+=Belief* directive+=Directive*)*
		public Group getGroup_3() { return cGroup_3; }

		//plan+=Plan
		public Assignment getPlanAssignment_3_0() { return cPlanAssignment_3_0; }

		//Plan
		public RuleCall getPlanPlanParserRuleCall_3_0_0() { return cPlanPlanParserRuleCall_3_0_0; }

		//belief+=Belief*
		public Assignment getBeliefAssignment_3_1() { return cBeliefAssignment_3_1; }

		//Belief
		public RuleCall getBeliefBeliefParserRuleCall_3_1_0() { return cBeliefBeliefParserRuleCall_3_1_0; }

		//directive+=Directive*
		public Assignment getDirectiveAssignment_3_2() { return cDirectiveAssignment_3_2; }

		//Directive
		public RuleCall getDirectiveDirectiveParserRuleCall_3_2_0() { return cDirectiveDirectiveParserRuleCall_3_2_0; }
	}

	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Directive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTk_beginAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTk_beginTK_BEGINParserRuleCall_1_0_0_0 = (RuleCall)cTk_beginAssignment_1_0_0.eContents().get(0);
		private final Assignment cPredAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPredPredParserRuleCall_1_0_1_0 = (RuleCall)cPredAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cAgentAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cAgentAgentParserRuleCall_1_0_3_0 = (RuleCall)cAgentAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cPred2Assignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPred2PredParserRuleCall_1_1_0_0 = (RuleCall)cPred2Assignment_1_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//Directive:
		//	"{" (tk_begin=TK_BEGIN pred=Pred "}" agent=Agent | pred2=Pred "}");
		public ParserRule getRule() { return rule; }

		//"{" (tk_begin=TK_BEGIN pred=Pred "}" agent=Agent | pred2=Pred "}")
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//tk_begin=TK_BEGIN pred=Pred "}" agent=Agent | pred2=Pred "}"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//tk_begin=TK_BEGIN pred=Pred "}" agent=Agent
		public Group getGroup_1_0() { return cGroup_1_0; }

		//tk_begin=TK_BEGIN
		public Assignment getTk_beginAssignment_1_0_0() { return cTk_beginAssignment_1_0_0; }

		//TK_BEGIN
		public RuleCall getTk_beginTK_BEGINParserRuleCall_1_0_0_0() { return cTk_beginTK_BEGINParserRuleCall_1_0_0_0; }

		//pred=Pred
		public Assignment getPredAssignment_1_0_1() { return cPredAssignment_1_0_1; }

		//Pred
		public RuleCall getPredPredParserRuleCall_1_0_1_0() { return cPredPredParserRuleCall_1_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_2() { return cRightCurlyBracketKeyword_1_0_2; }

		//agent=Agent
		public Assignment getAgentAssignment_1_0_3() { return cAgentAssignment_1_0_3; }

		//Agent
		public RuleCall getAgentAgentParserRuleCall_1_0_3_0() { return cAgentAgentParserRuleCall_1_0_3_0; }

		//pred2=Pred "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//pred2=Pred
		public Assignment getPred2Assignment_1_1_0() { return cPred2Assignment_1_1_0; }

		//Pred
		public RuleCall getPred2PredParserRuleCall_1_1_0_0() { return cPred2PredParserRuleCall_1_1_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_1() { return cRightCurlyBracketKeyword_1_1_1; }
	}

	public class BeliefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Belief");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLog_exprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLog_exprLog_exprParserRuleCall_1_1_0 = (RuleCall)cLog_exprAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Belief: //literal=Literal ( ':-' log_expr=Log_expr )? '.'
		//	literal=Literal (":-" log_expr=Log_expr)? ".";
		public ParserRule getRule() { return rule; }

		////literal=Literal ( ':-' log_expr=Log_expr )? '.'
		//literal=Literal (":-" log_expr=Log_expr)? "."
		public Group getGroup() { return cGroup; }

		////literal=Literal ( ':-' log_expr=Log_expr )? '.'
		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//(":-" log_expr=Log_expr)?
		public Group getGroup_1() { return cGroup_1; }

		//":-"
		public Keyword getColonHyphenMinusKeyword_1_0() { return cColonHyphenMinusKeyword_1_0; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_1_1() { return cLog_exprAssignment_1_1; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_1_1_0() { return cLog_exprLog_exprParserRuleCall_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class Initial_goalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initial_goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Initial_goal:
		//	"!" literal=Literal ".";
		public ParserRule getRule() { return rule; }

		//"!" literal=Literal "."
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0() { return cLiteralLiteralParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class PlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTk_label_atAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTk_label_atTK_LABEL_ATTerminalRuleCall_0_0_0 = (RuleCall)cTk_label_atAssignment_0_0.eContents().get(0);
		private final Assignment cPredAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPredPredParserRuleCall_0_1_0 = (RuleCall)cPredAssignment_0_1.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerTriggerParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLog_exprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLog_exprLog_exprParserRuleCall_2_1_0 = (RuleCall)cLog_exprAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPlan_bodyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPlan_bodyPlan_bodyParserRuleCall_3_1_0 = (RuleCall)cPlan_bodyAssignment_3_1.eContents().get(0);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Plan:
		//	(tk_label_at=TK_LABEL_AT pred=Pred)? trigger=Trigger (":" log_expr=Log_expr)? ("<-" plan_body=Plan_body)? ".";
		public ParserRule getRule() { return rule; }

		//(tk_label_at=TK_LABEL_AT pred=Pred)? trigger=Trigger (":" log_expr=Log_expr)? ("<-" plan_body=Plan_body)? "."
		public Group getGroup() { return cGroup; }

		//(tk_label_at=TK_LABEL_AT pred=Pred)?
		public Group getGroup_0() { return cGroup_0; }

		//tk_label_at=TK_LABEL_AT
		public Assignment getTk_label_atAssignment_0_0() { return cTk_label_atAssignment_0_0; }

		//TK_LABEL_AT
		public RuleCall getTk_label_atTK_LABEL_ATTerminalRuleCall_0_0_0() { return cTk_label_atTK_LABEL_ATTerminalRuleCall_0_0_0; }

		//pred=Pred
		public Assignment getPredAssignment_0_1() { return cPredAssignment_0_1; }

		//Pred
		public RuleCall getPredPredParserRuleCall_0_1_0() { return cPredPredParserRuleCall_0_1_0; }

		//trigger=Trigger
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_1_0() { return cTriggerTriggerParserRuleCall_1_0; }

		//(":" log_expr=Log_expr)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_2_1() { return cLog_exprAssignment_2_1; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_2_1_0() { return cLog_exprLog_exprParserRuleCall_2_1_0; }

		//("<-" plan_body=Plan_body)?
		public Group getGroup_3() { return cGroup_3; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_3_0() { return cLessThanSignHyphenMinusKeyword_3_0; }

		//plan_body=Plan_body
		public Assignment getPlan_bodyAssignment_3_1() { return cPlan_bodyAssignment_3_1; }

		//Plan_body
		public RuleCall getPlan_bodyPlan_bodyParserRuleCall_3_1_0() { return cPlan_bodyPlan_bodyParserRuleCall_3_1_0; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerTriggerSymbolParserRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0_0 = (RuleCall)cLiteralAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_1_1_0 = (RuleCall)cVarAssignment_1_1.eContents().get(0);
		
		//Trigger:
		//	trigger=TriggerSymbol (literal=Literal | var=Var);
		public ParserRule getRule() { return rule; }

		//trigger=TriggerSymbol (literal=Literal | var=Var)
		public Group getGroup() { return cGroup; }

		//trigger=TriggerSymbol
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }

		//TriggerSymbol
		public RuleCall getTriggerTriggerSymbolParserRuleCall_0_0() { return cTriggerTriggerSymbolParserRuleCall_0_0; }

		//literal=Literal | var=Var
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//literal=Literal
		public Assignment getLiteralAssignment_1_0() { return cLiteralAssignment_1_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0_0() { return cLiteralLiteralParserRuleCall_1_0_0; }

		//var=Var
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_1_0() { return cVarVarParserRuleCall_1_1_0; }
	}

	public class TriggerSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerSymbol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//TriggerSymbol:
		//	("+" | "-" | "^") ("!" | "?")?;
		public ParserRule getRule() { return rule; }

		//("+" | "-" | "^") ("!" | "?")?
		public Group getGroup() { return cGroup; }

		//"+" | "-" | "^"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_0_2() { return cCircumflexAccentKeyword_0_2; }

		//("!" | "?")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class Plan_bodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan_body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlan_body_termAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlan_body_termPlan_body_termParserRuleCall_0_0 = (RuleCall)cPlan_body_termAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlan_bodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlan_bodyPlan_bodyParserRuleCall_2_0 = (RuleCall)cPlan_bodyAssignment_2.eContents().get(0);
		
		////plan_body	::=	plan_body_term ( ";" )? ( plan_body )?
		//Plan_body:
		//	plan_body_term=Plan_body_term ";"? plan_body=Plan_body?;
		public ParserRule getRule() { return rule; }

		//plan_body_term=Plan_body_term ";"? plan_body=Plan_body?
		public Group getGroup() { return cGroup; }

		//plan_body_term=Plan_body_term
		public Assignment getPlan_body_termAssignment_0() { return cPlan_body_termAssignment_0; }

		//Plan_body_term
		public RuleCall getPlan_body_termPlan_body_termParserRuleCall_0_0() { return cPlan_body_termPlan_body_termParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//plan_body=Plan_body?
		public Assignment getPlan_bodyAssignment_2() { return cPlan_bodyAssignment_2; }

		//Plan_body
		public RuleCall getPlan_bodyPlan_bodyParserRuleCall_2_0() { return cPlan_bodyPlan_bodyParserRuleCall_2_0; }
	}

	public class Plan_body_termElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan_body_term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlan_body_factorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPlan_body_factorPlan_body_factorParserRuleCall_0_0 = (RuleCall)cPlan_body_factorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPlan_body_termAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPlan_body_termPlan_body_termParserRuleCall_1_1_0 = (RuleCall)cPlan_body_termAssignment_1_1.eContents().get(0);
		
		////plan_body_term	::=	plan_body_factor ( <TK_POR> plan_body_term )?
		//Plan_body_term:
		//	plan_body_factor=Plan_body_factor ("|||" plan_body_term=Plan_body_term)?;
		public ParserRule getRule() { return rule; }

		//plan_body_factor=Plan_body_factor ("|||" plan_body_term=Plan_body_term)?
		public Group getGroup() { return cGroup; }

		//plan_body_factor=Plan_body_factor
		public Assignment getPlan_body_factorAssignment_0() { return cPlan_body_factorAssignment_0; }

		//Plan_body_factor
		public RuleCall getPlan_body_factorPlan_body_factorParserRuleCall_0_0() { return cPlan_body_factorPlan_body_factorParserRuleCall_0_0; }

		//("|||" plan_body_term=Plan_body_term)?
		public Group getGroup_1() { return cGroup_1; }

		//"|||"
		public Keyword getVerticalLineVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineVerticalLineKeyword_1_0; }

		//plan_body_term=Plan_body_term
		public Assignment getPlan_body_termAssignment_1_1() { return cPlan_body_termAssignment_1_1; }

		//Plan_body_term
		public RuleCall getPlan_body_termPlan_body_termParserRuleCall_1_1_0() { return cPlan_body_termPlan_body_termParserRuleCall_1_1_0; }
	}

	public class Plan_body_factorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan_body_factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cStmtIFAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cStmtIFStmtIFParserRuleCall_0_0_0 = (RuleCall)cStmtIFAssignment_0_0.eContents().get(0);
		private final Assignment cStmtFORAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cStmtFORStmtFORParserRuleCall_0_1_0 = (RuleCall)cStmtFORAssignment_0_1.eContents().get(0);
		private final Assignment cStmtWHILEAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cStmtWHILEStmtWHILEParserRuleCall_0_2_0 = (RuleCall)cStmtWHILEAssignment_0_2.eContents().get(0);
		private final Assignment cBody_formulaAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cBody_formulaBody_formulaParserRuleCall_0_3_0 = (RuleCall)cBody_formulaAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineAmpersandVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPlan_body_factorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPlan_body_factorPlan_body_factorParserRuleCall_1_1_0 = (RuleCall)cPlan_body_factorAssignment_1_1.eContents().get(0);
		
		////plan_body_factor	::=	( stmtIF | stmtFOR | stmtWHILE | body_formula ) ( <TK_PAND> plan_body_factor )?
		//Plan_body_factor:
		//	(stmtIF=StmtIF | stmtFOR=StmtFOR | stmtWHILE=StmtWHILE | body_formula=Body_formula) ("|&|"
		//	plan_body_factor=Plan_body_factor)?;
		public ParserRule getRule() { return rule; }

		//(stmtIF=StmtIF | stmtFOR=StmtFOR | stmtWHILE=StmtWHILE | body_formula=Body_formula) ("|&|"
		//plan_body_factor=Plan_body_factor)?
		public Group getGroup() { return cGroup; }

		//stmtIF=StmtIF | stmtFOR=StmtFOR | stmtWHILE=StmtWHILE | body_formula=Body_formula
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//stmtIF=StmtIF
		public Assignment getStmtIFAssignment_0_0() { return cStmtIFAssignment_0_0; }

		//StmtIF
		public RuleCall getStmtIFStmtIFParserRuleCall_0_0_0() { return cStmtIFStmtIFParserRuleCall_0_0_0; }

		//stmtFOR=StmtFOR
		public Assignment getStmtFORAssignment_0_1() { return cStmtFORAssignment_0_1; }

		//StmtFOR
		public RuleCall getStmtFORStmtFORParserRuleCall_0_1_0() { return cStmtFORStmtFORParserRuleCall_0_1_0; }

		//stmtWHILE=StmtWHILE
		public Assignment getStmtWHILEAssignment_0_2() { return cStmtWHILEAssignment_0_2; }

		//StmtWHILE
		public RuleCall getStmtWHILEStmtWHILEParserRuleCall_0_2_0() { return cStmtWHILEStmtWHILEParserRuleCall_0_2_0; }

		//body_formula=Body_formula
		public Assignment getBody_formulaAssignment_0_3() { return cBody_formulaAssignment_0_3; }

		//Body_formula
		public RuleCall getBody_formulaBody_formulaParserRuleCall_0_3_0() { return cBody_formulaBody_formulaParserRuleCall_0_3_0; }

		//("|&|" plan_body_factor=Plan_body_factor)?
		public Group getGroup_1() { return cGroup_1; }

		//"|&|"
		public Keyword getVerticalLineAmpersandVerticalLineKeyword_1_0() { return cVerticalLineAmpersandVerticalLineKeyword_1_0; }

		//plan_body_factor=Plan_body_factor
		public Assignment getPlan_body_factorAssignment_1_1() { return cPlan_body_factorAssignment_1_1; }

		//Plan_body_factor
		public RuleCall getPlan_body_factorPlan_body_factorParserRuleCall_1_1_0() { return cPlan_body_factorPlan_body_factorParserRuleCall_1_1_0; }
	}

	public class StmtIFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtIF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTk_ifAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTk_ifTK_IFParserRuleCall_0_0 = (RuleCall)cTk_ifAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLog_exprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLog_exprLog_exprParserRuleCall_2_0 = (RuleCall)cLog_exprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPlan_termAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPlan_termPlan_termParserRuleCall_4_0 = (RuleCall)cPlan_termAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTk_elseAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTk_elseTK_ELSEParserRuleCall_5_0_0 = (RuleCall)cTk_elseAssignment_5_0.eContents().get(0);
		private final Assignment cPlan_term2Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPlan_term2Plan_termParserRuleCall_5_1_0 = (RuleCall)cPlan_term2Assignment_5_1.eContents().get(0);
		
		//StmtIF:
		//	tk_if=TK_IF "(" log_expr=Log_expr ")" plan_term=Plan_term (tk_else=TK_ELSE? plan_term2=Plan_term)?;
		public ParserRule getRule() { return rule; }

		//tk_if=TK_IF "(" log_expr=Log_expr ")" plan_term=Plan_term (tk_else=TK_ELSE? plan_term2=Plan_term)?
		public Group getGroup() { return cGroup; }

		//tk_if=TK_IF
		public Assignment getTk_ifAssignment_0() { return cTk_ifAssignment_0; }

		//TK_IF
		public RuleCall getTk_ifTK_IFParserRuleCall_0_0() { return cTk_ifTK_IFParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_2() { return cLog_exprAssignment_2; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_2_0() { return cLog_exprLog_exprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//plan_term=Plan_term
		public Assignment getPlan_termAssignment_4() { return cPlan_termAssignment_4; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_4_0() { return cPlan_termPlan_termParserRuleCall_4_0; }

		//(tk_else=TK_ELSE? plan_term2=Plan_term)?
		public Group getGroup_5() { return cGroup_5; }

		//tk_else=TK_ELSE?
		public Assignment getTk_elseAssignment_5_0() { return cTk_elseAssignment_5_0; }

		//TK_ELSE
		public RuleCall getTk_elseTK_ELSEParserRuleCall_5_0_0() { return cTk_elseTK_ELSEParserRuleCall_5_0_0; }

		//plan_term2=Plan_term
		public Assignment getPlan_term2Assignment_5_1() { return cPlan_term2Assignment_5_1; }

		//Plan_term
		public RuleCall getPlan_term2Plan_termParserRuleCall_5_1_0() { return cPlan_term2Plan_termParserRuleCall_5_1_0; }
	}

	public class StmtFORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtFOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTk_forAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTk_forTK_FORParserRuleCall_0_0 = (RuleCall)cTk_forAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLog_exprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLog_exprLog_exprParserRuleCall_2_0 = (RuleCall)cLog_exprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPlan_termAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPlan_termPlan_termParserRuleCall_4_0 = (RuleCall)cPlan_termAssignment_4.eContents().get(0);
		
		//StmtFOR:
		//	tk_for=TK_FOR "(" log_expr=Log_expr ")" plan_term=Plan_term;
		public ParserRule getRule() { return rule; }

		//tk_for=TK_FOR "(" log_expr=Log_expr ")" plan_term=Plan_term
		public Group getGroup() { return cGroup; }

		//tk_for=TK_FOR
		public Assignment getTk_forAssignment_0() { return cTk_forAssignment_0; }

		//TK_FOR
		public RuleCall getTk_forTK_FORParserRuleCall_0_0() { return cTk_forTK_FORParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_2() { return cLog_exprAssignment_2; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_2_0() { return cLog_exprLog_exprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//plan_term=Plan_term
		public Assignment getPlan_termAssignment_4() { return cPlan_termAssignment_4; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_4_0() { return cPlan_termPlan_termParserRuleCall_4_0; }
	}

	public class StmtWHILEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtWHILE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTk_whileAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTk_whileTK_WHILEParserRuleCall_0_0 = (RuleCall)cTk_whileAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLog_exprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLog_exprLog_exprParserRuleCall_2_0 = (RuleCall)cLog_exprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPlan_termAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPlan_termPlan_termParserRuleCall_4_0 = (RuleCall)cPlan_termAssignment_4.eContents().get(0);
		
		//StmtWHILE:
		//	tk_while=TK_WHILE "(" log_expr=Log_expr ")" plan_term=Plan_term;
		public ParserRule getRule() { return rule; }

		//tk_while=TK_WHILE "(" log_expr=Log_expr ")" plan_term=Plan_term
		public Group getGroup() { return cGroup; }

		//tk_while=TK_WHILE
		public Assignment getTk_whileAssignment_0() { return cTk_whileAssignment_0; }

		//TK_WHILE
		public RuleCall getTk_whileTK_WHILEParserRuleCall_0_0() { return cTk_whileTK_WHILEParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_2() { return cLog_exprAssignment_2; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_2_0() { return cLog_exprLog_exprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//plan_term=Plan_term
		public Assignment getPlan_termAssignment_4() { return cPlan_termAssignment_4; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_4_0() { return cPlan_termPlan_termParserRuleCall_4_0; }
	}

	public class Body_formulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body_formula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cExclamationMarkExclamationMarkKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Keyword cPlusSignKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_3_1 = (Alternatives)cGroup_0_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_0_3_1_0 = (Keyword)cAlternatives_0_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_3_1_1 = (Keyword)cAlternatives_0_3_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_3_1_2 = (Keyword)cAlternatives_0_3_1.eContents().get(2);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPlan_termAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPlan_termPlan_termParserRuleCall_1_0_0 = (RuleCall)cPlan_termAssignment_1_0.eContents().get(0);
		private final Assignment cLog_exprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cLog_exprLog_exprParserRuleCall_1_1_0 = (RuleCall)cLog_exprAssignment_1_1.eContents().get(0);
		
		//Body_formula:
		//	("!" | "!!" | "?" | "+" ("+" | ">" | "<")? | "-" "+"?)? (plan_term=Plan_term | log_expr=Log_expr);
		public ParserRule getRule() { return rule; }

		//("!" | "!!" | "?" | "+" ("+" | ">" | "<")? | "-" "+"?)? (plan_term=Plan_term | log_expr=Log_expr)
		public Group getGroup() { return cGroup; }

		//("!" | "!!" | "?" | "+" ("+" | ">" | "<")? | "-" "+"?)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//"!!"
		public Keyword getExclamationMarkExclamationMarkKeyword_0_1() { return cExclamationMarkExclamationMarkKeyword_0_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_0_2() { return cQuestionMarkKeyword_0_2; }

		//"+" ("+" | ">" | "<")?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"+"
		public Keyword getPlusSignKeyword_0_3_0() { return cPlusSignKeyword_0_3_0; }

		//("+" | ">" | "<")?
		public Alternatives getAlternatives_0_3_1() { return cAlternatives_0_3_1; }

		//"+"
		public Keyword getPlusSignKeyword_0_3_1_0() { return cPlusSignKeyword_0_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_3_1_1() { return cGreaterThanSignKeyword_0_3_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_0_3_1_2() { return cLessThanSignKeyword_0_3_1_2; }

		//"-" "+"?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_4_0() { return cHyphenMinusKeyword_0_4_0; }

		//"+"?
		public Keyword getPlusSignKeyword_0_4_1() { return cPlusSignKeyword_0_4_1; }

		//plan_term=Plan_term | log_expr=Log_expr
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//plan_term=Plan_term
		public Assignment getPlan_termAssignment_1_0() { return cPlan_termAssignment_1_0; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_1_0_0() { return cPlan_termPlan_termParserRuleCall_1_0_0; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_1_1() { return cLog_exprAssignment_1_1; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_1_1_0() { return cLog_exprLog_exprParserRuleCall_1_1_0; }
	}

	public class Plan_termElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plan_term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlan_termAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cTk_label_atAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cTk_label_atTK_LABEL_ATTerminalRuleCall_2_0_0_0 = (RuleCall)cTk_label_atAssignment_2_0_0.eContents().get(0);
		private final Assignment cPredAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPredPredParserRuleCall_2_0_1_0 = (RuleCall)cPredAssignment_2_0_1.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerTriggerParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cLog_exprAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cLog_exprLog_exprParserRuleCall_2_2_1_0 = (RuleCall)cLog_exprAssignment_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Keyword cLessThanSignHyphenMinusKeyword_2_3_0 = (Keyword)cAlternatives_2_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3_1 = (Keyword)cAlternatives_2_3.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralAssignment_3_0.eContents().get(0);
		private final Keyword cColonHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLog_expr2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLog_expr2Log_exprParserRuleCall_3_2_0 = (RuleCall)cLog_expr2Assignment_3_2.eContents().get(0);
		private final Assignment cPlan_bodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPlan_bodyPlan_bodyParserRuleCall_4_0 = (RuleCall)cPlan_bodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Plan_term:
		//	{Plan_term} "{" ((tk_label_at=TK_LABEL_AT pred=Pred)? trigger=Trigger (":" log_expr=Log_expr)? ("<-" | ";")?)?
		//	(literal=Literal ":-" log_expr2=Log_expr)? plan_body=Plan_body? "}";
		public ParserRule getRule() { return rule; }

		//{Plan_term} "{" ((tk_label_at=TK_LABEL_AT pred=Pred)? trigger=Trigger (":" log_expr=Log_expr)? ("<-" | ";")?)?
		//(literal=Literal ":-" log_expr2=Log_expr)? plan_body=Plan_body? "}"
		public Group getGroup() { return cGroup; }

		//{Plan_term}
		public Action getPlan_termAction_0() { return cPlan_termAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//((tk_label_at=TK_LABEL_AT pred=Pred)? trigger=Trigger (":" log_expr=Log_expr)? ("<-" | ";")?)?
		public Group getGroup_2() { return cGroup_2; }

		//(tk_label_at=TK_LABEL_AT pred=Pred)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//tk_label_at=TK_LABEL_AT
		public Assignment getTk_label_atAssignment_2_0_0() { return cTk_label_atAssignment_2_0_0; }

		//TK_LABEL_AT
		public RuleCall getTk_label_atTK_LABEL_ATTerminalRuleCall_2_0_0_0() { return cTk_label_atTK_LABEL_ATTerminalRuleCall_2_0_0_0; }

		//pred=Pred
		public Assignment getPredAssignment_2_0_1() { return cPredAssignment_2_0_1; }

		//Pred
		public RuleCall getPredPredParserRuleCall_2_0_1_0() { return cPredPredParserRuleCall_2_0_1_0; }

		//trigger=Trigger
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_2_1_0() { return cTriggerTriggerParserRuleCall_2_1_0; }

		//(":" log_expr=Log_expr)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//":"
		public Keyword getColonKeyword_2_2_0() { return cColonKeyword_2_2_0; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_2_2_1() { return cLog_exprAssignment_2_2_1; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_2_2_1_0() { return cLog_exprLog_exprParserRuleCall_2_2_1_0; }

		//("<-" | ";")?
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2_3_0() { return cLessThanSignHyphenMinusKeyword_2_3_0; }

		//";"
		public Keyword getSemicolonKeyword_2_3_1() { return cSemicolonKeyword_2_3_1; }

		//(literal=Literal ":-" log_expr2=Log_expr)?
		public Group getGroup_3() { return cGroup_3; }

		//literal=Literal
		public Assignment getLiteralAssignment_3_0() { return cLiteralAssignment_3_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_3_0_0() { return cLiteralLiteralParserRuleCall_3_0_0; }

		//":-"
		public Keyword getColonHyphenMinusKeyword_3_1() { return cColonHyphenMinusKeyword_3_1; }

		//log_expr2=Log_expr
		public Assignment getLog_expr2Assignment_3_2() { return cLog_expr2Assignment_3_2; }

		//Log_expr
		public RuleCall getLog_expr2Log_exprParserRuleCall_3_2_0() { return cLog_expr2Log_exprParserRuleCall_3_2_0; }

		//plan_body=Plan_body?
		public Assignment getPlan_bodyAssignment_4() { return cPlan_bodyAssignment_4; }

		//Plan_body
		public RuleCall getPlan_bodyPlan_bodyParserRuleCall_4_0() { return cPlan_bodyPlan_bodyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0 = (Alternatives)cGroup_0_0.eContents().get(0);
		private final Assignment cAtomAssignment_0_0_0_0 = (Assignment)cAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cAtomJASON_ATOMParserRuleCall_0_0_0_0_0 = (RuleCall)cAtomAssignment_0_0_0_0.eContents().get(0);
		private final Assignment cVarAssignment_0_0_0_1 = (Assignment)cAlternatives_0_0_0.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_0_0_0_1_0 = (RuleCall)cVarAssignment_0_0_0_1.eContents().get(0);
		private final Keyword cColonColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cTk_negAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTk_negTK_NEGTerminalRuleCall_0_1_0 = (RuleCall)cTk_negAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cPredAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cPredPredParserRuleCall_0_2_0_0 = (RuleCall)cPredAssignment_0_2_0.eContents().get(0);
		private final Assignment cVar2Assignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cVar2VarParserRuleCall_0_2_1_0 = (RuleCall)cVar2Assignment_0_2_1.eContents().get(0);
		private final Assignment cTk_trueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTk_trueTK_TRUEParserRuleCall_1_0 = (RuleCall)cTk_trueAssignment_1.eContents().get(0);
		private final Assignment cTk_falseAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTk_falseTK_FALSEParserRuleCall_2_0 = (RuleCall)cTk_falseAssignment_2.eContents().get(0);
		
		////( ( ( tk_neg=TK_NEG )? pred=Pred ) | tk_true=TK_TRUE | tk_false=TK_FALSE )
		//Literal:
		//	((atom=JASON_ATOM | var=Var)? "::")? tk_neg=TK_NEG? (pred=Pred | var2=Var) //( ( ( ( ( <ATOM> | var ) )? "::" )? ( <TK_NEG> )? ( pred | var ) ) | <TK_TRUE> | <TK_FALSE> )
		//	| tk_true=TK_TRUE | tk_false=TK_FALSE;
		public ParserRule getRule() { return rule; }

		//((atom=JASON_ATOM | var=Var)? "::")? tk_neg=TK_NEG? (pred=Pred | var2=Var) //( ( ( ( ( <ATOM> | var ) )? "::" )? ( <TK_NEG> )? ( pred | var ) ) | <TK_TRUE> | <TK_FALSE> )
		//| tk_true=TK_TRUE | tk_false=TK_FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//((atom=JASON_ATOM | var=Var)? "::")? tk_neg=TK_NEG? (pred=Pred | var2=Var)
		public Group getGroup_0() { return cGroup_0; }

		//((atom=JASON_ATOM | var=Var)? "::")?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//(atom=JASON_ATOM | var=Var)?
		public Alternatives getAlternatives_0_0_0() { return cAlternatives_0_0_0; }

		//atom=JASON_ATOM
		public Assignment getAtomAssignment_0_0_0_0() { return cAtomAssignment_0_0_0_0; }

		//JASON_ATOM
		public RuleCall getAtomJASON_ATOMParserRuleCall_0_0_0_0_0() { return cAtomJASON_ATOMParserRuleCall_0_0_0_0_0; }

		//var=Var
		public Assignment getVarAssignment_0_0_0_1() { return cVarAssignment_0_0_0_1; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_0_0_1_0() { return cVarVarParserRuleCall_0_0_0_1_0; }

		//"::"
		public Keyword getColonColonKeyword_0_0_1() { return cColonColonKeyword_0_0_1; }

		//tk_neg=TK_NEG?
		public Assignment getTk_negAssignment_0_1() { return cTk_negAssignment_0_1; }

		//TK_NEG
		public RuleCall getTk_negTK_NEGTerminalRuleCall_0_1_0() { return cTk_negTK_NEGTerminalRuleCall_0_1_0; }

		//pred=Pred | var2=Var
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//pred=Pred
		public Assignment getPredAssignment_0_2_0() { return cPredAssignment_0_2_0; }

		//Pred
		public RuleCall getPredPredParserRuleCall_0_2_0_0() { return cPredPredParserRuleCall_0_2_0_0; }

		//var2=Var
		public Assignment getVar2Assignment_0_2_1() { return cVar2Assignment_0_2_1; }

		//Var
		public RuleCall getVar2VarParserRuleCall_0_2_1_0() { return cVar2VarParserRuleCall_0_2_1_0; }

		//tk_true=TK_TRUE
		public Assignment getTk_trueAssignment_1() { return cTk_trueAssignment_1; }

		//TK_TRUE
		public RuleCall getTk_trueTK_TRUEParserRuleCall_1_0() { return cTk_trueTK_TRUEParserRuleCall_1_0; }

		//tk_false=TK_FALSE
		public Assignment getTk_falseAssignment_2() { return cTk_falseAssignment_2; }

		//TK_FALSE
		public RuleCall getTk_falseTK_FALSEParserRuleCall_2_0() { return cTk_falseTK_FALSEParserRuleCall_2_0; }
	}

	public class PredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAtomAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cAtomJASON_ATOMParserRuleCall_0_0_0 = (RuleCall)cAtomAssignment_0_0.eContents().get(0);
		private final Assignment cTk_beginAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTk_beginTK_BEGINParserRuleCall_0_1_0 = (RuleCall)cTk_beginAssignment_0_1.eContents().get(0);
		private final Assignment cTk_endAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cTk_endTK_ENDParserRuleCall_0_2_0 = (RuleCall)cTk_endAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermsTermsParserRuleCall_1_1_0 = (RuleCall)cTermsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPlan_termAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlan_termPlan_termParserRuleCall_2_0 = (RuleCall)cPlan_termAssignment_2.eContents().get(0);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListListParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		
		//Pred:
		//	(atom=JASON_ATOM | tk_begin=TK_BEGIN | tk_end=TK_END) ("(" terms=Terms ")")? plan_term+=Plan_term* list=List?;
		public ParserRule getRule() { return rule; }

		//(atom=JASON_ATOM | tk_begin=TK_BEGIN | tk_end=TK_END) ("(" terms=Terms ")")? plan_term+=Plan_term* list=List?
		public Group getGroup() { return cGroup; }

		//atom=JASON_ATOM | tk_begin=TK_BEGIN | tk_end=TK_END
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//atom=JASON_ATOM
		public Assignment getAtomAssignment_0_0() { return cAtomAssignment_0_0; }

		//JASON_ATOM
		public RuleCall getAtomJASON_ATOMParserRuleCall_0_0_0() { return cAtomJASON_ATOMParserRuleCall_0_0_0; }

		//tk_begin=TK_BEGIN
		public Assignment getTk_beginAssignment_0_1() { return cTk_beginAssignment_0_1; }

		//TK_BEGIN
		public RuleCall getTk_beginTK_BEGINParserRuleCall_0_1_0() { return cTk_beginTK_BEGINParserRuleCall_0_1_0; }

		//tk_end=TK_END
		public Assignment getTk_endAssignment_0_2() { return cTk_endAssignment_0_2; }

		//TK_END
		public RuleCall getTk_endTK_ENDParserRuleCall_0_2_0() { return cTk_endTK_ENDParserRuleCall_0_2_0; }

		//("(" terms=Terms ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//terms=Terms
		public Assignment getTermsAssignment_1_1() { return cTermsAssignment_1_1; }

		//Terms
		public RuleCall getTermsTermsParserRuleCall_1_1_0() { return cTermsTermsParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//plan_term+=Plan_term*
		public Assignment getPlan_termAssignment_2() { return cPlan_termAssignment_2; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_2_0() { return cPlan_termPlan_termParserRuleCall_2_0; }

		//list=List?
		public Assignment getListAssignment_3() { return cListAssignment_3; }

		//List
		public RuleCall getListListParserRuleCall_3_0() { return cListListParserRuleCall_3_0; }
	}

	public class TermsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Terms");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTermAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_1_0 = (RuleCall)cTermAssignment_1_1.eContents().get(0);
		
		//Terms:
		//	term+=Term ("," term+=Term)*;
		public ParserRule getRule() { return rule; }

		//term+=Term ("," term+=Term)*
		public Group getGroup() { return cGroup; }

		//term+=Term
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }

		//Term
		public RuleCall getTermTermParserRuleCall_0_0() { return cTermTermParserRuleCall_0_0; }

		//("," term+=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//term+=Term
		public Assignment getTermAssignment_1_1() { return cTermAssignment_1_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_1_0() { return cTermTermParserRuleCall_1_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cListListParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Assignment cPlan_termAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPlan_termPlan_termParserRuleCall_1_0 = (RuleCall)cPlan_termAssignment_1.eContents().get(0);
		private final Assignment cLog_exprAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLog_exprLog_exprParserRuleCall_2_0 = (RuleCall)cLog_exprAssignment_2.eContents().get(0);
		
		//Term:
		//	list=List | plan_term=Plan_term | log_expr=Log_expr;
		public ParserRule getRule() { return rule; }

		//list=List | plan_term=Plan_term | log_expr=Log_expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//list=List
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//List
		public RuleCall getListListParserRuleCall_0_0() { return cListListParserRuleCall_0_0; }

		//plan_term=Plan_term
		public Assignment getPlan_termAssignment_1() { return cPlan_termAssignment_1; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_1_0() { return cPlan_termPlan_termParserRuleCall_1_0; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_2() { return cLog_exprAssignment_2; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_2_0() { return cLog_exprLog_exprParserRuleCall_2_0; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTerm_in_listAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTerm_in_listTerm_in_listParserRuleCall_2_0_0 = (RuleCall)cTerm_in_listAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTerm_in_listAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTerm_in_listTerm_in_listParserRuleCall_2_1_1_0 = (RuleCall)cTerm_in_listAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1 = (Alternatives)cGroup_2_2.eContents().get(1);
		private final Assignment cVarAssignment_2_2_1_0 = (Assignment)cAlternatives_2_2_1.eContents().get(0);
		private final RuleCall cVarVARTTerminalRuleCall_2_2_1_0_0 = (RuleCall)cVarAssignment_2_2_1_0.eContents().get(0);
		private final Assignment cUnnamedvarAssignment_2_2_1_1 = (Assignment)cAlternatives_2_2_1.eContents().get(1);
		private final RuleCall cUnnamedvarUNNAMEDVARTTerminalRuleCall_2_2_1_1_0 = (RuleCall)cUnnamedvarAssignment_2_2_1_1.eContents().get(0);
		private final Assignment cListAssignment_2_2_1_2 = (Assignment)cAlternatives_2_2_1.eContents().get(2);
		private final RuleCall cListListParserRuleCall_2_2_1_2_0 = (RuleCall)cListAssignment_2_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//	{List} "[" (term_in_list+=Term_in_list ("," term_in_list+=Term_in_list)* ("|" (var=VART | unnamedvar=UNNAMEDVART |
		//	list=List))?)? "]";
		public ParserRule getRule() { return rule; }

		//{List} "[" (term_in_list+=Term_in_list ("," term_in_list+=Term_in_list)* ("|" (var=VART | unnamedvar=UNNAMEDVART |
		//list=List))?)? "]"
		public Group getGroup() { return cGroup; }

		//{List}
		public Action getListAction_0() { return cListAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(term_in_list+=Term_in_list ("," term_in_list+=Term_in_list)* ("|" (var=VART | unnamedvar=UNNAMEDVART | list=List))?)?
		public Group getGroup_2() { return cGroup_2; }

		//term_in_list+=Term_in_list
		public Assignment getTerm_in_listAssignment_2_0() { return cTerm_in_listAssignment_2_0; }

		//Term_in_list
		public RuleCall getTerm_in_listTerm_in_listParserRuleCall_2_0_0() { return cTerm_in_listTerm_in_listParserRuleCall_2_0_0; }

		//("," term_in_list+=Term_in_list)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//term_in_list+=Term_in_list
		public Assignment getTerm_in_listAssignment_2_1_1() { return cTerm_in_listAssignment_2_1_1; }

		//Term_in_list
		public RuleCall getTerm_in_listTerm_in_listParserRuleCall_2_1_1_0() { return cTerm_in_listTerm_in_listParserRuleCall_2_1_1_0; }

		//("|" (var=VART | unnamedvar=UNNAMEDVART | list=List))?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_2_0() { return cVerticalLineKeyword_2_2_0; }

		//var=VART | unnamedvar=UNNAMEDVART | list=List
		public Alternatives getAlternatives_2_2_1() { return cAlternatives_2_2_1; }

		//var=VART
		public Assignment getVarAssignment_2_2_1_0() { return cVarAssignment_2_2_1_0; }

		//VART
		public RuleCall getVarVARTTerminalRuleCall_2_2_1_0_0() { return cVarVARTTerminalRuleCall_2_2_1_0_0; }

		//unnamedvar=UNNAMEDVART
		public Assignment getUnnamedvarAssignment_2_2_1_1() { return cUnnamedvarAssignment_2_2_1_1; }

		//UNNAMEDVART
		public RuleCall getUnnamedvarUNNAMEDVARTTerminalRuleCall_2_2_1_1_0() { return cUnnamedvarUNNAMEDVARTTerminalRuleCall_2_2_1_1_0; }

		//list=List
		public Assignment getListAssignment_2_2_1_2() { return cListAssignment_2_2_1_2; }

		//List
		public RuleCall getListListParserRuleCall_2_2_1_2_0() { return cListListParserRuleCall_2_2_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class Term_in_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term_in_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cListListParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Assignment cArithm_exprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArithm_exprArithm_exprParserRuleCall_1_0 = (RuleCall)cArithm_exprAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringStringParserRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cPlan_termAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cPlan_termPlan_termParserRuleCall_3_0 = (RuleCall)cPlan_termAssignment_3.eContents().get(0);
		
		//Term_in_list:
		//	list=List | arithm_expr=Arithm_expr | string=String | plan_term=Plan_term;
		public ParserRule getRule() { return rule; }

		//list=List | arithm_expr=Arithm_expr | string=String | plan_term=Plan_term
		public Alternatives getAlternatives() { return cAlternatives; }

		//list=List
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//List
		public RuleCall getListListParserRuleCall_0_0() { return cListListParserRuleCall_0_0; }

		//arithm_expr=Arithm_expr
		public Assignment getArithm_exprAssignment_1() { return cArithm_exprAssignment_1; }

		//Arithm_expr
		public RuleCall getArithm_exprArithm_exprParserRuleCall_1_0() { return cArithm_exprArithm_exprParserRuleCall_1_0; }

		//string=String
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//String
		public RuleCall getStringStringParserRuleCall_2_0() { return cStringStringParserRuleCall_2_0; }

		//plan_term=Plan_term
		public Assignment getPlan_termAssignment_3() { return cPlan_termAssignment_3; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_3_0() { return cPlan_termPlan_termParserRuleCall_3_0; }
	}

	public class Log_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Log_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLog_expr_trmAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLog_expr_trmLog_expr_trmParserRuleCall_0_0 = (RuleCall)cLog_expr_trmAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLog_exprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLog_exprLog_exprParserRuleCall_1_1_0 = (RuleCall)cLog_exprAssignment_1_1.eContents().get(0);
		
		//Log_expr:
		//	log_expr_trm=Log_expr_trm ("|" log_expr=Log_expr)?;
		public ParserRule getRule() { return rule; }

		//log_expr_trm=Log_expr_trm ("|" log_expr=Log_expr)?
		public Group getGroup() { return cGroup; }

		//log_expr_trm=Log_expr_trm
		public Assignment getLog_expr_trmAssignment_0() { return cLog_expr_trmAssignment_0; }

		//Log_expr_trm
		public RuleCall getLog_expr_trmLog_expr_trmParserRuleCall_0_0() { return cLog_expr_trmLog_expr_trmParserRuleCall_0_0; }

		//("|" log_expr=Log_expr)?
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_1_1() { return cLog_exprAssignment_1_1; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_1_1_0() { return cLog_exprLog_exprParserRuleCall_1_1_0; }
	}

	public class Log_expr_trmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Log_expr_trm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLog_expr_factorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLog_expr_factorLog_expr_factorParserRuleCall_0_0 = (RuleCall)cLog_expr_factorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLog_expr_trmAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLog_expr_trmLog_expr_trmParserRuleCall_1_1_0 = (RuleCall)cLog_expr_trmAssignment_1_1.eContents().get(0);
		
		//Log_expr_trm:
		//	log_expr_factor=Log_expr_factor ("&" log_expr_trm=Log_expr_trm)?;
		public ParserRule getRule() { return rule; }

		//log_expr_factor=Log_expr_factor ("&" log_expr_trm=Log_expr_trm)?
		public Group getGroup() { return cGroup; }

		//log_expr_factor=Log_expr_factor
		public Assignment getLog_expr_factorAssignment_0() { return cLog_expr_factorAssignment_0; }

		//Log_expr_factor
		public RuleCall getLog_expr_factorLog_expr_factorParserRuleCall_0_0() { return cLog_expr_factorLog_expr_factorParserRuleCall_0_0; }

		//("&" log_expr_trm=Log_expr_trm)?
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//log_expr_trm=Log_expr_trm
		public Assignment getLog_expr_trmAssignment_1_1() { return cLog_expr_trmAssignment_1_1; }

		//Log_expr_trm
		public RuleCall getLog_expr_trmLog_expr_trmParserRuleCall_1_1_0() { return cLog_expr_trmLog_expr_trmParserRuleCall_1_1_0; }
	}

	public class Log_expr_factorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Log_expr_factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTk_notAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTk_notTK_NOTParserRuleCall_0_0_0 = (RuleCall)cTk_notAssignment_0_0.eContents().get(0);
		private final Assignment cLog_expr_factorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLog_expr_factorLog_expr_factorParserRuleCall_0_1_0 = (RuleCall)cLog_expr_factorAssignment_0_1.eContents().get(0);
		private final Assignment cRel_exprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRel_exprRel_exprParserRuleCall_1_0 = (RuleCall)cRel_exprAssignment_1.eContents().get(0);
		
		//Log_expr_factor:
		//	tk_not=TK_NOT log_expr_factor=Log_expr_factor | rel_expr=Rel_expr;
		public ParserRule getRule() { return rule; }

		//tk_not=TK_NOT log_expr_factor=Log_expr_factor | rel_expr=Rel_expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//tk_not=TK_NOT log_expr_factor=Log_expr_factor
		public Group getGroup_0() { return cGroup_0; }

		//tk_not=TK_NOT
		public Assignment getTk_notAssignment_0_0() { return cTk_notAssignment_0_0; }

		//TK_NOT
		public RuleCall getTk_notTK_NOTParserRuleCall_0_0_0() { return cTk_notTK_NOTParserRuleCall_0_0_0; }

		//log_expr_factor=Log_expr_factor
		public Assignment getLog_expr_factorAssignment_0_1() { return cLog_expr_factorAssignment_0_1; }

		//Log_expr_factor
		public RuleCall getLog_expr_factorLog_expr_factorParserRuleCall_0_1_0() { return cLog_expr_factorLog_expr_factorParserRuleCall_0_1_0; }

		//rel_expr=Rel_expr
		public Assignment getRel_exprAssignment_1() { return cRel_exprAssignment_1; }

		//Rel_expr
		public RuleCall getRel_exprRel_exprParserRuleCall_1_0() { return cRel_exprRel_exprParserRuleCall_1_0; }
	}

	public class Rel_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rel_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cArithm_expAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cArithm_expArithm_exprParserRuleCall_0_0_0 = (RuleCall)cArithm_expAssignment_0_0.eContents().get(0);
		private final Assignment cStringAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cStringStringParserRuleCall_0_1_0 = (RuleCall)cStringAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRelOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelOpTK_REL_OPParserRuleCall_1_0_0 = (RuleCall)cRelOpAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cArithm_exprAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cArithm_exprArithm_exprParserRuleCall_1_1_0_0 = (RuleCall)cArithm_exprAssignment_1_1_0.eContents().get(0);
		private final Assignment cString2Assignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cString2StringParserRuleCall_1_1_1_0 = (RuleCall)cString2Assignment_1_1_1.eContents().get(0);
		private final Assignment cListAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cListListParserRuleCall_1_1_2_0 = (RuleCall)cListAssignment_1_1_2.eContents().get(0);
		private final Assignment cPlan_termAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final RuleCall cPlan_termPlan_termParserRuleCall_1_1_3_0 = (RuleCall)cPlan_termAssignment_1_1_3.eContents().get(0);
		
		//Rel_expr:
		//	(arithm_exp=Arithm_expr | string=String) (relOp=TK_REL_OP (arithm_expr=Arithm_expr | string2=String | list=List |
		//	plan_term=Plan_term))?;
		public ParserRule getRule() { return rule; }

		//(arithm_exp=Arithm_expr | string=String) (relOp=TK_REL_OP (arithm_expr=Arithm_expr | string2=String | list=List |
		//plan_term=Plan_term))?
		public Group getGroup() { return cGroup; }

		//arithm_exp=Arithm_expr | string=String
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//arithm_exp=Arithm_expr
		public Assignment getArithm_expAssignment_0_0() { return cArithm_expAssignment_0_0; }

		//Arithm_expr
		public RuleCall getArithm_expArithm_exprParserRuleCall_0_0_0() { return cArithm_expArithm_exprParserRuleCall_0_0_0; }

		//string=String
		public Assignment getStringAssignment_0_1() { return cStringAssignment_0_1; }

		//String
		public RuleCall getStringStringParserRuleCall_0_1_0() { return cStringStringParserRuleCall_0_1_0; }

		//(relOp=TK_REL_OP (arithm_expr=Arithm_expr | string2=String | list=List | plan_term=Plan_term))?
		public Group getGroup_1() { return cGroup_1; }

		//relOp=TK_REL_OP
		public Assignment getRelOpAssignment_1_0() { return cRelOpAssignment_1_0; }

		//TK_REL_OP
		public RuleCall getRelOpTK_REL_OPParserRuleCall_1_0_0() { return cRelOpTK_REL_OPParserRuleCall_1_0_0; }

		//arithm_expr=Arithm_expr | string2=String | list=List | plan_term=Plan_term
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//arithm_expr=Arithm_expr
		public Assignment getArithm_exprAssignment_1_1_0() { return cArithm_exprAssignment_1_1_0; }

		//Arithm_expr
		public RuleCall getArithm_exprArithm_exprParserRuleCall_1_1_0_0() { return cArithm_exprArithm_exprParserRuleCall_1_1_0_0; }

		//string2=String
		public Assignment getString2Assignment_1_1_1() { return cString2Assignment_1_1_1; }

		//String
		public RuleCall getString2StringParserRuleCall_1_1_1_0() { return cString2StringParserRuleCall_1_1_1_0; }

		//list=List
		public Assignment getListAssignment_1_1_2() { return cListAssignment_1_1_2; }

		//List
		public RuleCall getListListParserRuleCall_1_1_2_0() { return cListListParserRuleCall_1_1_2_0; }

		//plan_term=Plan_term
		public Assignment getPlan_termAssignment_1_1_3() { return cPlan_termAssignment_1_1_3; }

		//Plan_term
		public RuleCall getPlan_termPlan_termParserRuleCall_1_1_3_0() { return cPlan_termPlan_termParserRuleCall_1_1_3_0; }
	}

	public class TK_REL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_REL_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cReverseSolidusEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cFullStopKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cFullStopKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		
		//TK_REL_OP hidden():
		//	"<" | "<=" | ">" | ">=" | "==" | "\\==" | "=" ("." ".")?;
		public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">=" | "==" | "\\==" | "=" ("." ".")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//"\\=="
		public Keyword getReverseSolidusEqualsSignEqualsSignKeyword_5() { return cReverseSolidusEqualsSignEqualsSignKeyword_5; }

		//"=" ("." ".")?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//("." ".")?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"."
		public Keyword getFullStopKeyword_6_1_0() { return cFullStopKeyword_6_1_0; }

		//"."
		public Keyword getFullStopKeyword_6_1_1() { return cFullStopKeyword_6_1_1; }
	}

	public class Arithm_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arithm_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArithm_expr_trmAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArithm_expr_trmArithm_expr_trmParserRuleCall_0_0 = (RuleCall)cArithm_expr_trmAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSubaddAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSubaddTK_SUB_ADDParserRuleCall_1_0_0 = (RuleCall)cSubaddAssignment_1_0.eContents().get(0);
		private final Assignment cArithm_exprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArithm_exprArithm_exprParserRuleCall_1_1_0 = (RuleCall)cArithm_exprAssignment_1_1.eContents().get(0);
		
		//Arithm_expr:
		//	arithm_expr_trm=Arithm_expr_trm (subadd=TK_SUB_ADD arithm_expr=Arithm_expr)?;
		public ParserRule getRule() { return rule; }

		//arithm_expr_trm=Arithm_expr_trm (subadd=TK_SUB_ADD arithm_expr=Arithm_expr)?
		public Group getGroup() { return cGroup; }

		//arithm_expr_trm=Arithm_expr_trm
		public Assignment getArithm_expr_trmAssignment_0() { return cArithm_expr_trmAssignment_0; }

		//Arithm_expr_trm
		public RuleCall getArithm_expr_trmArithm_expr_trmParserRuleCall_0_0() { return cArithm_expr_trmArithm_expr_trmParserRuleCall_0_0; }

		//(subadd=TK_SUB_ADD arithm_expr=Arithm_expr)?
		public Group getGroup_1() { return cGroup_1; }

		//subadd=TK_SUB_ADD
		public Assignment getSubaddAssignment_1_0() { return cSubaddAssignment_1_0; }

		//TK_SUB_ADD
		public RuleCall getSubaddTK_SUB_ADDParserRuleCall_1_0_0() { return cSubaddTK_SUB_ADDParserRuleCall_1_0_0; }

		//arithm_expr=Arithm_expr
		public Assignment getArithm_exprAssignment_1_1() { return cArithm_exprAssignment_1_1; }

		//Arithm_expr
		public RuleCall getArithm_exprArithm_exprParserRuleCall_1_1_0() { return cArithm_exprArithm_exprParserRuleCall_1_1_0; }
	}

	public class TK_SUB_ADDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_SUB_ADD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TK_SUB_ADD:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class Arithm_expr_trmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arithm_expr_trm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArithm_expr_factorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArithm_expr_factorArithm_expr_factorParserRuleCall_0_0 = (RuleCall)cArithm_expr_factorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cMuldivAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cMuldivTK_MUL_DIVParserRuleCall_1_0_0_0 = (RuleCall)cMuldivAssignment_1_0_0.eContents().get(0);
		private final Assignment cTk_intdivAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTk_intdivTK_INTDIVParserRuleCall_1_0_1_0 = (RuleCall)cTk_intdivAssignment_1_0_1.eContents().get(0);
		private final Assignment cTk_intmodAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cTk_intmodTK_INTMODParserRuleCall_1_0_2_0 = (RuleCall)cTk_intmodAssignment_1_0_2.eContents().get(0);
		private final Assignment cArithm_expr_trmAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArithm_expr_trmArithm_expr_trmParserRuleCall_1_1_0 = (RuleCall)cArithm_expr_trmAssignment_1_1.eContents().get(0);
		
		//Arithm_expr_trm:
		//	arithm_expr_factor=Arithm_expr_factor ((muldiv=TK_MUL_DIV | tk_intdiv=TK_INTDIV | tk_intmod=TK_INTMOD)
		//	arithm_expr_trm=Arithm_expr_trm)?;
		public ParserRule getRule() { return rule; }

		//arithm_expr_factor=Arithm_expr_factor ((muldiv=TK_MUL_DIV | tk_intdiv=TK_INTDIV | tk_intmod=TK_INTMOD)
		//arithm_expr_trm=Arithm_expr_trm)?
		public Group getGroup() { return cGroup; }

		//arithm_expr_factor=Arithm_expr_factor
		public Assignment getArithm_expr_factorAssignment_0() { return cArithm_expr_factorAssignment_0; }

		//Arithm_expr_factor
		public RuleCall getArithm_expr_factorArithm_expr_factorParserRuleCall_0_0() { return cArithm_expr_factorArithm_expr_factorParserRuleCall_0_0; }

		//((muldiv=TK_MUL_DIV | tk_intdiv=TK_INTDIV | tk_intmod=TK_INTMOD) arithm_expr_trm=Arithm_expr_trm)?
		public Group getGroup_1() { return cGroup_1; }

		//muldiv=TK_MUL_DIV | tk_intdiv=TK_INTDIV | tk_intmod=TK_INTMOD
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//muldiv=TK_MUL_DIV
		public Assignment getMuldivAssignment_1_0_0() { return cMuldivAssignment_1_0_0; }

		//TK_MUL_DIV
		public RuleCall getMuldivTK_MUL_DIVParserRuleCall_1_0_0_0() { return cMuldivTK_MUL_DIVParserRuleCall_1_0_0_0; }

		//tk_intdiv=TK_INTDIV
		public Assignment getTk_intdivAssignment_1_0_1() { return cTk_intdivAssignment_1_0_1; }

		//TK_INTDIV
		public RuleCall getTk_intdivTK_INTDIVParserRuleCall_1_0_1_0() { return cTk_intdivTK_INTDIVParserRuleCall_1_0_1_0; }

		//tk_intmod=TK_INTMOD
		public Assignment getTk_intmodAssignment_1_0_2() { return cTk_intmodAssignment_1_0_2; }

		//TK_INTMOD
		public RuleCall getTk_intmodTK_INTMODParserRuleCall_1_0_2_0() { return cTk_intmodTK_INTMODParserRuleCall_1_0_2_0; }

		//arithm_expr_trm=Arithm_expr_trm
		public Assignment getArithm_expr_trmAssignment_1_1() { return cArithm_expr_trmAssignment_1_1; }

		//Arithm_expr_trm
		public RuleCall getArithm_expr_trmArithm_expr_trmParserRuleCall_1_1_0() { return cArithm_expr_trmArithm_expr_trmParserRuleCall_1_1_0; }
	}

	public class TK_MUL_DIVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_MUL_DIV");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TK_MUL_DIV:
		//	"*" | "/";
		public ParserRule getRule() { return rule; }

		//"*" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}

	public class Arithm_expr_factorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arithm_expr_factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArithm_expr_simpleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArithm_expr_simpleArithm_expr_simpleParserRuleCall_0_0 = (RuleCall)cArithm_expr_simpleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExponentialAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExponentialTK_EXPONENTIALParserRuleCall_1_0_0 = (RuleCall)cExponentialAssignment_1_0.eContents().get(0);
		private final Assignment cArithm_expr_factorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArithm_expr_factorArithm_expr_factorParserRuleCall_1_1_0 = (RuleCall)cArithm_expr_factorAssignment_1_1.eContents().get(0);
		
		//Arithm_expr_factor:
		//	arithm_expr_simple=Arithm_expr_simple (exponential=TK_EXPONENTIAL arithm_expr_factor=Arithm_expr_factor)?;
		public ParserRule getRule() { return rule; }

		//arithm_expr_simple=Arithm_expr_simple (exponential=TK_EXPONENTIAL arithm_expr_factor=Arithm_expr_factor)?
		public Group getGroup() { return cGroup; }

		//arithm_expr_simple=Arithm_expr_simple
		public Assignment getArithm_expr_simpleAssignment_0() { return cArithm_expr_simpleAssignment_0; }

		//Arithm_expr_simple
		public RuleCall getArithm_expr_simpleArithm_expr_simpleParserRuleCall_0_0() { return cArithm_expr_simpleArithm_expr_simpleParserRuleCall_0_0; }

		//(exponential=TK_EXPONENTIAL arithm_expr_factor=Arithm_expr_factor)?
		public Group getGroup_1() { return cGroup_1; }

		//exponential=TK_EXPONENTIAL
		public Assignment getExponentialAssignment_1_0() { return cExponentialAssignment_1_0; }

		//TK_EXPONENTIAL
		public RuleCall getExponentialTK_EXPONENTIALParserRuleCall_1_0_0() { return cExponentialTK_EXPONENTIALParserRuleCall_1_0_0; }

		//arithm_expr_factor=Arithm_expr_factor
		public Assignment getArithm_expr_factorAssignment_1_1() { return cArithm_expr_factorAssignment_1_1; }

		//Arithm_expr_factor
		public RuleCall getArithm_expr_factorArithm_expr_factorParserRuleCall_1_1_0() { return cArithm_expr_factorArithm_expr_factorParserRuleCall_1_1_0; }
	}

	public class TK_EXPONENTIALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_EXPONENTIAL");
		private final Keyword cAsteriskAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_EXPONENTIAL:
		//	"**";
		public ParserRule getRule() { return rule; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword() { return cAsteriskAsteriskKeyword; }
	}

	public class Arithm_expr_simpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arithm_expr_simple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnaryAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryTK_UNARY_OPParserRuleCall_1_0_0 = (RuleCall)cUnaryAssignment_1_0.eContents().get(0);
		private final Assignment cArithm_expr_simpleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArithm_expr_simpleArithm_expr_simpleParserRuleCall_1_1_0 = (RuleCall)cArithm_expr_simpleAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLog_exprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLog_exprLog_exprParserRuleCall_2_1_0 = (RuleCall)cLog_exprAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cFunctionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionFunctionParserRuleCall_3_0 = (RuleCall)cFunctionAssignment_3.eContents().get(0);
		
		//Arithm_expr_simple:
		//	number=Number //( number=Number | unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | '(' log_expr=Log_expr ')' | var=Var | function=Function )
		//	| unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | "(" log_expr=Log_expr ")" | function=Function;
		public ParserRule getRule() { return rule; }

		//number=Number //( number=Number | unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | '(' log_expr=Log_expr ')' | var=Var | function=Function )
		//| unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | "(" log_expr=Log_expr ")" | function=Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }

		//unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple
		public Group getGroup_1() { return cGroup_1; }

		//unary=TK_UNARY_OP
		public Assignment getUnaryAssignment_1_0() { return cUnaryAssignment_1_0; }

		//TK_UNARY_OP
		public RuleCall getUnaryTK_UNARY_OPParserRuleCall_1_0_0() { return cUnaryTK_UNARY_OPParserRuleCall_1_0_0; }

		//arithm_expr_simple=Arithm_expr_simple
		public Assignment getArithm_expr_simpleAssignment_1_1() { return cArithm_expr_simpleAssignment_1_1; }

		//Arithm_expr_simple
		public RuleCall getArithm_expr_simpleArithm_expr_simpleParserRuleCall_1_1_0() { return cArithm_expr_simpleArithm_expr_simpleParserRuleCall_1_1_0; }

		//"(" log_expr=Log_expr ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//log_expr=Log_expr
		public Assignment getLog_exprAssignment_2_1() { return cLog_exprAssignment_2_1; }

		//Log_expr
		public RuleCall getLog_exprLog_exprParserRuleCall_2_1_0() { return cLog_exprLog_exprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//function=Function
		public Assignment getFunctionAssignment_3() { return cFunctionAssignment_3; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_3_0() { return cFunctionFunctionParserRuleCall_3_0; }
	}

	public class TK_UNARY_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_UNARY_OP");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_UNARY_OP:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//Function:
		//	literal=Literal;
		public ParserRule getRule() { return rule; }

		//literal=Literal
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0() { return cLiteralLiteralParserRuleCall_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cVarVARTTerminalRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Assignment cUnnamedvarAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cUnnamedvarUNNAMEDVARTTerminalRuleCall_0_1_0 = (RuleCall)cUnnamedvarAssignment_0_1.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//Var:
		//	(var=VART | unnamedvar=UNNAMEDVART) list=List?;
		public ParserRule getRule() { return rule; }

		//(var=VART | unnamedvar=UNNAMEDVART) list=List?
		public Group getGroup() { return cGroup; }

		//var=VART | unnamedvar=UNNAMEDVART
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//var=VART
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }

		//VART
		public RuleCall getVarVARTTerminalRuleCall_0_0_0() { return cVarVARTTerminalRuleCall_0_0_0; }

		//unnamedvar=UNNAMEDVART
		public Assignment getUnnamedvarAssignment_0_1() { return cUnnamedvarAssignment_0_1; }

		//UNNAMEDVART
		public RuleCall getUnnamedvarUNNAMEDVARTTerminalRuleCall_0_1_0() { return cUnnamedvarUNNAMEDVARTTerminalRuleCall_0_1_0; }

		//list=List?
		public Assignment getListAssignment_1() { return cListAssignment_1; }

		//List
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }
	}

	public class StringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String");
		private final Assignment cStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringSTRINGTTerminalRuleCall_0 = (RuleCall)cStringAssignment.eContents().get(0);
		
		//String:
		//	string=STRINGT;
		public ParserRule getRule() { return rule; }

		//string=STRINGT
		public Assignment getStringAssignment() { return cStringAssignment; }

		//STRINGT
		public RuleCall getStringSTRINGTTerminalRuleCall_0() { return cStringSTRINGTTerminalRuleCall_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNumberAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNumberNUMBERTTerminalRuleCall_0_0_0 = (RuleCall)cNumberAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDecimalPartAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDecimalPartNUMBERTTerminalRuleCall_0_2_0 = (RuleCall)cDecimalPartAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDecimalPartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecimalPartNUMBERTTerminalRuleCall_1_1_0 = (RuleCall)cDecimalPartAssignment_1_1.eContents().get(0);
		private final Assignment cNumberAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumberNUMBERTTerminalRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		
		//Number hidden(): //number+=(NUMBERT)+ '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | (number+=NUMBERT)+ exp+=EXPONENT | (number+=NUMBERT)+ 
		//	number+=NUMBERT+ "." decimalPart+=NUMBERT+ | "." decimalPart+=NUMBERT+ | number+=NUMBERT+;
		public ParserRule getRule() { return rule; }

		////number+=(NUMBERT)+ '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | (number+=NUMBERT)+ exp+=EXPONENT | (number+=NUMBERT)+ 
		//number+=NUMBERT+ "." decimalPart+=NUMBERT+ | "." decimalPart+=NUMBERT+ | number+=NUMBERT+
		public Alternatives getAlternatives() { return cAlternatives; }

		////number+=(NUMBERT)+ '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | (number+=NUMBERT)+ exp+=EXPONENT | (number+=NUMBERT)+ 
		//number+=NUMBERT+ "." decimalPart+=NUMBERT+
		public Group getGroup_0() { return cGroup_0; }

		////number+=(NUMBERT)+ '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | (number+=NUMBERT)+ exp+=EXPONENT | (number+=NUMBERT)+ 
		//number+=NUMBERT+
		public Assignment getNumberAssignment_0_0() { return cNumberAssignment_0_0; }

		//NUMBERT
		public RuleCall getNumberNUMBERTTerminalRuleCall_0_0_0() { return cNumberNUMBERTTerminalRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//decimalPart+=NUMBERT+
		public Assignment getDecimalPartAssignment_0_2() { return cDecimalPartAssignment_0_2; }

		//NUMBERT
		public RuleCall getDecimalPartNUMBERTTerminalRuleCall_0_2_0() { return cDecimalPartNUMBERTTerminalRuleCall_0_2_0; }

		//"." decimalPart+=NUMBERT+
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//decimalPart+=NUMBERT+
		public Assignment getDecimalPartAssignment_1_1() { return cDecimalPartAssignment_1_1; }

		//NUMBERT
		public RuleCall getDecimalPartNUMBERTTerminalRuleCall_1_1_0() { return cDecimalPartNUMBERTTerminalRuleCall_1_1_0; }

		//number+=NUMBERT+
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }

		//NUMBERT
		public RuleCall getNumberNUMBERTTerminalRuleCall_2_0() { return cNumberNUMBERTTerminalRuleCall_2_0; }
	}

	public class JASON_ATOMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JASON_ATOM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJASON_ATOM_HEADParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cJASON_ATOM_TAILParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// * Atom rule * / JASON_ATOM hidden():
		//	JASON_ATOM_HEAD JASON_ATOM_TAIL*;
		public ParserRule getRule() { return rule; }

		//JASON_ATOM_HEAD JASON_ATOM_TAIL*
		public Group getGroup() { return cGroup; }

		//JASON_ATOM_HEAD
		public RuleCall getJASON_ATOM_HEADParserRuleCall_0() { return cJASON_ATOM_HEADParserRuleCall_0; }

		//JASON_ATOM_TAIL*
		public RuleCall getJASON_ATOM_TAILParserRuleCall_1() { return cJASON_ATOM_TAILParserRuleCall_1; }
	}

	public class JASON_ATOM_HEADElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JASON_ATOM_HEAD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cATOMTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// * Specific rule for not allowing spaces between the first dot and the following characthers* / //JASON_ATOM_HEAD hidden(SL_COMMENT, ML_COMMENT): '.'? ATOM;
		//JASON_ATOM_HEAD:
		//	"."? ATOM;
		public ParserRule getRule() { return rule; }

		//"."? ATOM
		public Group getGroup() { return cGroup; }

		//"."?
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ATOM
		public RuleCall getATOMTerminalRuleCall_1() { return cATOMTerminalRuleCall_1; }
	}

	public class JASON_ATOM_TAILElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JASON_ATOM_TAIL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cATOMTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//JASON_ATOM_TAIL:
		//	"." ATOM;
		public ParserRule getRule() { return rule; }

		//"." ATOM
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ATOM
		public RuleCall getATOMTerminalRuleCall_1() { return cATOMTerminalRuleCall_1; }
	}

	public class TK_BEGINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_BEGIN");
		private final Keyword cBeginKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_BEGIN:
		//	"begin";
		public ParserRule getRule() { return rule; }

		//"begin"
		public Keyword getBeginKeyword() { return cBeginKeyword; }
	}

	public class TK_ENDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_END");
		private final Keyword cEndKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_END:
		//	"end";
		public ParserRule getRule() { return rule; }

		//"end"
		public Keyword getEndKeyword() { return cEndKeyword; }
	}

	public class TK_IFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_IF");
		private final Keyword cIfKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_IF:
		//	"if";
		public ParserRule getRule() { return rule; }

		//"if"
		public Keyword getIfKeyword() { return cIfKeyword; }
	}

	public class TK_ELSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_ELSE");
		private final Keyword cElseKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_ELSE:
		//	"else";
		public ParserRule getRule() { return rule; }

		//"else"
		public Keyword getElseKeyword() { return cElseKeyword; }
	}

	public class TK_FORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_FOR");
		private final Keyword cForKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_FOR:
		//	"for";
		public ParserRule getRule() { return rule; }

		//"for"
		public Keyword getForKeyword() { return cForKeyword; }
	}

	public class TK_WHILEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_WHILE");
		private final Keyword cWhileKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_WHILE:
		//	"while";
		public ParserRule getRule() { return rule; }

		//"while"
		public Keyword getWhileKeyword() { return cWhileKeyword; }
	}

	public class TK_NOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_NOT");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_NOT:
		//	"not";
		public ParserRule getRule() { return rule; }

		//"not"
		public Keyword getNotKeyword() { return cNotKeyword; }
	}

	public class TK_INTDIVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_INTDIV");
		private final Keyword cDivKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_INTDIV:
		//	"div";
		public ParserRule getRule() { return rule; }

		//"div"
		public Keyword getDivKeyword() { return cDivKeyword; }
	}

	public class TK_INTMODElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_INTMOD");
		private final Keyword cModKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_INTMOD:
		//	"mod";
		public ParserRule getRule() { return rule; }

		//"mod"
		public Keyword getModKeyword() { return cModKeyword; }
	}

	public class TK_TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_TRUE");
		private final Keyword cTrueKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_TRUE:
		//	"true";
		public ParserRule getRule() { return rule; }

		//"true"
		public Keyword getTrueKeyword() { return cTrueKeyword; }
	}

	public class TK_FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TK_FALSE");
		private final Keyword cFalseKeyword = (Keyword)rule.eContents().get(1);
		
		//TK_FALSE:
		//	"false";
		public ParserRule getRule() { return rule; }

		//"false"
		public Keyword getFalseKeyword() { return cFalseKeyword; }
	}
	
	
	private AgentElements pAgent;
	private DirectiveElements pDirective;
	private BeliefElements pBelief;
	private Initial_goalElements pInitial_goal;
	private PlanElements pPlan;
	private TriggerElements pTrigger;
	private TriggerSymbolElements pTriggerSymbol;
	private Plan_bodyElements pPlan_body;
	private Plan_body_termElements pPlan_body_term;
	private Plan_body_factorElements pPlan_body_factor;
	private StmtIFElements pStmtIF;
	private StmtFORElements pStmtFOR;
	private StmtWHILEElements pStmtWHILE;
	private Body_formulaElements pBody_formula;
	private Plan_termElements pPlan_term;
	private LiteralElements pLiteral;
	private PredElements pPred;
	private TermsElements pTerms;
	private TermElements pTerm;
	private ListElements pList;
	private Term_in_listElements pTerm_in_list;
	private Log_exprElements pLog_expr;
	private Log_expr_trmElements pLog_expr_trm;
	private Log_expr_factorElements pLog_expr_factor;
	private Rel_exprElements pRel_expr;
	private TK_REL_OPElements pTK_REL_OP;
	private Arithm_exprElements pArithm_expr;
	private TK_SUB_ADDElements pTK_SUB_ADD;
	private Arithm_expr_trmElements pArithm_expr_trm;
	private TK_MUL_DIVElements pTK_MUL_DIV;
	private Arithm_expr_factorElements pArithm_expr_factor;
	private TK_EXPONENTIALElements pTK_EXPONENTIAL;
	private Arithm_expr_simpleElements pArithm_expr_simple;
	private TK_UNARY_OPElements pTK_UNARY_OP;
	private FunctionElements pFunction;
	private VarElements pVar;
	private StringElements pString;
	private NumberElements pNumber;
	private JASON_ATOMElements pJASON_ATOM;
	private JASON_ATOM_HEADElements pJASON_ATOM_HEAD;
	private JASON_ATOM_TAILElements pJASON_ATOM_TAIL;
	private TK_BEGINElements pTK_BEGIN;
	private TK_ENDElements pTK_END;
	private TK_IFElements pTK_IF;
	private TK_ELSEElements pTK_ELSE;
	private TK_FORElements pTK_FOR;
	private TK_WHILEElements pTK_WHILE;
	private TK_NOTElements pTK_NOT;
	private TK_INTDIVElements pTK_INTDIV;
	private TK_INTMODElements pTK_INTMOD;
	private TK_TRUEElements pTK_TRUE;
	private TK_FALSEElements pTK_FALSE;
	private TerminalRule tTK_LABEL_AT;
	private TerminalRule tTK_NEG;
	private TerminalRule tATOM;
	private TerminalRule tVART;
	private TerminalRule tUNNAMEDVART;
	private TerminalRule tSTRINGT;
	private TerminalRule tNUMBERT;
	private TerminalRule tCH;
	private TerminalRule tLCLETTER;
	private TerminalRule tUCLETTER;
	private TerminalRule tDIGIT;
	private TerminalRule tWS;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public AslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jasonide.xtext.asl.Asl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Agent:
	//	directive+=Directive* (belief+=Belief directive+=Directive*)* (initial_goal+=Initial_goal directive+=Directive*)*
	//	(plan+=Plan belief+=Belief* directive+=Directive*)*;
	public AgentElements getAgentAccess() {
		return (pAgent != null) ? pAgent : (pAgent = new AgentElements());
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//Directive:
	//	"{" (tk_begin=TK_BEGIN pred=Pred "}" agent=Agent | pred2=Pred "}");
	public DirectiveElements getDirectiveAccess() {
		return (pDirective != null) ? pDirective : (pDirective = new DirectiveElements());
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}

	//Belief: //literal=Literal ( ':-' log_expr=Log_expr )? '.'
	//	literal=Literal (":-" log_expr=Log_expr)? ".";
	public BeliefElements getBeliefAccess() {
		return (pBelief != null) ? pBelief : (pBelief = new BeliefElements());
	}
	
	public ParserRule getBeliefRule() {
		return getBeliefAccess().getRule();
	}

	//Initial_goal:
	//	"!" literal=Literal ".";
	public Initial_goalElements getInitial_goalAccess() {
		return (pInitial_goal != null) ? pInitial_goal : (pInitial_goal = new Initial_goalElements());
	}
	
	public ParserRule getInitial_goalRule() {
		return getInitial_goalAccess().getRule();
	}

	//Plan:
	//	(tk_label_at=TK_LABEL_AT pred=Pred)? trigger=Trigger (":" log_expr=Log_expr)? ("<-" plan_body=Plan_body)? ".";
	public PlanElements getPlanAccess() {
		return (pPlan != null) ? pPlan : (pPlan = new PlanElements());
	}
	
	public ParserRule getPlanRule() {
		return getPlanAccess().getRule();
	}

	//Trigger:
	//	trigger=TriggerSymbol (literal=Literal | var=Var);
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//TriggerSymbol:
	//	("+" | "-" | "^") ("!" | "?")?;
	public TriggerSymbolElements getTriggerSymbolAccess() {
		return (pTriggerSymbol != null) ? pTriggerSymbol : (pTriggerSymbol = new TriggerSymbolElements());
	}
	
	public ParserRule getTriggerSymbolRule() {
		return getTriggerSymbolAccess().getRule();
	}

	////plan_body	::=	plan_body_term ( ";" )? ( plan_body )?
	//Plan_body:
	//	plan_body_term=Plan_body_term ";"? plan_body=Plan_body?;
	public Plan_bodyElements getPlan_bodyAccess() {
		return (pPlan_body != null) ? pPlan_body : (pPlan_body = new Plan_bodyElements());
	}
	
	public ParserRule getPlan_bodyRule() {
		return getPlan_bodyAccess().getRule();
	}

	////plan_body_term	::=	plan_body_factor ( <TK_POR> plan_body_term )?
	//Plan_body_term:
	//	plan_body_factor=Plan_body_factor ("|||" plan_body_term=Plan_body_term)?;
	public Plan_body_termElements getPlan_body_termAccess() {
		return (pPlan_body_term != null) ? pPlan_body_term : (pPlan_body_term = new Plan_body_termElements());
	}
	
	public ParserRule getPlan_body_termRule() {
		return getPlan_body_termAccess().getRule();
	}

	////plan_body_factor	::=	( stmtIF | stmtFOR | stmtWHILE | body_formula ) ( <TK_PAND> plan_body_factor )?
	//Plan_body_factor:
	//	(stmtIF=StmtIF | stmtFOR=StmtFOR | stmtWHILE=StmtWHILE | body_formula=Body_formula) ("|&|"
	//	plan_body_factor=Plan_body_factor)?;
	public Plan_body_factorElements getPlan_body_factorAccess() {
		return (pPlan_body_factor != null) ? pPlan_body_factor : (pPlan_body_factor = new Plan_body_factorElements());
	}
	
	public ParserRule getPlan_body_factorRule() {
		return getPlan_body_factorAccess().getRule();
	}

	//StmtIF:
	//	tk_if=TK_IF "(" log_expr=Log_expr ")" plan_term=Plan_term (tk_else=TK_ELSE? plan_term2=Plan_term)?;
	public StmtIFElements getStmtIFAccess() {
		return (pStmtIF != null) ? pStmtIF : (pStmtIF = new StmtIFElements());
	}
	
	public ParserRule getStmtIFRule() {
		return getStmtIFAccess().getRule();
	}

	//StmtFOR:
	//	tk_for=TK_FOR "(" log_expr=Log_expr ")" plan_term=Plan_term;
	public StmtFORElements getStmtFORAccess() {
		return (pStmtFOR != null) ? pStmtFOR : (pStmtFOR = new StmtFORElements());
	}
	
	public ParserRule getStmtFORRule() {
		return getStmtFORAccess().getRule();
	}

	//StmtWHILE:
	//	tk_while=TK_WHILE "(" log_expr=Log_expr ")" plan_term=Plan_term;
	public StmtWHILEElements getStmtWHILEAccess() {
		return (pStmtWHILE != null) ? pStmtWHILE : (pStmtWHILE = new StmtWHILEElements());
	}
	
	public ParserRule getStmtWHILERule() {
		return getStmtWHILEAccess().getRule();
	}

	//Body_formula:
	//	("!" | "!!" | "?" | "+" ("+" | ">" | "<")? | "-" "+"?)? (plan_term=Plan_term | log_expr=Log_expr);
	public Body_formulaElements getBody_formulaAccess() {
		return (pBody_formula != null) ? pBody_formula : (pBody_formula = new Body_formulaElements());
	}
	
	public ParserRule getBody_formulaRule() {
		return getBody_formulaAccess().getRule();
	}

	//Plan_term:
	//	{Plan_term} "{" ((tk_label_at=TK_LABEL_AT pred=Pred)? trigger=Trigger (":" log_expr=Log_expr)? ("<-" | ";")?)?
	//	(literal=Literal ":-" log_expr2=Log_expr)? plan_body=Plan_body? "}";
	public Plan_termElements getPlan_termAccess() {
		return (pPlan_term != null) ? pPlan_term : (pPlan_term = new Plan_termElements());
	}
	
	public ParserRule getPlan_termRule() {
		return getPlan_termAccess().getRule();
	}

	////( ( ( tk_neg=TK_NEG )? pred=Pred ) | tk_true=TK_TRUE | tk_false=TK_FALSE )
	//Literal:
	//	((atom=JASON_ATOM | var=Var)? "::")? tk_neg=TK_NEG? (pred=Pred | var2=Var) //( ( ( ( ( <ATOM> | var ) )? "::" )? ( <TK_NEG> )? ( pred | var ) ) | <TK_TRUE> | <TK_FALSE> )
	//	| tk_true=TK_TRUE | tk_false=TK_FALSE;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Pred:
	//	(atom=JASON_ATOM | tk_begin=TK_BEGIN | tk_end=TK_END) ("(" terms=Terms ")")? plan_term+=Plan_term* list=List?;
	public PredElements getPredAccess() {
		return (pPred != null) ? pPred : (pPred = new PredElements());
	}
	
	public ParserRule getPredRule() {
		return getPredAccess().getRule();
	}

	//Terms:
	//	term+=Term ("," term+=Term)*;
	public TermsElements getTermsAccess() {
		return (pTerms != null) ? pTerms : (pTerms = new TermsElements());
	}
	
	public ParserRule getTermsRule() {
		return getTermsAccess().getRule();
	}

	//Term:
	//	list=List | plan_term=Plan_term | log_expr=Log_expr;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//List:
	//	{List} "[" (term_in_list+=Term_in_list ("," term_in_list+=Term_in_list)* ("|" (var=VART | unnamedvar=UNNAMEDVART |
	//	list=List))?)? "]";
	public ListElements getListAccess() {
		return (pList != null) ? pList : (pList = new ListElements());
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//Term_in_list:
	//	list=List | arithm_expr=Arithm_expr | string=String | plan_term=Plan_term;
	public Term_in_listElements getTerm_in_listAccess() {
		return (pTerm_in_list != null) ? pTerm_in_list : (pTerm_in_list = new Term_in_listElements());
	}
	
	public ParserRule getTerm_in_listRule() {
		return getTerm_in_listAccess().getRule();
	}

	//Log_expr:
	//	log_expr_trm=Log_expr_trm ("|" log_expr=Log_expr)?;
	public Log_exprElements getLog_exprAccess() {
		return (pLog_expr != null) ? pLog_expr : (pLog_expr = new Log_exprElements());
	}
	
	public ParserRule getLog_exprRule() {
		return getLog_exprAccess().getRule();
	}

	//Log_expr_trm:
	//	log_expr_factor=Log_expr_factor ("&" log_expr_trm=Log_expr_trm)?;
	public Log_expr_trmElements getLog_expr_trmAccess() {
		return (pLog_expr_trm != null) ? pLog_expr_trm : (pLog_expr_trm = new Log_expr_trmElements());
	}
	
	public ParserRule getLog_expr_trmRule() {
		return getLog_expr_trmAccess().getRule();
	}

	//Log_expr_factor:
	//	tk_not=TK_NOT log_expr_factor=Log_expr_factor | rel_expr=Rel_expr;
	public Log_expr_factorElements getLog_expr_factorAccess() {
		return (pLog_expr_factor != null) ? pLog_expr_factor : (pLog_expr_factor = new Log_expr_factorElements());
	}
	
	public ParserRule getLog_expr_factorRule() {
		return getLog_expr_factorAccess().getRule();
	}

	//Rel_expr:
	//	(arithm_exp=Arithm_expr | string=String) (relOp=TK_REL_OP (arithm_expr=Arithm_expr | string2=String | list=List |
	//	plan_term=Plan_term))?;
	public Rel_exprElements getRel_exprAccess() {
		return (pRel_expr != null) ? pRel_expr : (pRel_expr = new Rel_exprElements());
	}
	
	public ParserRule getRel_exprRule() {
		return getRel_exprAccess().getRule();
	}

	//TK_REL_OP hidden():
	//	"<" | "<=" | ">" | ">=" | "==" | "\\==" | "=" ("." ".")?;
	public TK_REL_OPElements getTK_REL_OPAccess() {
		return (pTK_REL_OP != null) ? pTK_REL_OP : (pTK_REL_OP = new TK_REL_OPElements());
	}
	
	public ParserRule getTK_REL_OPRule() {
		return getTK_REL_OPAccess().getRule();
	}

	//Arithm_expr:
	//	arithm_expr_trm=Arithm_expr_trm (subadd=TK_SUB_ADD arithm_expr=Arithm_expr)?;
	public Arithm_exprElements getArithm_exprAccess() {
		return (pArithm_expr != null) ? pArithm_expr : (pArithm_expr = new Arithm_exprElements());
	}
	
	public ParserRule getArithm_exprRule() {
		return getArithm_exprAccess().getRule();
	}

	//TK_SUB_ADD:
	//	"+" | "-";
	public TK_SUB_ADDElements getTK_SUB_ADDAccess() {
		return (pTK_SUB_ADD != null) ? pTK_SUB_ADD : (pTK_SUB_ADD = new TK_SUB_ADDElements());
	}
	
	public ParserRule getTK_SUB_ADDRule() {
		return getTK_SUB_ADDAccess().getRule();
	}

	//Arithm_expr_trm:
	//	arithm_expr_factor=Arithm_expr_factor ((muldiv=TK_MUL_DIV | tk_intdiv=TK_INTDIV | tk_intmod=TK_INTMOD)
	//	arithm_expr_trm=Arithm_expr_trm)?;
	public Arithm_expr_trmElements getArithm_expr_trmAccess() {
		return (pArithm_expr_trm != null) ? pArithm_expr_trm : (pArithm_expr_trm = new Arithm_expr_trmElements());
	}
	
	public ParserRule getArithm_expr_trmRule() {
		return getArithm_expr_trmAccess().getRule();
	}

	//TK_MUL_DIV:
	//	"*" | "/";
	public TK_MUL_DIVElements getTK_MUL_DIVAccess() {
		return (pTK_MUL_DIV != null) ? pTK_MUL_DIV : (pTK_MUL_DIV = new TK_MUL_DIVElements());
	}
	
	public ParserRule getTK_MUL_DIVRule() {
		return getTK_MUL_DIVAccess().getRule();
	}

	//Arithm_expr_factor:
	//	arithm_expr_simple=Arithm_expr_simple (exponential=TK_EXPONENTIAL arithm_expr_factor=Arithm_expr_factor)?;
	public Arithm_expr_factorElements getArithm_expr_factorAccess() {
		return (pArithm_expr_factor != null) ? pArithm_expr_factor : (pArithm_expr_factor = new Arithm_expr_factorElements());
	}
	
	public ParserRule getArithm_expr_factorRule() {
		return getArithm_expr_factorAccess().getRule();
	}

	//TK_EXPONENTIAL:
	//	"**";
	public TK_EXPONENTIALElements getTK_EXPONENTIALAccess() {
		return (pTK_EXPONENTIAL != null) ? pTK_EXPONENTIAL : (pTK_EXPONENTIAL = new TK_EXPONENTIALElements());
	}
	
	public ParserRule getTK_EXPONENTIALRule() {
		return getTK_EXPONENTIALAccess().getRule();
	}

	//Arithm_expr_simple:
	//	number=Number //( number=Number | unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | '(' log_expr=Log_expr ')' | var=Var | function=Function )
	//	| unary=TK_UNARY_OP arithm_expr_simple=Arithm_expr_simple | "(" log_expr=Log_expr ")" | function=Function;
	public Arithm_expr_simpleElements getArithm_expr_simpleAccess() {
		return (pArithm_expr_simple != null) ? pArithm_expr_simple : (pArithm_expr_simple = new Arithm_expr_simpleElements());
	}
	
	public ParserRule getArithm_expr_simpleRule() {
		return getArithm_expr_simpleAccess().getRule();
	}

	//TK_UNARY_OP:
	//	"-";
	public TK_UNARY_OPElements getTK_UNARY_OPAccess() {
		return (pTK_UNARY_OP != null) ? pTK_UNARY_OP : (pTK_UNARY_OP = new TK_UNARY_OPElements());
	}
	
	public ParserRule getTK_UNARY_OPRule() {
		return getTK_UNARY_OPAccess().getRule();
	}

	//Function:
	//	literal=Literal;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Var:
	//	(var=VART | unnamedvar=UNNAMEDVART) list=List?;
	public VarElements getVarAccess() {
		return (pVar != null) ? pVar : (pVar = new VarElements());
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//String:
	//	string=STRINGT;
	public StringElements getStringAccess() {
		return (pString != null) ? pString : (pString = new StringElements());
	}
	
	public ParserRule getStringRule() {
		return getStringAccess().getRule();
	}

	//Number hidden(): //number+=(NUMBERT)+ '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | '.' (decimalPart+=NUMBERT)+ exp+=EXPONENT? | (number+=NUMBERT)+ exp+=EXPONENT | (number+=NUMBERT)+ 
	//	number+=NUMBERT+ "." decimalPart+=NUMBERT+ | "." decimalPart+=NUMBERT+ | number+=NUMBERT+;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// * Atom rule * / JASON_ATOM hidden():
	//	JASON_ATOM_HEAD JASON_ATOM_TAIL*;
	public JASON_ATOMElements getJASON_ATOMAccess() {
		return (pJASON_ATOM != null) ? pJASON_ATOM : (pJASON_ATOM = new JASON_ATOMElements());
	}
	
	public ParserRule getJASON_ATOMRule() {
		return getJASON_ATOMAccess().getRule();
	}

	/// * Specific rule for not allowing spaces between the first dot and the following characthers* / //JASON_ATOM_HEAD hidden(SL_COMMENT, ML_COMMENT): '.'? ATOM;
	//JASON_ATOM_HEAD:
	//	"."? ATOM;
	public JASON_ATOM_HEADElements getJASON_ATOM_HEADAccess() {
		return (pJASON_ATOM_HEAD != null) ? pJASON_ATOM_HEAD : (pJASON_ATOM_HEAD = new JASON_ATOM_HEADElements());
	}
	
	public ParserRule getJASON_ATOM_HEADRule() {
		return getJASON_ATOM_HEADAccess().getRule();
	}

	//JASON_ATOM_TAIL:
	//	"." ATOM;
	public JASON_ATOM_TAILElements getJASON_ATOM_TAILAccess() {
		return (pJASON_ATOM_TAIL != null) ? pJASON_ATOM_TAIL : (pJASON_ATOM_TAIL = new JASON_ATOM_TAILElements());
	}
	
	public ParserRule getJASON_ATOM_TAILRule() {
		return getJASON_ATOM_TAILAccess().getRule();
	}

	//TK_BEGIN:
	//	"begin";
	public TK_BEGINElements getTK_BEGINAccess() {
		return (pTK_BEGIN != null) ? pTK_BEGIN : (pTK_BEGIN = new TK_BEGINElements());
	}
	
	public ParserRule getTK_BEGINRule() {
		return getTK_BEGINAccess().getRule();
	}

	//TK_END:
	//	"end";
	public TK_ENDElements getTK_ENDAccess() {
		return (pTK_END != null) ? pTK_END : (pTK_END = new TK_ENDElements());
	}
	
	public ParserRule getTK_ENDRule() {
		return getTK_ENDAccess().getRule();
	}

	//TK_IF:
	//	"if";
	public TK_IFElements getTK_IFAccess() {
		return (pTK_IF != null) ? pTK_IF : (pTK_IF = new TK_IFElements());
	}
	
	public ParserRule getTK_IFRule() {
		return getTK_IFAccess().getRule();
	}

	//TK_ELSE:
	//	"else";
	public TK_ELSEElements getTK_ELSEAccess() {
		return (pTK_ELSE != null) ? pTK_ELSE : (pTK_ELSE = new TK_ELSEElements());
	}
	
	public ParserRule getTK_ELSERule() {
		return getTK_ELSEAccess().getRule();
	}

	//TK_FOR:
	//	"for";
	public TK_FORElements getTK_FORAccess() {
		return (pTK_FOR != null) ? pTK_FOR : (pTK_FOR = new TK_FORElements());
	}
	
	public ParserRule getTK_FORRule() {
		return getTK_FORAccess().getRule();
	}

	//TK_WHILE:
	//	"while";
	public TK_WHILEElements getTK_WHILEAccess() {
		return (pTK_WHILE != null) ? pTK_WHILE : (pTK_WHILE = new TK_WHILEElements());
	}
	
	public ParserRule getTK_WHILERule() {
		return getTK_WHILEAccess().getRule();
	}

	//TK_NOT:
	//	"not";
	public TK_NOTElements getTK_NOTAccess() {
		return (pTK_NOT != null) ? pTK_NOT : (pTK_NOT = new TK_NOTElements());
	}
	
	public ParserRule getTK_NOTRule() {
		return getTK_NOTAccess().getRule();
	}

	//TK_INTDIV:
	//	"div";
	public TK_INTDIVElements getTK_INTDIVAccess() {
		return (pTK_INTDIV != null) ? pTK_INTDIV : (pTK_INTDIV = new TK_INTDIVElements());
	}
	
	public ParserRule getTK_INTDIVRule() {
		return getTK_INTDIVAccess().getRule();
	}

	//TK_INTMOD:
	//	"mod";
	public TK_INTMODElements getTK_INTMODAccess() {
		return (pTK_INTMOD != null) ? pTK_INTMOD : (pTK_INTMOD = new TK_INTMODElements());
	}
	
	public ParserRule getTK_INTMODRule() {
		return getTK_INTMODAccess().getRule();
	}

	//TK_TRUE:
	//	"true";
	public TK_TRUEElements getTK_TRUEAccess() {
		return (pTK_TRUE != null) ? pTK_TRUE : (pTK_TRUE = new TK_TRUEElements());
	}
	
	public ParserRule getTK_TRUERule() {
		return getTK_TRUEAccess().getRule();
	}

	//TK_FALSE:
	//	"false";
	public TK_FALSEElements getTK_FALSEAccess() {
		return (pTK_FALSE != null) ? pTK_FALSE : (pTK_FALSE = new TK_FALSEElements());
	}
	
	public ParserRule getTK_FALSERule() {
		return getTK_FALSEAccess().getRule();
	}

	//terminal TK_LABEL_AT:
	//	"@";
	public TerminalRule getTK_LABEL_ATRule() {
		return (tTK_LABEL_AT != null) ? tTK_LABEL_AT : (tTK_LABEL_AT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TK_LABEL_AT"));
	} 

	//terminal TK_NEG:
	//	"~";
	public TerminalRule getTK_NEGRule() {
		return (tTK_NEG != null) ? tTK_NEG : (tTK_NEG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TK_NEG"));
	} 

	//terminal ATOM:
	//	LCLETTER CH*;
	public TerminalRule getATOMRule() {
		return (tATOM != null) ? tATOM : (tATOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATOM"));
	} 

	////terminal ATOM_INTERNAL_ACTION: '.'? LCLETTER CH* ('.' LCLETTER CH*)*;
	//terminal VART:
	//	UCLETTER CH*;
	public TerminalRule getVARTRule() {
		return (tVART != null) ? tVART : (tVART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VART"));
	} 

	//terminal UNNAMEDVART:
	//	"_" CH*;
	public TerminalRule getUNNAMEDVARTRule() {
		return (tUNNAMEDVART != null) ? tUNNAMEDVART : (tUNNAMEDVART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNNAMEDVART"));
	} 

	//terminal STRINGT:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGTRule() {
		return (tSTRINGT != null) ? tSTRINGT : (tSTRINGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRINGT"));
	} 

	////terminal STRINGT: '"' ( '\\' '"' | !('"') )* '"';
	//terminal NUMBERT:
	//	"0".."9";
	public TerminalRule getNUMBERTRule() {
		return (tNUMBERT != null) ? tNUMBERT : (tNUMBERT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBERT"));
	} 

	/// *terminal NUMBERT
	//    :   
	//	    	('0' .. '9')+ '.' ('0' .. '9')+ Exponent?  
	//	    |   '.' ( '0' .. '9' )+ Exponent?  
	//	    |   ('0' .. '9')+ Exponent  
	//	    |   ('0' .. '9')+ 
	//	;* / / *terminal EXPONENT
	//    :   ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ 
	//    ;* / terminal fragment CH:
	//	LCLETTER | UCLETTER | DIGIT | "_";
	public TerminalRule getCHRule() {
		return (tCH != null) ? tCH : (tCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CH"));
	} 

	//terminal fragment LCLETTER:
	//	"a".."z";
	public TerminalRule getLCLETTERRule() {
		return (tLCLETTER != null) ? tLCLETTER : (tLCLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCLETTER"));
	} 

	//terminal fragment UCLETTER:
	//	"A".."Z";
	public TerminalRule getUCLETTERRule() {
		return (tUCLETTER != null) ? tUCLETTER : (tUCLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UCLETTER"));
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 
}
