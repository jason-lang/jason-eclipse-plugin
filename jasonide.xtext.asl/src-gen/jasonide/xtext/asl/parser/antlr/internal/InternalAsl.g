/*
* generated by Xtext
*/
grammar InternalAsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	 memoize=true;
	
}

@lexer::header {
package jasonide.xtext.asl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jasonide.xtext.asl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jasonide.xtext.asl.services.AslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AslGrammarAccess grammarAccess;
 	
    public InternalAslParser(TokenStream input, AslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Agent";	
   	}
   	
   	@Override
   	protected AslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAgent
entryRuleAgent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAgentRule()); }
	 iv_ruleAgent=ruleAgent 
	 { $current=$iv_ruleAgent.current; } 
	 EOF 
;

// Rule Agent
ruleAgent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getDirectiveDirectiveParserRuleCall_0_0()); 
	    }
		lv_directive_0_0=ruleDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"directive",
        		lv_directive_0_0, 
        		"Directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getBeliefBeliefParserRuleCall_1_0_0()); 
	    }
		lv_belief_1_0=ruleBelief		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"belief",
        		lv_belief_1_0, 
        		"Belief");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getDirectiveDirectiveParserRuleCall_1_1_0()); 
	    }
		lv_directive_2_0=ruleDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"directive",
        		lv_directive_2_0, 
        		"Directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*((
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getInitial_goalInitial_goalParserRuleCall_2_0_0()); 
	    }
		lv_initial_goal_3_0=ruleInitial_goal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"initial_goal",
        		lv_initial_goal_3_0, 
        		"Initial_goal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getDirectiveDirectiveParserRuleCall_2_1_0()); 
	    }
		lv_directive_4_0=ruleDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"directive",
        		lv_directive_4_0, 
        		"Directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*((
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getPlanPlanParserRuleCall_3_0_0()); 
	    }
		lv_plan_5_0=rulePlan		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"plan",
        		lv_plan_5_0, 
        		"Plan");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getBeliefBeliefParserRuleCall_3_1_0()); 
	    }
		lv_belief_6_0=ruleBelief		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"belief",
        		lv_belief_6_0, 
        		"Belief");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAgentAccess().getDirectiveDirectiveParserRuleCall_3_2_0()); 
	    }
		lv_directive_7_0=ruleDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAgentRule());
	        }
       		add(
       			$current, 
       			"directive",
        		lv_directive_7_0, 
        		"Directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*)
;





// Entry rule entryRuleDirective
entryRuleDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	 iv_ruleDirective=ruleDirective 
	 { $current=$iv_ruleDirective.current; } 
	 EOF 
;

// Rule Directive
ruleDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDirectiveAccess().getLeftCurlyBracketKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getDirectiveAccess().getTk_beginTK_BEGINParserRuleCall_1_0_0_0()); 
	    }
		lv_tk_begin_1_0=ruleTK_BEGIN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectiveRule());
	        }
       		set(
       			$current, 
       			"tk_begin",
        		lv_tk_begin_1_0, 
        		"TK_BEGIN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDirectiveAccess().getPredPredParserRuleCall_1_0_1_0()); 
	    }
		lv_pred_2_0=rulePred		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectiveRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_2_0, 
        		"Pred");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDirectiveAccess().getRightCurlyBracketKeyword_1_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDirectiveAccess().getAgentAgentParserRuleCall_1_0_3_0()); 
	    }
		lv_agent_4_0=ruleAgent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectiveRule());
	        }
       		set(
       			$current, 
       			"agent",
        		lv_agent_4_0, 
        		"Agent");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getDirectiveAccess().getPred2PredParserRuleCall_1_1_0_0()); 
	    }
		lv_pred2_5_0=rulePred		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectiveRule());
	        }
       		set(
       			$current, 
       			"pred2",
        		lv_pred2_5_0, 
        		"Pred");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDirectiveAccess().getRightCurlyBracketKeyword_1_1_1());
    }
)))
;





// Entry rule entryRuleBelief
entryRuleBelief returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBeliefRule()); }
	 iv_ruleBelief=ruleBelief 
	 { $current=$iv_ruleBelief.current; } 
	 EOF 
;

// Rule Belief
ruleBelief returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBeliefAccess().getLiteralLiteralParserRuleCall_0_0()); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBeliefRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBeliefAccess().getColonHyphenMinusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBeliefAccess().getLog_exprLog_exprParserRuleCall_1_1_0()); 
	    }
		lv_log_expr_2_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBeliefRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_2_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBeliefAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleInitial_goal
entryRuleInitial_goal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitial_goalRule()); }
	 iv_ruleInitial_goal=ruleInitial_goal 
	 { $current=$iv_ruleInitial_goal.current; } 
	 EOF 
;

// Rule Initial_goal
ruleInitial_goal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitial_goalAccess().getExclamationMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitial_goalAccess().getLiteralLiteralParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitial_goalRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInitial_goalAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRulePlan
entryRulePlan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlanRule()); }
	 iv_rulePlan=rulePlan 
	 { $current=$iv_rulePlan.current; } 
	 EOF 
;

// Rule Plan
rulePlan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_tk_label_at_0_0=RULE_TK_LABEL_AT
		{
			newLeafNode(lv_tk_label_at_0_0, grammarAccess.getPlanAccess().getTk_label_atTK_LABEL_ATTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tk_label_at",
        		lv_tk_label_at_0_0, 
        		"TK_LABEL_AT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getPredPredParserRuleCall_0_1_0()); 
	    }
		lv_pred_1_0=rulePred		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_1_0, 
        		"Pred");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getTriggerTriggerParserRuleCall_1_0()); 
	    }
		lv_trigger_2_0=ruleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_2_0, 
        		"Trigger");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPlanAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getLog_exprLog_exprParserRuleCall_2_1_0()); 
	    }
		lv_log_expr_4_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_4_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='<-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPlanAccess().getLessThanSignHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getPlan_bodyPlan_bodyParserRuleCall_3_1_0()); 
	    }
		lv_plan_body_6_0=rulePlan_body		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"plan_body",
        		lv_plan_body_6_0, 
        		"Plan_body");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPlanAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getTriggerTriggerSymbolParserRuleCall_0_0()); 
	    }
		lv_trigger_0_0=ruleTriggerSymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_0_0, 
        		"TriggerSymbol");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getLiteralLiteralParserRuleCall_1_0_0()); 
	    }
		lv_literal_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getVarVarParserRuleCall_1_1_0()); 
	    }
		lv_var_2_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTriggerSymbol
entryRuleTriggerSymbol returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerSymbolRule()); } 
	 iv_ruleTriggerSymbol=ruleTriggerSymbol 
	 { $current=$iv_ruleTriggerSymbol.current.getText(); }  
	 EOF 
;

// Rule TriggerSymbol
ruleTriggerSymbol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTriggerSymbolAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTriggerSymbolAccess().getHyphenMinusKeyword_0_1()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTriggerSymbolAccess().getCircumflexAccentKeyword_0_2()); 
    }
)(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTriggerSymbolAccess().getExclamationMarkKeyword_1_0()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTriggerSymbolAccess().getQuestionMarkKeyword_1_1()); 
    }
)?)
    ;





// Entry rule entryRulePlan_body
entryRulePlan_body returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlan_bodyRule()); }
	 iv_rulePlan_body=rulePlan_body 
	 { $current=$iv_rulePlan_body.current; } 
	 EOF 
;

// Rule Plan_body
rulePlan_body returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_bodyAccess().getPlan_body_termPlan_body_termParserRuleCall_0_0()); 
	    }
		lv_plan_body_term_0_0=rulePlan_body_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_bodyRule());
	        }
       		set(
       			$current, 
       			"plan_body_term",
        		lv_plan_body_term_0_0, 
        		"Plan_body_term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlan_bodyAccess().getSemicolonKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_bodyAccess().getPlan_bodyPlan_bodyParserRuleCall_2_0()); 
	    }
		lv_plan_body_2_0=rulePlan_body		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_bodyRule());
	        }
       		set(
       			$current, 
       			"plan_body",
        		lv_plan_body_2_0, 
        		"Plan_body");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePlan_body_term
entryRulePlan_body_term returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlan_body_termRule()); }
	 iv_rulePlan_body_term=rulePlan_body_term 
	 { $current=$iv_rulePlan_body_term.current; } 
	 EOF 
;

// Rule Plan_body_term
rulePlan_body_term returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_body_termAccess().getPlan_body_factorPlan_body_factorParserRuleCall_0_0()); 
	    }
		lv_plan_body_factor_0_0=rulePlan_body_factor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_body_termRule());
	        }
       		set(
       			$current, 
       			"plan_body_factor",
        		lv_plan_body_factor_0_0, 
        		"Plan_body_factor");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='|||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlan_body_termAccess().getVerticalLineVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_body_termAccess().getPlan_body_termPlan_body_termParserRuleCall_1_1_0()); 
	    }
		lv_plan_body_term_2_0=rulePlan_body_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_body_termRule());
	        }
       		set(
       			$current, 
       			"plan_body_term",
        		lv_plan_body_term_2_0, 
        		"Plan_body_term");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePlan_body_factor
entryRulePlan_body_factor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlan_body_factorRule()); }
	 iv_rulePlan_body_factor=rulePlan_body_factor 
	 { $current=$iv_rulePlan_body_factor.current; } 
	 EOF 
;

// Rule Plan_body_factor
rulePlan_body_factor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_body_factorAccess().getStmtIFStmtIFParserRuleCall_0_0_0()); 
	    }
		lv_stmtIF_0_0=ruleStmtIF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_body_factorRule());
	        }
       		set(
       			$current, 
       			"stmtIF",
        		lv_stmtIF_0_0, 
        		"StmtIF");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_body_factorAccess().getStmtFORStmtFORParserRuleCall_0_1_0()); 
	    }
		lv_stmtFOR_1_0=ruleStmtFOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_body_factorRule());
	        }
       		set(
       			$current, 
       			"stmtFOR",
        		lv_stmtFOR_1_0, 
        		"StmtFOR");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_body_factorAccess().getStmtWHILEStmtWHILEParserRuleCall_0_2_0()); 
	    }
		lv_stmtWHILE_2_0=ruleStmtWHILE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_body_factorRule());
	        }
       		set(
       			$current, 
       			"stmtWHILE",
        		lv_stmtWHILE_2_0, 
        		"StmtWHILE");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_body_factorAccess().getBody_formulaBody_formulaParserRuleCall_0_3_0()); 
	    }
		lv_body_formula_3_0=ruleBody_formula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_body_factorRule());
	        }
       		set(
       			$current, 
       			"body_formula",
        		lv_body_formula_3_0, 
        		"Body_formula");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='|&|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlan_body_factorAccess().getVerticalLineAmpersandVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_body_factorAccess().getPlan_body_factorPlan_body_factorParserRuleCall_1_1_0()); 
	    }
		lv_plan_body_factor_5_0=rulePlan_body_factor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_body_factorRule());
	        }
       		set(
       			$current, 
       			"plan_body_factor",
        		lv_plan_body_factor_5_0, 
        		"Plan_body_factor");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStmtIF
entryRuleStmtIF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtIFRule()); }
	 iv_ruleStmtIF=ruleStmtIF 
	 { $current=$iv_ruleStmtIF.current; } 
	 EOF 
;

// Rule StmtIF
ruleStmtIF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStmtIFAccess().getTk_ifTK_IFParserRuleCall_0_0()); 
	    }
		lv_tk_if_0_0=ruleTK_IF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtIFRule());
	        }
       		set(
       			$current, 
       			"tk_if",
        		lv_tk_if_0_0, 
        		"TK_IF");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStmtIFAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtIFAccess().getLog_exprLog_exprParserRuleCall_2_0()); 
	    }
		lv_log_expr_2_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtIFRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_2_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStmtIFAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtIFAccess().getPlan_termPlan_termParserRuleCall_4_0()); 
	    }
		lv_plan_term_4_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtIFRule());
	        }
       		set(
       			$current, 
       			"plan_term",
        		lv_plan_term_4_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getStmtIFAccess().getTk_elseTK_ELSEParserRuleCall_5_0_0()); 
	    }
		lv_tk_else_5_0=ruleTK_ELSE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtIFRule());
	        }
       		set(
       			$current, 
       			"tk_else",
        		lv_tk_else_5_0, 
        		"TK_ELSE");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtIFAccess().getPlan_term2Plan_termParserRuleCall_5_1_0()); 
	    }
		lv_plan_term2_6_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtIFRule());
	        }
       		set(
       			$current, 
       			"plan_term2",
        		lv_plan_term2_6_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStmtFOR
entryRuleStmtFOR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtFORRule()); }
	 iv_ruleStmtFOR=ruleStmtFOR 
	 { $current=$iv_ruleStmtFOR.current; } 
	 EOF 
;

// Rule StmtFOR
ruleStmtFOR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStmtFORAccess().getTk_forTK_FORParserRuleCall_0_0()); 
	    }
		lv_tk_for_0_0=ruleTK_FOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtFORRule());
	        }
       		set(
       			$current, 
       			"tk_for",
        		lv_tk_for_0_0, 
        		"TK_FOR");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStmtFORAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtFORAccess().getLog_exprLog_exprParserRuleCall_2_0()); 
	    }
		lv_log_expr_2_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtFORRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_2_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStmtFORAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtFORAccess().getPlan_termPlan_termParserRuleCall_4_0()); 
	    }
		lv_plan_term_4_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtFORRule());
	        }
       		set(
       			$current, 
       			"plan_term",
        		lv_plan_term_4_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStmtWHILE
entryRuleStmtWHILE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtWHILERule()); }
	 iv_ruleStmtWHILE=ruleStmtWHILE 
	 { $current=$iv_ruleStmtWHILE.current; } 
	 EOF 
;

// Rule StmtWHILE
ruleStmtWHILE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStmtWHILEAccess().getTk_whileTK_WHILEParserRuleCall_0_0()); 
	    }
		lv_tk_while_0_0=ruleTK_WHILE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtWHILERule());
	        }
       		set(
       			$current, 
       			"tk_while",
        		lv_tk_while_0_0, 
        		"TK_WHILE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStmtWHILEAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtWHILEAccess().getLog_exprLog_exprParserRuleCall_2_0()); 
	    }
		lv_log_expr_2_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtWHILERule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_2_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStmtWHILEAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStmtWHILEAccess().getPlan_termPlan_termParserRuleCall_4_0()); 
	    }
		lv_plan_term_4_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStmtWHILERule());
	        }
       		set(
       			$current, 
       			"plan_term",
        		lv_plan_term_4_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBody_formula
entryRuleBody_formula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBody_formulaRule()); }
	 iv_ruleBody_formula=ruleBody_formula 
	 { $current=$iv_ruleBody_formula.current; } 
	 EOF 
;

// Rule Body_formula
ruleBody_formula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBody_formulaAccess().getExclamationMarkKeyword_0_0());
    }

    |	otherlv_1='!!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBody_formulaAccess().getExclamationMarkExclamationMarkKeyword_0_1());
    }

    |	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBody_formulaAccess().getQuestionMarkKeyword_0_2());
    }

    |(	otherlv_3='+' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBody_formulaAccess().getPlusSignKeyword_0_3_0());
    }
(	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBody_formulaAccess().getPlusSignKeyword_0_3_1_0());
    }

    |	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBody_formulaAccess().getGreaterThanSignKeyword_0_3_1_1());
    }

    |	otherlv_6='<' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBody_formulaAccess().getLessThanSignKeyword_0_3_1_2());
    }
)?)
    |(	otherlv_7='-' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBody_formulaAccess().getHyphenMinusKeyword_0_4_0());
    }
(	otherlv_8='+' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBody_formulaAccess().getPlusSignKeyword_0_4_1());
    }
)?))?((
(
		{ 
	        newCompositeNode(grammarAccess.getBody_formulaAccess().getPlan_termPlan_termParserRuleCall_1_0_0()); 
	    }
		lv_plan_term_9_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBody_formulaRule());
	        }
       		set(
       			$current, 
       			"plan_term",
        		lv_plan_term_9_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBody_formulaAccess().getLog_exprLog_exprParserRuleCall_1_1_0()); 
	    }
		lv_log_expr_10_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBody_formulaRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_10_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePlan_term
entryRulePlan_term returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlan_termRule()); }
	 iv_rulePlan_term=rulePlan_term 
	 { $current=$iv_rulePlan_term.current; } 
	 EOF 
;

// Rule Plan_term
rulePlan_term returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPlan_termAccess().getPlan_termAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlan_termAccess().getLeftCurlyBracketKeyword_1());
    }
(((
(
		lv_tk_label_at_2_0=RULE_TK_LABEL_AT
		{
			newLeafNode(lv_tk_label_at_2_0, grammarAccess.getPlan_termAccess().getTk_label_atTK_LABEL_ATTerminalRuleCall_2_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlan_termRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tk_label_at",
        		lv_tk_label_at_2_0, 
        		"TK_LABEL_AT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_termAccess().getPredPredParserRuleCall_2_0_1_0()); 
	    }
		lv_pred_3_0=rulePred		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_termRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_3_0, 
        		"Pred");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_termAccess().getTriggerTriggerParserRuleCall_2_1_0()); 
	    }
		lv_trigger_4_0=ruleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_termRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_4_0, 
        		"Trigger");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPlan_termAccess().getColonKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_termAccess().getLog_exprLog_exprParserRuleCall_2_2_1_0()); 
	    }
		lv_log_expr_6_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_termRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_6_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='<-' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPlan_termAccess().getLessThanSignHyphenMinusKeyword_2_3_0());
    }

    |	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPlan_termAccess().getSemicolonKeyword_2_3_1());
    }
)?)?((
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_termAccess().getLiteralLiteralParserRuleCall_3_0_0()); 
	    }
		lv_literal_9_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_termRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_9_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=':-' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPlan_termAccess().getColonHyphenMinusKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_termAccess().getLog_expr2Log_exprParserRuleCall_3_2_0()); 
	    }
		lv_log_expr2_11_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_termRule());
	        }
       		set(
       			$current, 
       			"log_expr2",
        		lv_log_expr2_11_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getPlan_termAccess().getPlan_bodyPlan_bodyParserRuleCall_4_0()); 
	    }
		lv_plan_body_12_0=rulePlan_body		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlan_termRule());
	        }
       		set(
       			$current, 
       			"plan_body",
        		lv_plan_body_12_0, 
        		"Plan_body");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPlan_termAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getAtomJASON_ATOMParserRuleCall_0_0_0_0_0()); 
	    }
		lv_atom_0_0=ruleJASON_ATOM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"atom",
        		lv_atom_0_0, 
        		"JASON_ATOM");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getVarVarParserRuleCall_0_0_0_1_0()); 
	    }
		lv_var_1_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_2='::' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLiteralAccess().getColonColonKeyword_0_0_1());
    }
)?(
(
		lv_tk_neg_3_0=RULE_TK_NEG
		{
			newLeafNode(lv_tk_neg_3_0, grammarAccess.getLiteralAccess().getTk_negTK_NEGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tk_neg",
        		lv_tk_neg_3_0, 
        		"TK_NEG");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getPredPredParserRuleCall_0_2_0_0()); 
	    }
		lv_pred_4_0=rulePred		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"pred",
        		lv_pred_4_0, 
        		"Pred");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getVar2VarParserRuleCall_0_2_1_0()); 
	    }
		lv_var2_5_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"var2",
        		lv_var2_5_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getTk_trueTK_TRUEParserRuleCall_1_0()); 
	    }
		lv_tk_true_6_0=ruleTK_TRUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"tk_true",
        		lv_tk_true_6_0, 
        		"TK_TRUE");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralAccess().getTk_falseTK_FALSEParserRuleCall_2_0()); 
	    }
		lv_tk_false_7_0=ruleTK_FALSE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralRule());
	        }
       		set(
       			$current, 
       			"tk_false",
        		lv_tk_false_7_0, 
        		"TK_FALSE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePred
entryRulePred returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredRule()); }
	 iv_rulePred=rulePred 
	 { $current=$iv_rulePred.current; } 
	 EOF 
;

// Rule Pred
rulePred returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPredAccess().getAtomJASON_ATOMParserRuleCall_0_0_0()); 
	    }
		lv_atom_0_0=ruleJASON_ATOM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredRule());
	        }
       		set(
       			$current, 
       			"atom",
        		lv_atom_0_0, 
        		"JASON_ATOM");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPredAccess().getTk_beginTK_BEGINParserRuleCall_0_1_0()); 
	    }
		lv_tk_begin_1_0=ruleTK_BEGIN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredRule());
	        }
       		set(
       			$current, 
       			"tk_begin",
        		lv_tk_begin_1_0, 
        		"TK_BEGIN");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPredAccess().getTk_endTK_ENDParserRuleCall_0_2_0()); 
	    }
		lv_tk_end_2_0=ruleTK_END		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredRule());
	        }
       		set(
       			$current, 
       			"tk_end",
        		lv_tk_end_2_0, 
        		"TK_END");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredAccess().getTermsTermsParserRuleCall_1_1_0()); 
	    }
		lv_terms_4_0=ruleTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_4_0, 
        		"Terms");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPredAccess().getRightParenthesisKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPredAccess().getPlan_termPlan_termParserRuleCall_2_0()); 
	    }
		lv_plan_term_6_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredRule());
	        }
       		add(
       			$current, 
       			"plan_term",
        		lv_plan_term_6_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPredAccess().getListListParserRuleCall_3_0()); 
	    }
		lv_list_7_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_7_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTerms
entryRuleTerms returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermsRule()); }
	 iv_ruleTerms=ruleTerms 
	 { $current=$iv_ruleTerms.current; } 
	 EOF 
;

// Rule Terms
ruleTerms returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermsAccess().getTermTermParserRuleCall_0_0()); 
	    }
		lv_term_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermsRule());
	        }
       		add(
       			$current, 
       			"term",
        		lv_term_0_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTermsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermsAccess().getTermTermParserRuleCall_1_1_0()); 
	    }
		lv_term_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermsRule());
	        }
       		add(
       			$current, 
       			"term",
        		lv_term_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getListListParserRuleCall_0_0()); 
	    }
		lv_list_0_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_0_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getPlan_termPlan_termParserRuleCall_1_0()); 
	    }
		lv_plan_term_1_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"plan_term",
        		lv_plan_term_1_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getLog_exprLog_exprParserRuleCall_2_0()); 
	    }
		lv_log_expr_2_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_2_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleList
entryRuleList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListRule()); }
	 iv_ruleList=ruleList 
	 { $current=$iv_ruleList.current; } 
	 EOF 
;

// Rule List
ruleList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getListAccess().getListAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getTerm_in_listTerm_in_listParserRuleCall_2_0_0()); 
	    }
		lv_term_in_list_2_0=ruleTerm_in_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"term_in_list",
        		lv_term_in_list_2_0, 
        		"Term_in_list");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getTerm_in_listTerm_in_listParserRuleCall_2_1_1_0()); 
	    }
		lv_term_in_list_4_0=ruleTerm_in_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		add(
       			$current, 
       			"term_in_list",
        		lv_term_in_list_4_0, 
        		"Term_in_list");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_5='|' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListAccess().getVerticalLineKeyword_2_2_0());
    }
((
(
		lv_var_6_0=RULE_VART
		{
			newLeafNode(lv_var_6_0, grammarAccess.getListAccess().getVarVARTTerminalRuleCall_2_2_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_6_0, 
        		"VART");
	    }

)
)
    |(
(
		lv_unnamedvar_7_0=RULE_UNNAMEDVART
		{
			newLeafNode(lv_unnamedvar_7_0, grammarAccess.getListAccess().getUnnamedvarUNNAMEDVARTTerminalRuleCall_2_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unnamedvar",
        		lv_unnamedvar_7_0, 
        		"UNNAMEDVART");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getListAccess().getListListParserRuleCall_2_2_1_2_0()); 
	    }
		lv_list_8_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_8_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)?	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getListAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTerm_in_list
entryRuleTerm_in_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm_in_listRule()); }
	 iv_ruleTerm_in_list=ruleTerm_in_list 
	 { $current=$iv_ruleTerm_in_list.current; } 
	 EOF 
;

// Rule Term_in_list
ruleTerm_in_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTerm_in_listAccess().getListListParserRuleCall_0_0()); 
	    }
		lv_list_0_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm_in_listRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_0_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm_in_listAccess().getArithm_exprArithm_exprParserRuleCall_1_0()); 
	    }
		lv_arithm_expr_1_0=ruleArithm_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm_in_listRule());
	        }
       		set(
       			$current, 
       			"arithm_expr",
        		lv_arithm_expr_1_0, 
        		"Arithm_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm_in_listAccess().getStringStringParserRuleCall_2_0()); 
	    }
		lv_string_2_0=ruleString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm_in_listRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_2_0, 
        		"String");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm_in_listAccess().getPlan_termPlan_termParserRuleCall_3_0()); 
	    }
		lv_plan_term_3_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm_in_listRule());
	        }
       		set(
       			$current, 
       			"plan_term",
        		lv_plan_term_3_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLog_expr
entryRuleLog_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLog_exprRule()); }
	 iv_ruleLog_expr=ruleLog_expr 
	 { $current=$iv_ruleLog_expr.current; } 
	 EOF 
;

// Rule Log_expr
ruleLog_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLog_exprAccess().getLog_expr_trmLog_expr_trmParserRuleCall_0_0()); 
	    }
		lv_log_expr_trm_0_0=ruleLog_expr_trm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLog_exprRule());
	        }
       		set(
       			$current, 
       			"log_expr_trm",
        		lv_log_expr_trm_0_0, 
        		"Log_expr_trm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLog_exprAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLog_exprAccess().getLog_exprLog_exprParserRuleCall_1_1_0()); 
	    }
		lv_log_expr_2_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLog_exprRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_2_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLog_expr_trm
entryRuleLog_expr_trm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLog_expr_trmRule()); }
	 iv_ruleLog_expr_trm=ruleLog_expr_trm 
	 { $current=$iv_ruleLog_expr_trm.current; } 
	 EOF 
;

// Rule Log_expr_trm
ruleLog_expr_trm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLog_expr_trmAccess().getLog_expr_factorLog_expr_factorParserRuleCall_0_0()); 
	    }
		lv_log_expr_factor_0_0=ruleLog_expr_factor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLog_expr_trmRule());
	        }
       		set(
       			$current, 
       			"log_expr_factor",
        		lv_log_expr_factor_0_0, 
        		"Log_expr_factor");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLog_expr_trmAccess().getAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLog_expr_trmAccess().getLog_expr_trmLog_expr_trmParserRuleCall_1_1_0()); 
	    }
		lv_log_expr_trm_2_0=ruleLog_expr_trm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLog_expr_trmRule());
	        }
       		set(
       			$current, 
       			"log_expr_trm",
        		lv_log_expr_trm_2_0, 
        		"Log_expr_trm");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLog_expr_factor
entryRuleLog_expr_factor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLog_expr_factorRule()); }
	 iv_ruleLog_expr_factor=ruleLog_expr_factor 
	 { $current=$iv_ruleLog_expr_factor.current; } 
	 EOF 
;

// Rule Log_expr_factor
ruleLog_expr_factor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getLog_expr_factorAccess().getTk_notTK_NOTParserRuleCall_0_0_0()); 
	    }
		lv_tk_not_0_0=ruleTK_NOT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLog_expr_factorRule());
	        }
       		set(
       			$current, 
       			"tk_not",
        		lv_tk_not_0_0, 
        		"TK_NOT");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLog_expr_factorAccess().getLog_expr_factorLog_expr_factorParserRuleCall_0_1_0()); 
	    }
		lv_log_expr_factor_1_0=ruleLog_expr_factor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLog_expr_factorRule());
	        }
       		set(
       			$current, 
       			"log_expr_factor",
        		lv_log_expr_factor_1_0, 
        		"Log_expr_factor");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLog_expr_factorAccess().getRel_exprRel_exprParserRuleCall_1_0()); 
	    }
		lv_rel_expr_2_0=ruleRel_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLog_expr_factorRule());
	        }
       		set(
       			$current, 
       			"rel_expr",
        		lv_rel_expr_2_0, 
        		"Rel_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRel_expr
entryRuleRel_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRel_exprRule()); }
	 iv_ruleRel_expr=ruleRel_expr 
	 { $current=$iv_ruleRel_expr.current; } 
	 EOF 
;

// Rule Rel_expr
ruleRel_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRel_exprAccess().getArithm_expArithm_exprParserRuleCall_0_0_0()); 
	    }
		lv_arithm_exp_0_0=ruleArithm_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_exprRule());
	        }
       		set(
       			$current, 
       			"arithm_exp",
        		lv_arithm_exp_0_0, 
        		"Arithm_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRel_exprAccess().getStringStringParserRuleCall_0_1_0()); 
	    }
		lv_string_1_0=ruleString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_exprRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_1_0, 
        		"String");
	        afterParserOrEnumRuleCall();
	    }

)
))((
(
		{ 
	        newCompositeNode(grammarAccess.getRel_exprAccess().getRelOpTK_REL_OPParserRuleCall_1_0_0()); 
	    }
		lv_relOp_2_0=ruleTK_REL_OP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_exprRule());
	        }
       		set(
       			$current, 
       			"relOp",
        		lv_relOp_2_0, 
        		"TK_REL_OP");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRel_exprAccess().getArithm_exprArithm_exprParserRuleCall_1_1_0_0()); 
	    }
		lv_arithm_expr_3_0=ruleArithm_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_exprRule());
	        }
       		set(
       			$current, 
       			"arithm_expr",
        		lv_arithm_expr_3_0, 
        		"Arithm_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRel_exprAccess().getString2StringParserRuleCall_1_1_1_0()); 
	    }
		lv_string2_4_0=ruleString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_exprRule());
	        }
       		set(
       			$current, 
       			"string2",
        		lv_string2_4_0, 
        		"String");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRel_exprAccess().getListListParserRuleCall_1_1_2_0()); 
	    }
		lv_list_5_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_exprRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_5_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRel_exprAccess().getPlan_termPlan_termParserRuleCall_1_1_3_0()); 
	    }
		lv_plan_term_6_0=rulePlan_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_exprRule());
	        }
       		set(
       			$current, 
       			"plan_term",
        		lv_plan_term_6_0, 
        		"Plan_term");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleTK_REL_OP
entryRuleTK_REL_OP returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTK_REL_OPRule()); } 
	 iv_ruleTK_REL_OP=ruleTK_REL_OP 
	 { $current=$iv_ruleTK_REL_OP.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TK_REL_OP
ruleTK_REL_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getEqualsSignEqualsSignKeyword_4()); 
    }

    |
	kw='\\==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getReverseSolidusEqualsSignEqualsSignKeyword_5()); 
    }

    |(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getEqualsSignKeyword_6_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getFullStopKeyword_6_1_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_REL_OPAccess().getFullStopKeyword_6_1_1()); 
    }
)?))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleArithm_expr
entryRuleArithm_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithm_exprRule()); }
	 iv_ruleArithm_expr=ruleArithm_expr 
	 { $current=$iv_ruleArithm_expr.current; } 
	 EOF 
;

// Rule Arithm_expr
ruleArithm_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_exprAccess().getArithm_expr_trmArithm_expr_trmParserRuleCall_0_0()); 
	    }
		lv_arithm_expr_trm_0_0=ruleArithm_expr_trm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_exprRule());
	        }
       		set(
       			$current, 
       			"arithm_expr_trm",
        		lv_arithm_expr_trm_0_0, 
        		"Arithm_expr_trm");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_exprAccess().getSubaddTK_SUB_ADDParserRuleCall_1_0_0()); 
	    }
		lv_subadd_1_0=ruleTK_SUB_ADD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_exprRule());
	        }
       		set(
       			$current, 
       			"subadd",
        		lv_subadd_1_0, 
        		"TK_SUB_ADD");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_exprAccess().getArithm_exprArithm_exprParserRuleCall_1_1_0()); 
	    }
		lv_arithm_expr_2_0=ruleArithm_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_exprRule());
	        }
       		set(
       			$current, 
       			"arithm_expr",
        		lv_arithm_expr_2_0, 
        		"Arithm_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTK_SUB_ADD
entryRuleTK_SUB_ADD returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_SUB_ADDRule()); } 
	 iv_ruleTK_SUB_ADD=ruleTK_SUB_ADD 
	 { $current=$iv_ruleTK_SUB_ADD.current.getText(); }  
	 EOF 
;

// Rule TK_SUB_ADD
ruleTK_SUB_ADD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_SUB_ADDAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_SUB_ADDAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleArithm_expr_trm
entryRuleArithm_expr_trm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithm_expr_trmRule()); }
	 iv_ruleArithm_expr_trm=ruleArithm_expr_trm 
	 { $current=$iv_ruleArithm_expr_trm.current; } 
	 EOF 
;

// Rule Arithm_expr_trm
ruleArithm_expr_trm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_trmAccess().getArithm_expr_factorArithm_expr_factorParserRuleCall_0_0()); 
	    }
		lv_arithm_expr_factor_0_0=ruleArithm_expr_factor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_trmRule());
	        }
       		set(
       			$current, 
       			"arithm_expr_factor",
        		lv_arithm_expr_factor_0_0, 
        		"Arithm_expr_factor");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_trmAccess().getMuldivTK_MUL_DIVParserRuleCall_1_0_0_0()); 
	    }
		lv_muldiv_1_0=ruleTK_MUL_DIV		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_trmRule());
	        }
       		set(
       			$current, 
       			"muldiv",
        		lv_muldiv_1_0, 
        		"TK_MUL_DIV");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_trmAccess().getTk_intdivTK_INTDIVParserRuleCall_1_0_1_0()); 
	    }
		lv_tk_intdiv_2_0=ruleTK_INTDIV		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_trmRule());
	        }
       		set(
       			$current, 
       			"tk_intdiv",
        		lv_tk_intdiv_2_0, 
        		"TK_INTDIV");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_trmAccess().getTk_intmodTK_INTMODParserRuleCall_1_0_2_0()); 
	    }
		lv_tk_intmod_3_0=ruleTK_INTMOD		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_trmRule());
	        }
       		set(
       			$current, 
       			"tk_intmod",
        		lv_tk_intmod_3_0, 
        		"TK_INTMOD");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_trmAccess().getArithm_expr_trmArithm_expr_trmParserRuleCall_1_1_0()); 
	    }
		lv_arithm_expr_trm_4_0=ruleArithm_expr_trm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_trmRule());
	        }
       		set(
       			$current, 
       			"arithm_expr_trm",
        		lv_arithm_expr_trm_4_0, 
        		"Arithm_expr_trm");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTK_MUL_DIV
entryRuleTK_MUL_DIV returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_MUL_DIVRule()); } 
	 iv_ruleTK_MUL_DIV=ruleTK_MUL_DIV 
	 { $current=$iv_ruleTK_MUL_DIV.current.getText(); }  
	 EOF 
;

// Rule TK_MUL_DIV
ruleTK_MUL_DIV returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_MUL_DIVAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_MUL_DIVAccess().getSolidusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleArithm_expr_factor
entryRuleArithm_expr_factor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithm_expr_factorRule()); }
	 iv_ruleArithm_expr_factor=ruleArithm_expr_factor 
	 { $current=$iv_ruleArithm_expr_factor.current; } 
	 EOF 
;

// Rule Arithm_expr_factor
ruleArithm_expr_factor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_factorAccess().getArithm_expr_simpleArithm_expr_simpleParserRuleCall_0_0()); 
	    }
		lv_arithm_expr_simple_0_0=ruleArithm_expr_simple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_factorRule());
	        }
       		set(
       			$current, 
       			"arithm_expr_simple",
        		lv_arithm_expr_simple_0_0, 
        		"Arithm_expr_simple");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_factorAccess().getExponentialTK_EXPONENTIALParserRuleCall_1_0_0()); 
	    }
		lv_exponential_1_0=ruleTK_EXPONENTIAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_factorRule());
	        }
       		set(
       			$current, 
       			"exponential",
        		lv_exponential_1_0, 
        		"TK_EXPONENTIAL");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_factorAccess().getArithm_expr_factorArithm_expr_factorParserRuleCall_1_1_0()); 
	    }
		lv_arithm_expr_factor_2_0=ruleArithm_expr_factor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_factorRule());
	        }
       		set(
       			$current, 
       			"arithm_expr_factor",
        		lv_arithm_expr_factor_2_0, 
        		"Arithm_expr_factor");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTK_EXPONENTIAL
entryRuleTK_EXPONENTIAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_EXPONENTIALRule()); } 
	 iv_ruleTK_EXPONENTIAL=ruleTK_EXPONENTIAL 
	 { $current=$iv_ruleTK_EXPONENTIAL.current.getText(); }  
	 EOF 
;

// Rule TK_EXPONENTIAL
ruleTK_EXPONENTIAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='**' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_EXPONENTIALAccess().getAsteriskAsteriskKeyword()); 
    }

    ;





// Entry rule entryRuleArithm_expr_simple
entryRuleArithm_expr_simple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithm_expr_simpleRule()); }
	 iv_ruleArithm_expr_simple=ruleArithm_expr_simple 
	 { $current=$iv_ruleArithm_expr_simple.current; } 
	 EOF 
;

// Rule Arithm_expr_simple
ruleArithm_expr_simple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_simpleAccess().getNumberNumberParserRuleCall_0_0()); 
	    }
		lv_number_0_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_simpleRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_simpleAccess().getUnaryTK_UNARY_OPParserRuleCall_1_0_0()); 
	    }
		lv_unary_1_0=ruleTK_UNARY_OP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_simpleRule());
	        }
       		set(
       			$current, 
       			"unary",
        		lv_unary_1_0, 
        		"TK_UNARY_OP");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_simpleAccess().getArithm_expr_simpleArithm_expr_simpleParserRuleCall_1_1_0()); 
	    }
		lv_arithm_expr_simple_2_0=ruleArithm_expr_simple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_simpleRule());
	        }
       		set(
       			$current, 
       			"arithm_expr_simple",
        		lv_arithm_expr_simple_2_0, 
        		"Arithm_expr_simple");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArithm_expr_simpleAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_simpleAccess().getLog_exprLog_exprParserRuleCall_2_1_0()); 
	    }
		lv_log_expr_4_0=ruleLog_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_simpleRule());
	        }
       		set(
       			$current, 
       			"log_expr",
        		lv_log_expr_4_0, 
        		"Log_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArithm_expr_simpleAccess().getRightParenthesisKeyword_2_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArithm_expr_simpleAccess().getFunctionFunctionParserRuleCall_3_0()); 
	    }
		lv_function_6_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithm_expr_simpleRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_6_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTK_UNARY_OP
entryRuleTK_UNARY_OP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_UNARY_OPRule()); } 
	 iv_ruleTK_UNARY_OP=ruleTK_UNARY_OP 
	 { $current=$iv_ruleTK_UNARY_OP.current.getText(); }  
	 EOF 
;

// Rule TK_UNARY_OP
ruleTK_UNARY_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_UNARY_OPAccess().getHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getLiteralLiteralParserRuleCall_0()); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current; } 
	 EOF 
;

// Rule Var
ruleVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_var_0_0=RULE_VART
		{
			newLeafNode(lv_var_0_0, grammarAccess.getVarAccess().getVarVARTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VART");
	    }

)
)
    |(
(
		lv_unnamedvar_1_0=RULE_UNNAMEDVART
		{
			newLeafNode(lv_unnamedvar_1_0, grammarAccess.getVarAccess().getUnnamedvarUNNAMEDVARTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unnamedvar",
        		lv_unnamedvar_1_0, 
        		"UNNAMEDVART");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getVarAccess().getListListParserRuleCall_1_0()); 
	    }
		lv_list_2_0=ruleList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"List");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleString
entryRuleString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringRule()); }
	 iv_ruleString=ruleString 
	 { $current=$iv_ruleString.current; } 
	 EOF 
;

// Rule String
ruleString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_string_0_0=RULE_STRINGT
		{
			newLeafNode(lv_string_0_0, grammarAccess.getStringAccess().getStringSTRINGTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_0_0, 
        		"STRINGT");
	    }

)
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(((
(
		lv_number_0_0=RULE_NUMBERT
		{
			newLeafNode(lv_number_0_0, grammarAccess.getNumberAccess().getNumberNUMBERTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"NUMBERT");
	    }

)
)+	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumberAccess().getFullStopKeyword_0_1());
    }
(
(
		lv_decimalPart_2_0=RULE_NUMBERT
		{
			newLeafNode(lv_decimalPart_2_0, grammarAccess.getNumberAccess().getDecimalPartNUMBERTTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"decimalPart",
        		lv_decimalPart_2_0, 
        		"NUMBERT");
	    }

)
)+)
    |(	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumberAccess().getFullStopKeyword_1_0());
    }
(
(
		lv_decimalPart_4_0=RULE_NUMBERT
		{
			newLeafNode(lv_decimalPart_4_0, grammarAccess.getNumberAccess().getDecimalPartNUMBERTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"decimalPart",
        		lv_decimalPart_4_0, 
        		"NUMBERT");
	    }

)
)+)
    |(
(
		lv_number_5_0=RULE_NUMBERT
		{
			newLeafNode(lv_number_5_0, grammarAccess.getNumberAccess().getNumberNUMBERTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"number",
        		lv_number_5_0, 
        		"NUMBERT");
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleJASON_ATOM
entryRuleJASON_ATOM returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getJASON_ATOMRule()); } 
	 iv_ruleJASON_ATOM=ruleJASON_ATOM 
	 { $current=$iv_ruleJASON_ATOM.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule JASON_ATOM
ruleJASON_ATOM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJASON_ATOMAccess().getJASON_ATOM_HEADParserRuleCall_0()); 
    }
    this_JASON_ATOM_HEAD_0=ruleJASON_ATOM_HEAD    {
		$current.merge(this_JASON_ATOM_HEAD_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getJASON_ATOMAccess().getJASON_ATOM_TAILParserRuleCall_1()); 
    }
    this_JASON_ATOM_TAIL_1=ruleJASON_ATOM_TAIL    {
		$current.merge(this_JASON_ATOM_TAIL_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleJASON_ATOM_HEAD
entryRuleJASON_ATOM_HEAD returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJASON_ATOM_HEADRule()); } 
	 iv_ruleJASON_ATOM_HEAD=ruleJASON_ATOM_HEAD 
	 { $current=$iv_ruleJASON_ATOM_HEAD.current.getText(); }  
	 EOF 
;

// Rule JASON_ATOM_HEAD
ruleJASON_ATOM_HEAD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJASON_ATOM_HEADAccess().getFullStopKeyword_0()); 
    }
)?    this_ATOM_1=RULE_ATOM    {
		$current.merge(this_ATOM_1);
    }

    { 
    newLeafNode(this_ATOM_1, grammarAccess.getJASON_ATOM_HEADAccess().getATOMTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleJASON_ATOM_TAIL
entryRuleJASON_ATOM_TAIL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJASON_ATOM_TAILRule()); } 
	 iv_ruleJASON_ATOM_TAIL=ruleJASON_ATOM_TAIL 
	 { $current=$iv_ruleJASON_ATOM_TAIL.current.getText(); }  
	 EOF 
;

// Rule JASON_ATOM_TAIL
ruleJASON_ATOM_TAIL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJASON_ATOM_TAILAccess().getFullStopKeyword_0()); 
    }
    this_ATOM_1=RULE_ATOM    {
		$current.merge(this_ATOM_1);
    }

    { 
    newLeafNode(this_ATOM_1, grammarAccess.getJASON_ATOM_TAILAccess().getATOMTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleTK_BEGIN
entryRuleTK_BEGIN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_BEGINRule()); } 
	 iv_ruleTK_BEGIN=ruleTK_BEGIN 
	 { $current=$iv_ruleTK_BEGIN.current.getText(); }  
	 EOF 
;

// Rule TK_BEGIN
ruleTK_BEGIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='begin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_BEGINAccess().getBeginKeyword()); 
    }

    ;





// Entry rule entryRuleTK_END
entryRuleTK_END returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_ENDRule()); } 
	 iv_ruleTK_END=ruleTK_END 
	 { $current=$iv_ruleTK_END.current.getText(); }  
	 EOF 
;

// Rule TK_END
ruleTK_END returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_ENDAccess().getEndKeyword()); 
    }

    ;





// Entry rule entryRuleTK_IF
entryRuleTK_IF returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_IFRule()); } 
	 iv_ruleTK_IF=ruleTK_IF 
	 { $current=$iv_ruleTK_IF.current.getText(); }  
	 EOF 
;

// Rule TK_IF
ruleTK_IF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_IFAccess().getIfKeyword()); 
    }

    ;





// Entry rule entryRuleTK_ELSE
entryRuleTK_ELSE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_ELSERule()); } 
	 iv_ruleTK_ELSE=ruleTK_ELSE 
	 { $current=$iv_ruleTK_ELSE.current.getText(); }  
	 EOF 
;

// Rule TK_ELSE
ruleTK_ELSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_ELSEAccess().getElseKeyword()); 
    }

    ;





// Entry rule entryRuleTK_FOR
entryRuleTK_FOR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_FORRule()); } 
	 iv_ruleTK_FOR=ruleTK_FOR 
	 { $current=$iv_ruleTK_FOR.current.getText(); }  
	 EOF 
;

// Rule TK_FOR
ruleTK_FOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_FORAccess().getForKeyword()); 
    }

    ;





// Entry rule entryRuleTK_WHILE
entryRuleTK_WHILE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_WHILERule()); } 
	 iv_ruleTK_WHILE=ruleTK_WHILE 
	 { $current=$iv_ruleTK_WHILE.current.getText(); }  
	 EOF 
;

// Rule TK_WHILE
ruleTK_WHILE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_WHILEAccess().getWhileKeyword()); 
    }

    ;





// Entry rule entryRuleTK_NOT
entryRuleTK_NOT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_NOTRule()); } 
	 iv_ruleTK_NOT=ruleTK_NOT 
	 { $current=$iv_ruleTK_NOT.current.getText(); }  
	 EOF 
;

// Rule TK_NOT
ruleTK_NOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_NOTAccess().getNotKeyword()); 
    }

    ;





// Entry rule entryRuleTK_INTDIV
entryRuleTK_INTDIV returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_INTDIVRule()); } 
	 iv_ruleTK_INTDIV=ruleTK_INTDIV 
	 { $current=$iv_ruleTK_INTDIV.current.getText(); }  
	 EOF 
;

// Rule TK_INTDIV
ruleTK_INTDIV returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='div' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_INTDIVAccess().getDivKeyword()); 
    }

    ;





// Entry rule entryRuleTK_INTMOD
entryRuleTK_INTMOD returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_INTMODRule()); } 
	 iv_ruleTK_INTMOD=ruleTK_INTMOD 
	 { $current=$iv_ruleTK_INTMOD.current.getText(); }  
	 EOF 
;

// Rule TK_INTMOD
ruleTK_INTMOD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_INTMODAccess().getModKeyword()); 
    }

    ;





// Entry rule entryRuleTK_TRUE
entryRuleTK_TRUE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_TRUERule()); } 
	 iv_ruleTK_TRUE=ruleTK_TRUE 
	 { $current=$iv_ruleTK_TRUE.current.getText(); }  
	 EOF 
;

// Rule TK_TRUE
ruleTK_TRUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_TRUEAccess().getTrueKeyword()); 
    }

    ;





// Entry rule entryRuleTK_FALSE
entryRuleTK_FALSE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTK_FALSERule()); } 
	 iv_ruleTK_FALSE=ruleTK_FALSE 
	 { $current=$iv_ruleTK_FALSE.current.getText(); }  
	 EOF 
;

// Rule TK_FALSE
ruleTK_FALSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTK_FALSEAccess().getFalseKeyword()); 
    }

    ;





RULE_TK_LABEL_AT : '@';

RULE_TK_NEG : '~';

RULE_ATOM : RULE_LCLETTER RULE_CH*;

RULE_VART : RULE_UCLETTER RULE_CH*;

RULE_UNNAMEDVART : '_' RULE_CH*;

RULE_STRINGT : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_NUMBERT : '0'..'9';

fragment RULE_CH : (RULE_LCLETTER|RULE_UCLETTER|RULE_DIGIT|'_');

fragment RULE_LCLETTER : 'a'..'z';

fragment RULE_UCLETTER : 'A'..'Z';

fragment RULE_DIGIT : '0'..'9';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;


