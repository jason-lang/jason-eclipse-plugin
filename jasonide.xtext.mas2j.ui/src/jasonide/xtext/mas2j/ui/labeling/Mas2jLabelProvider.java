/*
* generated by Xtext
*/
package jasonide.xtext.mas2j.ui.labeling;

import jasonide.xtext.mas2j.mas2j.Agent;
import jasonide.xtext.mas2j.mas2j.AgentArchClass;
import jasonide.xtext.mas2j.mas2j.Agents;
import jasonide.xtext.mas2j.mas2j.BeliefBaseClass;
import jasonide.xtext.mas2j.mas2j.Classpaths;
import jasonide.xtext.mas2j.mas2j.ClsDef;
import jasonide.xtext.mas2j.mas2j.Control;
import jasonide.xtext.mas2j.mas2j.Directive;
import jasonide.xtext.mas2j.mas2j.Directives;
import jasonide.xtext.mas2j.mas2j.Environment;
import jasonide.xtext.mas2j.mas2j.FileName;
import jasonide.xtext.mas2j.mas2j.Infrastructure;
import jasonide.xtext.mas2j.mas2j.Instances;
import jasonide.xtext.mas2j.mas2j.Options;
import jasonide.xtext.mas2j.mas2j.OtherOption;
import jasonide.xtext.mas2j.mas2j.ParameterClsDef;
import jasonide.xtext.mas2j.mas2j.Sourcepaths;
import jasonide.xtext.mas2j.mas2j.Verbose;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class Mas2jLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public Mas2jLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}


	//Labels and icons can be computed like this:
	
	public String text(Object element) {
		if (element instanceof Agent){
			return ((Agent) element).getName();
		} else if (element instanceof Agents) {
			return "Agents";
		} else if (element instanceof Sourcepaths) {
			return "Sourcepaths";
		} else if (element instanceof Classpaths) {
			return "Classpaths";
		} else if (element instanceof Infrastructure) {
			return "Infrastructure";
		} else if (element instanceof Environment) {
			return "Environment";
		} else if (element instanceof Control) {
			return "Execution control";
		} else if (element instanceof Directives) {
			return "Directives";
		} else if (element instanceof ClsDef) {
			return ((ClsDef) element).getInfrastructure();
		} else if (element instanceof Directive) {
			return ((Directive) element).getDirective();
		} else if (element instanceof ParameterClsDef) {
			return (((ParameterClsDef) element).getParameterclsstr() != null ? ((ParameterClsDef) element).getParameterclsstr() : String.valueOf(((ParameterClsDef) element).getParameterclsint()));
		} else if (element instanceof AgentArchClass) {	
			return "Architecture";
		} else if (element instanceof Instances) {
			return "#"+String.valueOf(((Instances) element).getInstances());
		} else if (element instanceof Options) {
			return "Options";
		} else if (element instanceof BeliefBaseClass) {
			return "Belief base";
		} else if (element instanceof Verbose) {
			return "verbose = " + String.valueOf(((Verbose) element).getVal());
		} else if (element instanceof OtherOption) {
			return ((OtherOption) element).getOptionName() + " = " + ((OtherOption) element).getVal();
		} else if (element instanceof FileName) {
			FileName file = (FileName) element;
			String res = "";
			if (file.getPath() != null) {
				res += file.getPath() + " ";
			}
			
			
			if (file.getAsid() != null) {
				res += file.getAsid().get(0);
				if (file.getAsid().size() > 1) {
					res += "."+file.getAsid().get(1);
				}
			}
			return res;
		} else {
			return null;
		}
	}
	
	/*
    public String image(MyModel ele) {
    	return null
    }*/
}
