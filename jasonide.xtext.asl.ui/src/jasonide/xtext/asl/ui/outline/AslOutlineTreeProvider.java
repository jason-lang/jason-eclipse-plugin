/*
* generated by Xtext
*/
package jasonide.xtext.asl.ui.outline;


import jasonide.xtext.asl.asl.Agent;


import jasonide.xtext.asl.asl.Belief;
import jasonide.xtext.asl.asl.Plan;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.PluginImageHelper;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EStructuralFeatureNode;

import com.google.inject.Inject;

/**
 * customization of the default outline structure
 * 
 */
public class AslOutlineTreeProvider extends DefaultOutlineTreeProvider {
	@Inject private PluginImageHelper imageHelper;
	
	protected void _createChildren(DocumentRootNode parentNode, EObject node) {
		
		if (node instanceof Agent) {
			for (Belief b : ((Agent) node).getBelief()) {
				_createNode(parentNode, b);
			}
			
			for (Plan p : ((Agent) node).getPlan()) {
				_createNode(parentNode, p);
			}
		}
	}
	
	protected void _createChildren(IOutlineNode parentNode, EObject node) {
		if (node instanceof Plan || node instanceof Agent || node instanceof Belief)
			super._createChildren(parentNode, node);
	}
	
	protected void _createChildren(EStructuralFeatureNode parentNode, EObject node) {
		if (node instanceof Plan || node instanceof Agent || node instanceof Belief)
			super._createChildren(parentNode, node);
	}
	
	protected void _createNode(IOutlineNode parentNode, EObject node) {
		if (node instanceof Plan || node instanceof Agent || node instanceof Belief)
			super._createNode(parentNode, node);
	}
	
	@Override
	protected boolean _isLeaf(EObject node) {
		return (node instanceof Plan || node instanceof Belief);
	}
	
	
	@Override
	protected Image _image(Object element) {
		if (element instanceof Plan) {
			if (((Plan) element).getTrigger().getTrigger().contains("!") || ((Plan) element).getTrigger().getTrigger().contains("?")) {
				if (((Plan) element).getTrigger().getTrigger().contains("-")) {
					return imageHelper.getImage("plan4.gif");
				} else {
					return imageHelper.getImage("plan.gif");
				}
				
			} else {
				if (((Plan) element).getTrigger().getTrigger().contains("-")) {
					return imageHelper.getImage("plan3.gif");
				} else {
					return imageHelper.getImage("plan2.gif");
				}
			}
		} else if (element instanceof Belief) {
			return imageHelper.getImage("belief.gif");
		}
		return super._image(element);
	}
}
